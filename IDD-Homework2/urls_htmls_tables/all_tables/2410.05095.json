{
    "id_table_1": {
        "caption": "TABLE I:  Mean GPU usage on the render loops main pass in AMBF and AMBF-Vulkan measured in ms.",
        "table": "S5.T1.1",
        "footnotes": [],
        "references": [
            "To address these limitations, this work presents a new standalone rendering engine supporting the Vulkan graphics API to modernize AMBF, which may be applicable to other simulators limited by legacy rendering engines. We chose Vulkan, OpenGLs successor, due to its cross-platform support and low-level design, allowing for significant performance improvements. Given the substantial architectural differences between legacy OpenGL and Vulkan, it was decided to develop the renderer as a standalone program and, therefore, integrate both processes via a plugin in AMBF. As such, support for interface devices, physics computations, and plugin architecture is maintained in AMBF, while the proposed engine renders the geometry of the scene (see Figure  1 ). Overall, the full system enables access to all AMBF features while significantly improving rendering quality.",
            "The complete dynamic simulation framework is composed of three different components (see Fig.  1 ). Firstly, we have the standalone rendering engine built for the Vulkan API, which we will refer to from this point on as AMBF-Vulkan. By itself, the AMBF-Vulkan engine only renders the loaded objects and provides the option to move the virtual cameras and adjust visual parameters via a GUI. Secondly, we have AMBF running in headless mode to perform physics computations and communicate with user input devices. Thirdly, we have the communication plugin that enables AMBF to update the pose of all the objects inside the AMBF-Vulkan engine via shared memory between both processes. Overall, these three components work together to enable the user to access the full set of features from the dynamic simulator AMBF, while also obtaining high-quality renderings from the Vulkan rendering engine. The rest of the methodology is divided as follows. Subsection  IV-A  describes the software design of the renderer AMBF-Vulkan. Subsection  IV-B  presents the graphical features that were implemented in AMBF-Vulkan to improve visual fidelity. Lastly, subsection  IV-C  describes the communication plugin between AMBF and AMBF-Vulkan."
        ]
    }
}