{
    "id_table_1": {
        "caption": "TABLE I:  Perceptual quality scores computed with real cyclist images from the COCO 2017 and Waymo autonomous driving datasets.",
        "table": "S5.E1",
        "footnotes": [],
        "references": [
            "We now have multi-view 3D datasets for training 1) a model for the rideable object (using the 3DArticBikes dataset), and 2) a rider model (using the RenderPeople dataset). 3DGS has recently become a popular method for representing and reconstructing 3D objects because of its short training time, portability/deployability, its versatility and ease of manipulation (rotation and translation) of 3D Gaussians, and the ease of integration of 3DGS foreground objects into existing 3DGS background scenes, which makes it a preferable representation compared to NeRF or working directly with graphics packages like Blender. Therefore, we adopt for 3D object representation. For the rider part, we train GaussianAvatar   [ 24 ] , which learns a human body Gaussian representation that can be re-posed using a target body pose in SMPL format (see Fig.  1 ). For the rideable (Bicycle) part, we train the vanilla 3DGS from   [ 17 ]  to learn a Gaussian representation for each of the   three separate  rigid bicycle parts, each in canonical pose.",
            "The bicycle pose parameters   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ,   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT , and  H g subscript H g H_{g} italic_H start_POSTSUBSCRIPT italic_g end_POSTSUBSCRIPT  can be set: 1) Manually or programmatically. For example, in Fig.  1  (bottom) the values of   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT , and   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  are being varied linearly from   90 90 -90 - 90  to  90 90 90 90  Deg (steering), and from   180 180 -180 - 180  to  180 180 180 180  Deg (pedals). 2)   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  and   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  can be derived using geometry from the riders wrists and ankle joints estimated by CLIFF, and 3) A 3D bicycle pose estimation model can be designed to estimate them directly from the input image, which is out of the scope of this paper. For cyclist animation from videos we derive the values of   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ,   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT , and  H g subscript H g H_{g} italic_H start_POSTSUBSCRIPT italic_g end_POSTSUBSCRIPT  from the estimated riders pose provided by CLIFF as explained next. We rotate the riders body 3D joints to canonical bicycle pose. We then use simple geometry and the orthographic projections of the ankle 3D keypoints onto the  X  Y X Y X-Y italic_X - italic_Y  plane to derive   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  (see Fig.  3 ). Similarly, we use the mid-point along a line that crosses through the projections of the wrists onto the  X  Z X Z X-Z italic_X - italic_Z  plane to derive   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT .",
            "Rider-Rideable 3D Keypoint-Based Pose Refinement.  In the SMPL human body model   [ 22 ] , the pose is represented by a set   = {  k }  subscript  k \\theta=\\{\\mathbf{\\theta_{k}}\\} italic_ = { italic_ start_POSTSUBSCRIPT bold_k end_POSTSUBSCRIPT }  of  K = 24 K 24 K=24 italic_K = 24  local 3D joint rotations represented as axis-angle 3-vectors   k subscript  k \\mathbf{\\theta_{k}} italic_ start_POSTSUBSCRIPT bold_k end_POSTSUBSCRIPT . These joint rotations correspond to human body joints such as Pelvis, Left hip, Left knee, Left ankle, Right shoulder, Right elbow, Right wrist, etc. Given    \\theta italic_ , and the body shape parameters    R 10  superscript R 10 \\beta\\in\\mathbb{R}^{10} italic_  blackboard_R start_POSTSUPERSCRIPT 10 end_POSTSUPERSCRIPT    [ 22 ] , the SMPL model  M = (  ,  ) M   \\mathcal{M}=(\\theta,\\beta) caligraphic_M = ( italic_ , italic_ )  returns the body mesh  M  R N  3 M superscript R N 3 M\\in\\mathbb{R}^{N\\times 3} italic_M  blackboard_R start_POSTSUPERSCRIPT italic_N  3 end_POSTSUPERSCRIPT , with  N = 6890 N 6890 N=6890 italic_N = 6890  vertices. And the set of 3D body joints  J = { J k } J subscript J k J=\\{\\mathbf{J_{k}}\\} italic_J = { bold_J start_POSTSUBSCRIPT bold_k end_POSTSUBSCRIPT }  is obtained as a linear combination of the vertices using a trained regressor   [ 22 ] . We input an image  I I I italic_I  of a cyclist to CLIFF, to obtain estimated riders body parameters  (  c ,  c ) subscript  c subscript  c (\\theta_{c},\\beta_{c}) ( italic_ start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT ) . We observe that the body pose   c subscript  c \\theta_{c} italic_ start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT  is reasonably accurate, but it often comes with errors at specific body locations, such as 3D location mis-match between the riders hands and the bicycle handles, and between the riders feet and bicycle pedals (see left side of Fig.  1 ). To address this problem we propose an iterative Inverse Kinematics (IK) optimization-based 3D human body pose refinement that leverages the controllable 3D pose from the bicycle to align the 3D locations of the problematic human body joints such as wrists, pelvis, and ankles to the corresponding bicycle 3D Keypoints (i.e. steering handles, seat, and pedals). Given the parameters  (  c ,  c ) subscript  c subscript  c (\\theta_{c},\\beta_{c}) ( italic_ start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT )  and the bicycle 3D Keypoints (reposed using   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ,   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT ,  H g subscript H g H_{g} italic_H start_POSTSUBSCRIPT italic_g end_POSTSUBSCRIPT ), we split the human pose parameters as   c =  c f  i  x  e  d   c r  f  n subscript  c subscript  subscript c f i x e d subscript  subscript c r f n \\theta_{c}=\\theta_{c_{fixed}}\\cup\\theta_{c_{rfn}} italic_ start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT = italic_ start_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT italic_f italic_i italic_x italic_e italic_d end_POSTSUBSCRIPT end_POSTSUBSCRIPT  italic_ start_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT italic_r italic_f italic_n end_POSTSUBSCRIPT end_POSTSUBSCRIPT . Where,",
            "which encourages the 3D spatial aligment of the human body 3D Keypoints  x L  w  r  i  s  t subscript x L w r i s t x_{Lwrist} italic_x start_POSTSUBSCRIPT italic_L italic_w italic_r italic_i italic_s italic_t end_POSTSUBSCRIPT ,  x R  w  r  i  s  t subscript x R w r i s t x_{Rwrist} italic_x start_POSTSUBSCRIPT italic_R italic_w italic_r italic_i italic_s italic_t end_POSTSUBSCRIPT ,  x p  e  l  v  i  s subscript x p e l v i s x_{pelvis} italic_x start_POSTSUBSCRIPT italic_p italic_e italic_l italic_v italic_i italic_s end_POSTSUBSCRIPT ,  x L  a  n  k subscript x L a n k x_{Lank} italic_x start_POSTSUBSCRIPT italic_L italic_a italic_n italic_k end_POSTSUBSCRIPT ,  x R  a  n  k subscript x R a n k x_{Rank} italic_x start_POSTSUBSCRIPT italic_R italic_a italic_n italic_k end_POSTSUBSCRIPT  to the bicycle 3D Keypoints  x L  h  a  n  d  l  e subscript x L h a n d l e x_{Lhandle} italic_x start_POSTSUBSCRIPT italic_L italic_h italic_a italic_n italic_d italic_l italic_e end_POSTSUBSCRIPT ,  x R  h  a  n  d  l  e subscript x R h a n d l e x_{Rhandle} italic_x start_POSTSUBSCRIPT italic_R italic_h italic_a italic_n italic_d italic_l italic_e end_POSTSUBSCRIPT ,  x s  e  a  t subscript x s e a t x_{seat} italic_x start_POSTSUBSCRIPT italic_s italic_e italic_a italic_t end_POSTSUBSCRIPT ,  x L  p  e  d subscript x L p e d x_{Lped} italic_x start_POSTSUBSCRIPT italic_L italic_p italic_e italic_d end_POSTSUBSCRIPT ,  x R  p  e  d subscript x R p e d x_{Rped} italic_x start_POSTSUBSCRIPT italic_R italic_p italic_e italic_d end_POSTSUBSCRIPT  respectively. In summary, the optimization process places the riders hands, ankles and pelvis near the bicycle handles, pedals, and seat respectively. We use the Adam optimizer with LR= 0.05 0.05 0.05 0.05 , and we set (experimentally) the number of iterations to  50 50 50 50 . We select the   ^  r  f  n  ( i ) subscript ^  subscript  r f n i \\hat{\\Delta}_{\\theta_{rfn}}(i) over^ start_ARG roman_ end_ARG start_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT italic_r italic_f italic_n end_POSTSUBSCRIPT end_POSTSUBSCRIPT ( italic_i )  deltas that minimize Eqn. ( 5 ). Once the optimization procedure ends, we use the refined riders body pose   c  o  p  t =  c f  i  x  e  d  (  c r  f  n +  ^  r  f  n  ( i ) ) subscript  c o p t subscript  subscript c f i x e d subscript  subscript c r f n subscript ^  subscript  r f n i \\theta_{copt}=\\theta_{c_{fixed}}\\cup(\\theta_{c_{rfn}}+\\hat{\\Delta}_{\\theta_{% rfn}}(i)) italic_ start_POSTSUBSCRIPT italic_c italic_o italic_p italic_t end_POSTSUBSCRIPT = italic_ start_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT italic_f italic_i italic_x italic_e italic_d end_POSTSUBSCRIPT end_POSTSUBSCRIPT  ( italic_ start_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT italic_r italic_f italic_n end_POSTSUBSCRIPT end_POSTSUBSCRIPT + over^ start_ARG roman_ end_ARG start_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT italic_r italic_f italic_n end_POSTSUBSCRIPT end_POSTSUBSCRIPT ( italic_i ) )  in the input parameters  (  c  o  p  t ,  c ) subscript  c o p t subscript  c (\\theta_{copt},\\beta_{c}) ( italic_ start_POSTSUBSCRIPT italic_c italic_o italic_p italic_t end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT )  to the the GaussianAvatar model to obtain the final refined riders 3D body in 3DGS format given a selected RenderPeople person (see Fig.  1 ). Finally, we assemble (in canonical pose) the complete 3D cyclist by concatenating the 3D Gaussians from the re-posed 3D bicycle together with the  refined  re-posed riders body, and apply the global 3D location and rotation  H g subscript H g H_{g} italic_H start_POSTSUBSCRIPT italic_g end_POSTSUBSCRIPT  estimated by CLIFF. We are now ready to render the controllable 3D cyclist at a desired 8-DoF pose and camera view, given a selected video frame. The composition mechanism enables us to select different rider-bike combinations: There are  482 482 482 482  riders from RenderPeople, and  23 23 23 23  3D bicycles from 3DArticBikes, which gives us  11 , 086 11 086 11,086 11 , 086  possible rider-bicycle combinations to generate different 3D cyclists. From this point on, we refer to our generated 3D cyclists as  3DArticCyclists ."
        ]
    },
    "id_table_2": {
        "caption": "TABLE II:  Data Augmentation Experiment With Mask2Former Semantic Segmentation Model.",
        "table": "S5.E2",
        "footnotes": [],
        "references": [
            "3D Bicycle Data Pre-Processing (Curation).  We load each of the  23 23 23 23  selected 3D bicycle models in Blender v2.82   [ 37 ] , and apply the following pre-processing: 1) Remove non-bicycle objects, 2) Normalize the scale, 3) Translate and rotate the bicycles to a canonical 3D location/orientation standing up on the ground  X  Z X Z X-Z italic_X - italic_Z  plane, with the pedals axle centroid directly above the 3D origin, and the front wheel looking along the X-axis (see 3D coordinate system in Fig.  2 (a)). We articulate the originally-rigid bicycles by splitting the bicycle model (3D vertex groups   [ 37 ] ) into three separate parts: 1) Frame and rear wheel, 2) Pedals, and 3) Steering and front wheel (see Fig.  2 (a)).",
            "Articulated bicycle parts and 3D key points.  We introduced armature bones   [ 37 ]  to be able to rotate the steering and the pedals about their axes in Blender. We introduced bones for the following bicycle parts: 1) Seat (saddle), 2) Steering axle, 3) Left handle, 4) Right handle, 5) Pedals axle, 6) Left pedal, 7) Right pedal, 8) Front and rear wheel rotation axles, and 9) Ground/origin. We saved the 3D bone and 3D keypoints (see red markers in Fig.  2 (a)).",
            "360-Deg. Views Rendering in Blender.  We follow the RenderPeople dataset folder structure and format used in   [ 21 ]  to be able to train NeRF and 3DGS-based 3D reconstruction models with our new 3D bicycle parts datasets. We define a camera  P P P italic_P  at a canonical 3D pose with rotation matrix  R = I R I R=I italic_R = italic_I  and camera location  C = [ 0 , 0 ,  12 ] C 0 0 12 C=[0,0,-12] italic_C = [ 0 , 0 , - 12 ]  m, where  I I I italic_I  is the  3  3 3 3 3\\times 3 3  3  identity matrix. We adopt the same focal length  f  x = f  y = 2084.97 f x f y 2084.97 fx=fy=2084.97 italic_f italic_x = italic_f italic_y = 2084.97  used in   [ 21 ] . We then rotate the camera  P P P italic_P  around each of the three 3D bicycle parts at  36 36 36 36  discrete azimuth angular positions ( 36 36 36 36  camera views) with increments of 10 Deg., capturing a  512  512 512 512 512\\times 512 512  512  RGBA image, including a binary mask at each camera pose, and save them together with the 3D bones/Keypoints information, the intrinsic/extrinsic camera matrices, and the bicycle part 3D points - see Fig.  2 (a).",
            "We define the 8-DoF pose of a 3D bicycle as follows:  p  o  s  e 3  D = {  p ,  s ,  X ,  Y ,  Z , t X , t Y , t Z } p o s subscript e 3 D subscript  p subscript  s subscript  X subscript  Y subscript  Z subscript t X subscript t Y subscript t Z pose_{3D}=\\{\\theta_{p},\\theta_{s},\\theta_{X},\\theta_{Y},\\theta_{Z},t_{X},t_{Y}% ,t_{Z}\\} italic_p italic_o italic_s italic_e start_POSTSUBSCRIPT 3 italic_D end_POSTSUBSCRIPT = { italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_Y end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_t start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT , italic_t start_POSTSUBSCRIPT italic_Y end_POSTSUBSCRIPT , italic_t start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT } , where,   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  and   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  are the bicycle pedals axle and steering angles about their rotation shafts on the bicycle body frame,   X subscript  X \\theta_{X} italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT ,   Y subscript  Y \\theta_{Y} italic_ start_POSTSUBSCRIPT italic_Y end_POSTSUBSCRIPT , and   Z subscript  Z \\theta_{Z} italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT  are the bicycle body frame rotation angles about the worlds  X X X italic_X ,  Y Y Y italic_Y , and  Z Z Z italic_Z  3D axes respectively, and  ( t X (t_{X} ( italic_t start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT ,  t Y subscript t Y t_{Y} italic_t start_POSTSUBSCRIPT italic_Y end_POSTSUBSCRIPT ,  t Z ) t_{Z}) italic_t start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT )  define the bicycle body 3D translation from the 3D origin. Once a 3DGS model has been trained for each of the rigid bicycle parts, we designed a parametric 3D bicycle model (see Fig.  2 (b)) to rotate, in inference mode, the Gaussian attributes (3D points, rotations, scales, and spherical harmonics)   [ 17 ]  of both, the bicycle steering and pedals by the desired angles   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  and   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  using the  4  4 4 4 4\\times 4 4  4  SE(3) 3D rotation matrices  H s  (  s ) subscript H s subscript  s H_{s}(\\theta_{s}) italic_H start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ( italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT )  and  H p  (  p ) subscript H p subscript  p H_{p}(\\theta_{p}) italic_H start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT ( italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT )  respectively. We define  H s  (  s ) subscript H s subscript  s H_{s}(\\theta_{s}) italic_H start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ( italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT )  as:",
            "where  v p subscript v p v_{p} italic_v start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  is the 3D location of the pedal shaft centroid,  H p  c  S  E  ( 3 ) subscript H p c S E 3 H_{pc}\\in SE(3) italic_H start_POSTSUBSCRIPT italic_p italic_c end_POSTSUBSCRIPT  italic_S italic_E ( 3 )  translates 3D points to the origin, and  H p  z  S  E  ( 3 ) subscript H p z S E 3 H_{pz}\\in SE(3) italic_H start_POSTSUBSCRIPT italic_p italic_z end_POSTSUBSCRIPT  italic_S italic_E ( 3 )  rotates 3D points about the  Z Z Z italic_Z  3D axis by   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT . We also apply the same transformations to the bicycle 3D Keypoints, since these will be used in the refinement of the riders body pose at a later stage in our pipeline. We then assemble/compose a complete re-posed 3DGS bicycle by concatenating the reposed 3DGS parts with the bicycle frame. Fig.  2 (b) shows an example of steering and pedal angle manipulation in Gaussian space for   s = 90  D  e  g subscript  s 90 D e g \\theta_{s}=90Deg italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT = 90 italic_D italic_e italic_g  and   p = 90  D  e  g subscript  p 90 D e g \\theta_{p}=90Deg italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT = 90 italic_D italic_e italic_g ."
        ]
    },
    "id_table_3": {
        "caption": "",
        "table": "S5.E3",
        "footnotes": [],
        "references": [
            "The bicycle pose parameters   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ,   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT , and  H g subscript H g H_{g} italic_H start_POSTSUBSCRIPT italic_g end_POSTSUBSCRIPT  can be set: 1) Manually or programmatically. For example, in Fig.  1  (bottom) the values of   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT , and   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  are being varied linearly from   90 90 -90 - 90  to  90 90 90 90  Deg (steering), and from   180 180 -180 - 180  to  180 180 180 180  Deg (pedals). 2)   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  and   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  can be derived using geometry from the riders wrists and ankle joints estimated by CLIFF, and 3) A 3D bicycle pose estimation model can be designed to estimate them directly from the input image, which is out of the scope of this paper. For cyclist animation from videos we derive the values of   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ,   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT , and  H g subscript H g H_{g} italic_H start_POSTSUBSCRIPT italic_g end_POSTSUBSCRIPT  from the estimated riders pose provided by CLIFF as explained next. We rotate the riders body 3D joints to canonical bicycle pose. We then use simple geometry and the orthographic projections of the ankle 3D keypoints onto the  X  Y X Y X-Y italic_X - italic_Y  plane to derive   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  (see Fig.  3 ). Similarly, we use the mid-point along a line that crosses through the projections of the wrists onto the  X  Z X Z X-Z italic_X - italic_Z  plane to derive   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ."
        ]
    },
    "id_table_4": {
        "caption": "",
        "table": "S5.E4",
        "footnotes": [],
        "references": [
            "Controlling   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  and   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  Manually, with Different Rider/Bicycle Combinations  We demonstrate the versatility of our 3DArticCyclist pipeline by generating articulated cyclists of different rider-bicycle combinations with two manually-set values of the pedal and steering angles   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  and   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT . Fig.  4  (a) shows four different riders on different 3DArticBike bicycles under two camera views:  0 0  and  90 90 90 90  Deg. with two angular values for   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  and   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT . Fig.  4  (c): We tested the generalization of our pipeline by placing riders on 3D scooters and motorcycles downloaded from   [ 42 ] . Scooters and motorcycles are easier to process than bicycles due to removal of the pedal rotation   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  degree of freedom.",
            "Controlling   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  and   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  Using the Dynamics From a Cyclist Video  We generated  200 200 200 200 -frame sequences of animated 3D riders on bicycles from our 3DArticBike dataset. We used the dynamic information from three publicly-available YouTube videos: Riding on Rollers   [ 43 ] , Flying By Traffic   [ 44 ] , and Beijing Commute   [ 45 ] . In this setting we derive the pedal and steering angles   p subscript  p \\theta_{p} italic_ start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  and   s subscript  s \\theta_{s} italic_ start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  from the re-posed rider body as explained in Section  V-C . We compare our method against Zero-1-to-3   [ 16 ]  which is a generative method based on stable-diffusion capable of manipulating the camera view and reconstructing 3D objects given an input image. Fig.  4  (d) shows generated cyclists from both our method and Zero-1-to-3. Note that Zero-1-to-3 attempts to reconstruct and preserve the appearance from the input image cyclist. However, any change of camera (or cyclist) pose results in large 3D cyclist shape and appearance distortions. Our method does not attempt to reconstruct/preserve appearance, but it focuses on preserving the pose of the rider from the input image while generating a 3D bicycle 8-DoF pose that is consistent with the riders pose, hence generating higher-quality practical/usable animatable 3D cyclists.",
            "Perceptual Quality Scores.  We follow the evaluation methodology presented by recent human-scene interaction methods   [ 9 ] ,   [ 46 ]  for the case when no ground-truth is available to evaluate the accuracy of their generated scenes. In our method, the generated 3D cyclists do not have 3D ground-truth either, because: 1) The riders pose is an estimated quantity (CLIFF), and 2) Because our method alters (refines) the CLIFF riders pose to follow the 3D Keypoints form our 3D bicycles with shapes and appearances that do not match those from the input image. Therefore, we follow PHYSCENE   [ 9 ] , and compute the Frechet Inception Distance (FID)   [ 47 ] , and Kernel Inception Distance (KID)   [ 48 ]  perceptual scores, which are based on a distance between features from real and generated images, where a low score is desirable. We used the same videos from Section  VI-A  to generate animated 3D Cyclists using our method, and rendered images for four camera azimuth views:  0 0 ,  90 90 90 90 ,  180 180 180 180 , and   90 90 -90 - 90  Deg. For each video we generated  800 800 800 800  output images. We followed a similar procedure to process the same three image sequences using Zero-1-to-3 to generate an output image for each of the four camera views. To compare features against real, natural images, we extracted cyclist images from two publicly-available datasets: 1) Waymo   [ 49 ] , and 2) COCO  2017 2017 2017 2017    [ 50 ]  from which we selected images of non-truncated cyclists with a bounding box max. dimension greater than 60 pixels, and centered/padded/rescaled the sub-images to have the same dimensions as ours and Zero-1-to-3. We show examples of the Waymo and COCO images in Fig.  4  (e). Table  I  shows the results. Note that the magnitude of the FID and KID metrics seem relatively high compared to those from PHYSCENE. We believe that this happens because we are comparing features between real and synthesized images, and because PHYSCENE uses a scaling factor of  0.001 0.001 0.001 0.001 . Nevertheless, our FID/KID numbers are lower than those from Zero-1-to-3, which is consistent with the results observed in Fig.  4  (d).",
            "Fig.  4  (b) shows the typical failures that we observe in our generation pipeline, which are: 1) Extreme riders back position due to the seat being set too high for some of the riders, 2) Some riders feet cannot reach the pedals, 3) The riders some times are not properly seated on the saddle. The appearance diversity is limited to the available 3D riders and 3D bicycle models. We have assumed that both riders hands are on their corresponding bicycle handles, and that both riders feet are on their corresponding bicycle pedals. This assumption can be easily broken. Currently, our parametric bicycle model ignores the individual pedal rotations and the the wheel rotations. In this paper we used the basic SMPL model. To improve the expressiveness of the riders pose, the SMPL-X model could be used instead."
        ]
    },
    "id_table_5": {
        "caption": "",
        "table": "S5.E5",
        "footnotes": [],
        "references": [
            "which encourages the 3D spatial aligment of the human body 3D Keypoints  x L  w  r  i  s  t subscript x L w r i s t x_{Lwrist} italic_x start_POSTSUBSCRIPT italic_L italic_w italic_r italic_i italic_s italic_t end_POSTSUBSCRIPT ,  x R  w  r  i  s  t subscript x R w r i s t x_{Rwrist} italic_x start_POSTSUBSCRIPT italic_R italic_w italic_r italic_i italic_s italic_t end_POSTSUBSCRIPT ,  x p  e  l  v  i  s subscript x p e l v i s x_{pelvis} italic_x start_POSTSUBSCRIPT italic_p italic_e italic_l italic_v italic_i italic_s end_POSTSUBSCRIPT ,  x L  a  n  k subscript x L a n k x_{Lank} italic_x start_POSTSUBSCRIPT italic_L italic_a italic_n italic_k end_POSTSUBSCRIPT ,  x R  a  n  k subscript x R a n k x_{Rank} italic_x start_POSTSUBSCRIPT italic_R italic_a italic_n italic_k end_POSTSUBSCRIPT  to the bicycle 3D Keypoints  x L  h  a  n  d  l  e subscript x L h a n d l e x_{Lhandle} italic_x start_POSTSUBSCRIPT italic_L italic_h italic_a italic_n italic_d italic_l italic_e end_POSTSUBSCRIPT ,  x R  h  a  n  d  l  e subscript x R h a n d l e x_{Rhandle} italic_x start_POSTSUBSCRIPT italic_R italic_h italic_a italic_n italic_d italic_l italic_e end_POSTSUBSCRIPT ,  x s  e  a  t subscript x s e a t x_{seat} italic_x start_POSTSUBSCRIPT italic_s italic_e italic_a italic_t end_POSTSUBSCRIPT ,  x L  p  e  d subscript x L p e d x_{Lped} italic_x start_POSTSUBSCRIPT italic_L italic_p italic_e italic_d end_POSTSUBSCRIPT ,  x R  p  e  d subscript x R p e d x_{Rped} italic_x start_POSTSUBSCRIPT italic_R italic_p italic_e italic_d end_POSTSUBSCRIPT  respectively. In summary, the optimization process places the riders hands, ankles and pelvis near the bicycle handles, pedals, and seat respectively. We use the Adam optimizer with LR= 0.05 0.05 0.05 0.05 , and we set (experimentally) the number of iterations to  50 50 50 50 . We select the   ^  r  f  n  ( i ) subscript ^  subscript  r f n i \\hat{\\Delta}_{\\theta_{rfn}}(i) over^ start_ARG roman_ end_ARG start_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT italic_r italic_f italic_n end_POSTSUBSCRIPT end_POSTSUBSCRIPT ( italic_i )  deltas that minimize Eqn. ( 5 ). Once the optimization procedure ends, we use the refined riders body pose   c  o  p  t =  c f  i  x  e  d  (  c r  f  n +  ^  r  f  n  ( i ) ) subscript  c o p t subscript  subscript c f i x e d subscript  subscript c r f n subscript ^  subscript  r f n i \\theta_{copt}=\\theta_{c_{fixed}}\\cup(\\theta_{c_{rfn}}+\\hat{\\Delta}_{\\theta_{% rfn}}(i)) italic_ start_POSTSUBSCRIPT italic_c italic_o italic_p italic_t end_POSTSUBSCRIPT = italic_ start_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT italic_f italic_i italic_x italic_e italic_d end_POSTSUBSCRIPT end_POSTSUBSCRIPT  ( italic_ start_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT italic_r italic_f italic_n end_POSTSUBSCRIPT end_POSTSUBSCRIPT + over^ start_ARG roman_ end_ARG start_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT italic_r italic_f italic_n end_POSTSUBSCRIPT end_POSTSUBSCRIPT ( italic_i ) )  in the input parameters  (  c  o  p  t ,  c ) subscript  c o p t subscript  c (\\theta_{copt},\\beta_{c}) ( italic_ start_POSTSUBSCRIPT italic_c italic_o italic_p italic_t end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT )  to the the GaussianAvatar model to obtain the final refined riders 3D body in 3DGS format given a selected RenderPeople person (see Fig.  1 ). Finally, we assemble (in canonical pose) the complete 3D cyclist by concatenating the 3D Gaussians from the re-posed 3D bicycle together with the  refined  re-posed riders body, and apply the global 3D location and rotation  H g subscript H g H_{g} italic_H start_POSTSUBSCRIPT italic_g end_POSTSUBSCRIPT  estimated by CLIFF. We are now ready to render the controllable 3D cyclist at a desired 8-DoF pose and camera view, given a selected video frame. The composition mechanism enables us to select different rider-bike combinations: There are  482 482 482 482  riders from RenderPeople, and  23 23 23 23  3D bicycles from 3DArticBikes, which gives us  11 , 086 11 086 11,086 11 , 086  possible rider-bicycle combinations to generate different 3D cyclists. From this point on, we refer to our generated 3D cyclists as  3DArticCyclists .",
            "Fig.  5  shows the results of running the pose refinement on a fixed rider-bicycle combination for different numbers of iterations. The plot shows why we chose to use  50 50 50 50  as the maximum number of iterations. The average run times to generate a 3D cyclist (excluding loading/saving data from/to files) are: 1) The reposing and assembling 3D Bicycles (without a rider) takes 0.32 Sec., 2) Each iteration of riders body refinement (IK) takes 0.86 Sec. We use a maximum of 50 iterations. 3) The final riders body reposing using GaussianAvatar, plus assembling the final outputted 3D cyclist (rider on the bicycle) takes 1.74 Sec."
        ]
    },
    "id_table_6": {
        "caption": "",
        "table": "S6.T1.4",
        "footnotes": [
            ""
        ],
        "references": []
    },
    "id_table_7": {
        "caption": "",
        "table": "S6.T2.1",
        "footnotes": [
            ""
        ],
        "references": []
    }
}