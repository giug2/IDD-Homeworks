{
    "id_table_1": {
        "caption": "Compiler Optimization Flags and Version Details.",
        "table": [
            [
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column ltx_border_r ltx_border_tt\" id=\"S4.T1.1.1.1.1\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.1.1.1.1\" style=\"font-size:70%;\">\n         Compiler\n        </span>\n       </th>\n       \n",
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column ltx_border_r ltx_border_tt\" id=\"S4.T1.1.1.1.2\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.1.1.2.1\" style=\"font-size:70%;\">\n         Version\n        </span>\n       </th>\n       \n",
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column ltx_border_r ltx_border_tt\" id=\"S4.T1.1.1.1.3\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.1.1.3.1\" style=\"font-size:70%;\">\n         Unvectorized\n        </span>\n       </th>\n       \n",
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column ltx_border_tt\" id=\"S4.T1.1.1.1.4\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.1.1.4.1\" style=\"font-size:70%;\">\n         Vectorized\n        </span>\n       </th>\n      \n"
            ],
            [
                "<td class=\"ltx_td ltx_align_left ltx_border_r ltx_border_t\" id=\"S4.T1.1.2.1.1\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.2.1.1.1\" style=\"font-size:70%;\">\n         GCC\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left ltx_border_r ltx_border_t\" id=\"S4.T1.1.2.1.2\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.2.1.2.1\" style=\"font-size:70%;\">\n         10.5.0\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left ltx_border_r ltx_border_t\" id=\"S4.T1.1.2.1.3\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.2.1.3.1\" style=\"font-size:70%;\">\n         -O3 -mavx2 -lm\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left ltx_border_t\" id=\"S4.T1.1.2.1.4\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.2.1.4.1\" style=\"font-size:70%;\">\n         -W -O3 -mavx2 -lm -ftree-vectorizer-verbose=3\n        </span>\n       </td>\n      \n"
            ],
            [
                "<td class=\"ltx_td ltx_border_r\" id=\"S4.T1.1.3.2.1\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_border_r\" id=\"S4.T1.1.3.2.2\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_border_r\" id=\"S4.T1.1.3.2.3\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left\" id=\"S4.T1.1.3.2.4\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.3.2.4.1\" style=\"font-size:70%;\">\n         -ftree-vectorize -fopt-info-vec-optimized\n        </span>\n       </td>\n      \n"
            ],
            [
                "<td class=\"ltx_td ltx_align_left ltx_border_r\" id=\"S4.T1.1.4.3.1\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.4.3.1.1\" style=\"font-size:70%;\">\n         Clang\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left ltx_border_r\" id=\"S4.T1.1.4.3.2\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.4.3.2.1\" style=\"font-size:70%;\">\n         19.0.0\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left ltx_border_r\" id=\"S4.T1.1.4.3.3\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.4.3.3.1\" style=\"font-size:70%;\">\n         -O3 -mavx2 -lm -fno-tree-vectorize\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left\" id=\"S4.T1.1.4.3.4\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.4.3.4.1\" style=\"font-size:70%;\">\n         -O3 -mavx2 -fstrict-aliasing -fvectorize\n        </span>\n       </td>\n      \n"
            ],
            [
                "<td class=\"ltx_td ltx_border_r\" id=\"S4.T1.1.5.4.1\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_border_r\" id=\"S4.T1.1.5.4.2\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_border_r\" id=\"S4.T1.1.5.4.3\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left\" id=\"S4.T1.1.5.4.4\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.5.4.4.1\" style=\"font-size:70%;\">\n         -fslp-vectorize-aggressive -Rpass-analysis=loop-vectorize -lm\n        </span>\n       </td>\n      \n"
            ],
            [
                "<td class=\"ltx_td ltx_align_left ltx_border_bb ltx_border_r\" id=\"S4.T1.1.6.5.1\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.6.5.1.1\" style=\"font-size:70%;\">\n         ICC\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left ltx_border_bb ltx_border_r\" id=\"S4.T1.1.6.5.2\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.6.5.2.1\" style=\"font-size:70%;\">\n         2021.10.0\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left ltx_border_bb ltx_border_r\" id=\"S4.T1.1.6.5.3\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.6.5.3.1\" style=\"font-size:70%;\">\n         -restrict -std=c99 -O3 -ip -no-vec\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_left ltx_border_bb\" id=\"S4.T1.1.6.5.4\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        <span class=\"ltx_text\" id=\"S4.T1.1.6.5.4.1\" style=\"font-size:70%;\">\n         -restrict -std=c99 -O3 -ip -vec -xAVX2\n        </span>\n       </td>\n      \n"
            ]
        ],
        "footnotes": [],
        "references": [
            "The           LLM-Vectorizer          tool presented in this paper uses GPT-4 model at its coreto generate vectorized code. We do not make any fine-tuning adjustments to themodel and use it as it is. We configure GPT-4 model with a temperature set to           1.0          to enable more diversity and creativity in the responses. The API versionis set to           2023-08-01-preview          .For performance evaluation of LLM-generated vectorized code against state-of-the-artcompilers, we use           GCC-10.5.0, Clang-19.0.0, ICC-2021.10.0          compilers. The details ofthe compiler flags to compile unvectorized and vectorized programs are listed inTable                  1                .We run performance experiments on an eight-core           Intel i7-8650U          CPU with           16GiB          RAM and           AVX2          target."
        ]
    },
    "id_table_2": {
        "caption": "Evaluation of vectorized code using Checksum-based testing.",
        "table": [
            [
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column ltx_border_tt\" id=\"S4.T2.1.1.1.1\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        Parameters\n       </th>\n       \n",
                "<th class=\"ltx_td ltx_align_right ltx_th ltx_th_column ltx_border_tt\" id=\"S4.T2.1.1.1.2\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        k=1\n       </th>\n       \n",
                "<th class=\"ltx_td ltx_align_right ltx_th ltx_th_column ltx_border_tt\" id=\"S4.T2.1.1.1.3\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        k=10\n       </th>\n       \n",
                "<th class=\"ltx_td ltx_align_right ltx_th ltx_th_column ltx_border_tt\" id=\"S4.T2.1.1.1.4\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        k=100\n       </th>\n      \n"
            ],
            [
                "<td class=\"ltx_td ltx_align_left ltx_border_t\" id=\"S4.T2.1.2.1.1\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        Plausible\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_t\" id=\"S4.T2.1.2.1.2\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        72\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_t\" id=\"S4.T2.1.2.1.3\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        107\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_t\" id=\"S4.T2.1.2.1.4\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        125\n       </td>\n      \n"
            ],
            [
                "<td class=\"ltx_td ltx_align_left\" id=\"S4.T2.1.3.2.1\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        Not equivalent\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T2.1.3.2.2\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        62\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T2.1.3.2.3\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        40\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T2.1.3.2.4\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        24\n       </td>\n      \n"
            ],
            [
                "<td class=\"ltx_td ltx_align_left ltx_border_bb\" id=\"S4.T2.1.4.3.1\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        Cannot compile\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_bb\" id=\"S4.T2.1.4.3.2\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        15\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_bb\" id=\"S4.T2.1.4.3.3\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        2\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_bb\" id=\"S4.T2.1.4.3.4\" style=\"padding-left:3.0pt;padding-right:3.0pt;\">\n        0\n       </td>\n      \n"
            ]
        ],
        "footnotes": [],
        "references": [
            "We conducted an experiment to evaluate the correctness of vectorized C functions generated by LLM. The results of this experiment are summarized in Table                     2                   .We ran this experiment for                              149                                   149                                  149                           tests from the TSVC benchmark for varying number of code completions.The column labeled                                        k                            =                            1                                                                           𝑘                               1                                            k=1                           represent one code completion. In other words,we prompt LLM to generate one output(vectorized program) for eachinput (scalar) program. We find that                              72                                   72                                  72                           tests are plausible.To explore further, we increase the number ofcode completions to                              10                                   10                                  10                           and we find that                              107                                   107                                  107                           test programs contain at least one plausible solution. To clarify, we consider a testequivalent if we identify at least one pair ofunvectorized and vectorized functions with matchingchecksum results.However, if all ten vectorized functionsgenerated by GPT-4 fail to be equivalent to the unvectorizedfunction using Checksum-based testing (including cases where any compilation errors occur), we classifythe test as not equivalent.If all the candidate solutions for an example fail the compiler, then we mark them under “Cannot compile” row.The                                        k                            =                            10                                                                           𝑘                               10                                            k=10                           column inTable                     2                   indicates that                              107                                   107                                  107                           tests contain at least one plausible solution.In order to reduce the number of inequivalent testsin a given dataset of                              149                                   149                                  149                           test programs, we continue to increase thenumber of code completions to                              100                                   100                                  100                           . We found that                              125                                   125                                  125                           testshave at least one plausible vectorized program as per the checksum-based testing criterion.",
            "In our study, using the checksum-based testing criterion of equivalence, we identified                              72                                   72                                  72                           plausible tests when generating only code completions, as detailed in Table                     2                   .Notably, we discovered                              24                                   24                                  24                           new tests that were previously unsuccessful with a single code completion but are now successfully generated using multiple agents FSM. Consequently, the total number of plausible tests increased to                              96                                   96                                  96                           when considering just one LLM invocation, compared to the initial                              72                                   72                                  72                           tests. Furthermore, despite generating                              100                                   100                                  100                           code completions, we encountered four test programs that did not have a plausible vectorization previously but now have a plausible vectorization with just a single code completion in multi-agents design. These findings suggest that the design involving multiple agents along with auxiliary tools holds promise for reducing the number of LLM calls and improving the quality of the generation."
        ]
    },
    "id_table_3": {
        "caption": "Evaluation of Vectorized code using equivalence checking techniques. ”Total” is total number of test programs, ”Equiv”, ”Not Equiv” and ”Inconcl” refer to,andrespectively.",
        "table": [
            [
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column ltx_th_row ltx_border_tt\" id=\"S4.T3.7.1.1.1\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.1.1.1.1\" style=\"font-size:90%;\">\n         Techniques\n        </span>\n       </th>\n       \n",
                "<th class=\"ltx_td ltx_align_right ltx_th ltx_th_column ltx_border_tt\" id=\"S4.T3.7.1.1.2\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.1.1.2.1\" style=\"font-size:90%;\">\n         Total\n        </span>\n       </th>\n       \n",
                "<th class=\"ltx_td ltx_align_right ltx_th ltx_th_column ltx_border_tt\" id=\"S4.T3.7.1.1.3\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.1.1.3.1\" style=\"font-size:90%;\">\n         Equiv\n        </span>\n       </th>\n       \n",
                "<th class=\"ltx_td ltx_align_right ltx_th ltx_th_column ltx_border_tt\" id=\"S4.T3.7.1.1.4\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.1.1.4.1\" style=\"font-size:90%;\">\n         Not Equiv\n        </span>\n       </th>\n       \n",
                "<th class=\"ltx_td ltx_align_right ltx_th ltx_th_column ltx_border_tt\" id=\"S4.T3.7.1.1.5\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.1.1.5.1\" style=\"font-size:90%;\">\n         Inconcl\n        </span>\n       </th>\n      \n"
            ],
            [
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_row ltx_border_t\" id=\"S4.T3.7.2.1.1\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.2.1.1.1\" style=\"font-size:90%;\">\n         Checksum\n        </span>\n       </th>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_t\" id=\"S4.T3.7.2.1.2\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.2.1.2.1\" style=\"font-size:90%;\">\n         149\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_t\" id=\"S4.T3.7.2.1.3\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.2.1.3.1\" style=\"font-size:90%;\">\n         0\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_t\" id=\"S4.T3.7.2.1.4\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.2.1.4.1\" style=\"font-size:90%;\">\n         24\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_t\" id=\"S4.T3.7.2.1.5\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.2.1.5.1\" style=\"font-size:90%;\">\n         125\n        </span>\n       </td>\n      \n"
            ],
            [
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_row\" id=\"S4.T3.7.3.2.1\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.3.2.1.1\" style=\"font-size:90%;\">\n         Alive2\n        </span>\n       </th>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.3.2.2\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.3.2.2.1\" style=\"font-size:90%;\">\n         125\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.3.2.3\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.3.2.3.1\" style=\"font-size:90%;\">\n         26\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.3.2.4\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.3.2.4.1\" style=\"font-size:90%;\">\n         17\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.3.2.5\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.3.2.5.1\" style=\"font-size:90%;\">\n         82\n        </span>\n       </td>\n      \n"
            ],
            [
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_row\" id=\"S4.T3.7.4.3.1\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.4.3.1.1\" style=\"font-size:90%;\">\n         C-Unroll\n        </span>\n       </th>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.4.3.2\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.4.3.2.1\" style=\"font-size:90%;\">\n         82\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.4.3.3\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.4.3.3.1\" style=\"font-size:90%;\">\n         28\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.4.3.4\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.4.3.4.1\" style=\"font-size:90%;\">\n         18\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.4.3.5\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.4.3.5.1\" style=\"font-size:90%;\">\n         36\n        </span>\n       </td>\n      \n"
            ],
            [
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_row\" id=\"S4.T3.7.5.4.1\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.5.4.1.1\" style=\"font-size:90%;\">\n         Splitting\n        </span>\n       </th>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.5.4.2\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.5.4.2.1\" style=\"font-size:90%;\">\n         36\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.5.4.3\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.5.4.3.1\" style=\"font-size:90%;\">\n         3\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.5.4.4\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.5.4.4.1\" style=\"font-size:90%;\">\n         2\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right\" id=\"S4.T3.7.5.4.5\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.5.4.5.1\" style=\"font-size:90%;\">\n         31\n        </span>\n       </td>\n      \n"
            ],
            [
                "<th class=\"ltx_td ltx_align_left ltx_th ltx_th_row ltx_border_bb ltx_border_t\" id=\"S4.T3.7.6.5.1\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.6.5.1.1\" style=\"font-size:90%;\">\n         All\n        </span>\n       </th>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_bb ltx_border_t\" id=\"S4.T3.7.6.5.2\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.6.5.2.1\" style=\"font-size:90%;\">\n         149\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_bb ltx_border_t\" id=\"S4.T3.7.6.5.3\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.6.5.3.1\" style=\"font-size:90%;\">\n         57\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_bb ltx_border_t\" id=\"S4.T3.7.6.5.4\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.6.5.4.1\" style=\"font-size:90%;\">\n         61\n        </span>\n       </td>\n       \n",
                "<td class=\"ltx_td ltx_align_right ltx_border_bb ltx_border_t\" id=\"S4.T3.7.6.5.5\">\n        <span class=\"ltx_text\" id=\"S4.T3.7.6.5.5.1\" style=\"font-size:90%;\">\n         31\n        </span>\n       </td>\n      \n"
            ]
        ],
        "footnotes": [],
        "references": [
            "Table                  3                presents a summary of the results from various equivalence checking methodologies. The symbolic verification employing the out-of-the-box Alive2 unroll technique, described as           checkWithAlive2Unroll          in Section                  3.1                , proves the correctness of vectorization for                          26                               26                              26                       tests, leaving                          82                               82                              82                       tests inconclusive due to multiple factors such as timeouts, out of memory, and unrecognized AVX2 intrinsics not yet encoded in Alive2."
        ]
    }
}