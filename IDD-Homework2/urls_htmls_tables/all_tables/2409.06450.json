{
    "id_table_1": {
        "caption": "TABLE I:  Conformity of command",
        "table": "S4.T1.1",
        "footnotes": [],
        "references": [
            "To address these challenges and fully harness the inherent intelligent capabilities of LLMs, we introduced OmniTester as shown in Fig. 1 , which proposes a fully automated pipeline that responds to user requests, effectively generating the desired scenarios to test the targeted functionality of autonomous vehicles. OmniTester generates realistic and diverse scenarios containing road geometries that closely mimic real-world environments through prompt engineering and the integration of tools from Simulation of Urban Mobility(SUMO), an open-source traffic simulation package  [ 11 ] . Meanwhile, OmniTester uses self-improvement mechanisms designed to continuously enhance LLM performance, reducing hallucination and inherent errors. It also uses a Retrieval-Augmented Generation (RAG)-based generation mechanism  [ 12 ]  that automatically queries and extracts external knowledge to adapt to the operational design domain requirements. To the best of our knowledge, OmniTester is the first system to generate road structures and vehicles solely based on user requests, offering exceptional controllability and flexibility, powered by RAG and self-improvement techniques.",
            "Prompts are crucial in enhancing the reasoning and generation capabilities of LLMs. Fig. 10  demonstrate the prompts used in the Net Generator and Vehicle Generator of OmniTester. Each prompt includes several parts: a summary of the generation task, the steps guiding the generation process, and the desired format of the output. For the Net generator, the prompt additionally includes several road constraints to ensure the generated node and edge files are well-defined XML format. For Vehicle Generator, the prompt includes explanations for challenging situations."
        ]
    },
    "id_table_2": {
        "caption": "TABLE II:  Diversityof generated scenarios",
        "table": "S4.T2.12",
        "footnotes": [],
        "references": [
            "The generation framework is illustrated in Fig.  2 . The process of creating a set of scenarios starts when the user submits specific testing requests, such as Generate 5 scenarios with a fork. Then an LLM is invoked to elaborate on the scenario details through descriptive means, such as the main road splits into two at a slight angle..  for the 5 scenarios requested. Once the scenario descriptions are complete, a Net Generator, powered by the LLM, constructs a corresponding road network to match the outlined scenarios. After the road network is successfully generated, another LLM agent is used to configure the vehicle dynamics involved in the scenarios.",
            "As illustrated in Fig. 2 , the text description is generated using a VLM-based summarizer. Powered by VLMs vision and spatial reasoning capabilities, layout information can be extracted from the picture. The node and edge files offer detailed information about the road structure, including length, number of lanes, and the shape of each curved edge. With this abundant information, the summarizer intelligently selects key features based on knowledge from the open world and hints injected from the prompt. It then summarizes all the important information into the final description, which contains the general layout, main segment locations, moving directions, connectivity, and even detailed descriptions of curve shapes. Fig. 7  contains an example illustrating how the retrieved examples description guided the generation of freeway off-ramp road structures. As shown, it describes a freeway off-ramp comprising three segments, covering the main freeway road and the trunk for exiting the freeway. Besides detailing the layout, segments, and number of lanes for each edge, it provides a thorough description of the curve shape. Using this example in the prompt, the Interpreter can generate a similar description for the Net Generator, preserving the detailed curve information. The final generated network shares a similar shape to the provided example, especially the curvature of the offramp."
        ]
    },
    "id_table_3": {
        "caption": "TABLE III:  Challenges posed by LLM based vehicle generator for fork scenario",
        "table": "S4.T3.10",
        "footnotes": [],
        "references": [
            "We decompose scenario generation into two stages: road network generation and agents routes generation. Road structure is important since testing on accurate and varied road structures ensures that AVs comply with road safety regulations and can respond appropriately to diverse road conditions. In our implementation for road generation, a properly prompted LLM-based Interpreter is employed to generate a detailed description for the whole scenario, then SUMO compatible Node and Edge file defined in XML format is generated based on the description.. Lastly, SUMO tool is utilized to convert them into single net file defined in XML format, representing the entire road network. See Fig.  3  for an illustration and more detailed examples in Section  IV . This design is not confined to SUMO or its XML formats. Since road network naturally represents a graph structure, it can be represented by other structured languages  [ 37 ]  and processed by graph tools  [ 38 ] , compatible to other simulators such as MATSim  [ 39 ] .",
            "Controllable scenario generation requires high conformality to user requests and realistic outputs. In our experiments, we observed that with proper prompting, the LLM demonstrates strong intelligence and high performance in this task. One detailed example of a generated road network, along with comprehensive descriptions provided by the interpreter, can be seen in Fig. 3 . The interpreter successfully produces detailed descriptions, including the intersection type (T-shape), road layout, and number of lanes for each direction, as well as the road name and traffic conditions for the roads. Based on this description, Net Generator intelligently places nodes to match the details, and generates edges defined on top of these nodes with lanes and connections that align with the description. As illustrated, it not only connects the nodes correctly to create a layout that matches the description but also generates comments describing the edges direction and corresponding names for human readability."
        ]
    },
    "id_table_4": {
        "caption": "TABLE IV:  Ablation study: Change of success rate",
        "table": "S4.T4.1",
        "footnotes": [],
        "references": [
            "An additional LLM is used to efficiently correct unreachable routes initially generated by the vehicle generator. Through joint debugging with the Network Conversion tool netconvert  [ 42 ] , the error messages provided by netconvert offer detailed instructions on what went wrong and what can be corrected. Based on the detailed feedback, the LLM-based generator updates the trips generated for vehicles. See Fig. 4  for the detailed pipeline applied. With the help of this self-improvement mechanism, all the routes can be configured successfully."
        ]
    },
    "global_footnotes": []
}