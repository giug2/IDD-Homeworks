{
    "S3.T1": {
        "caption": "Table 1. Scalar Hashtable Lookup Performance(Mops)",
        "table": "<table class=\"ltx_tabular ltx_centering ltx_guessed_headers ltx_align_middle\" id=\"S3.T1.2\">\n<thead class=\"ltx_thead\">\n<tr class=\"ltx_tr\" id=\"S3.T1.2.1.1\">\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column ltx_th_row ltx_border_tt\" id=\"S3.T1.2.1.1.1\" rowspan=\"2\"><span class=\"ltx_text\" id=\"S3.T1.2.1.1.1.1\">Hashtable</span></th>\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column ltx_border_tt\" colspan=\"5\" id=\"S3.T1.2.1.1.2\">Dataset size</th>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T1.2.2.2\">\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column\" id=\"S3.T1.2.2.2.1\">256KB</th>\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column\" id=\"S3.T1.2.2.2.2\">2MB</th>\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column\" id=\"S3.T1.2.2.2.3\">16MB</th>\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column\" id=\"S3.T1.2.2.2.4\">256MB</th>\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_column\" id=\"S3.T1.2.2.2.5\">16GB</th>\n</tr>\n</thead>\n<tbody class=\"ltx_tbody\">\n<tr class=\"ltx_tr\" id=\"S3.T1.2.3.1\">\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_row ltx_border_t\" id=\"S3.T1.2.3.1.1\">Linear probing</th>\n<td class=\"ltx_td ltx_align_left ltx_border_t\" id=\"S3.T1.2.3.1.2\">38</td>\n<td class=\"ltx_td ltx_align_left ltx_border_t\" id=\"S3.T1.2.3.1.3\">29</td>\n<td class=\"ltx_td ltx_align_left ltx_border_t\" id=\"S3.T1.2.3.1.4\">22</td>\n<td class=\"ltx_td ltx_align_left ltx_border_t\" id=\"S3.T1.2.3.1.5\">12</td>\n<td class=\"ltx_td ltx_align_left ltx_border_t\" id=\"S3.T1.2.3.1.6\">11</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T1.2.4.2\">\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_row\" id=\"S3.T1.2.4.2.1\">ska::bytell_hash_map</th>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.4.2.2\">72</td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.4.2.3\">53</td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.4.2.4\">38</td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.4.2.5\">20</td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.4.2.6\">19</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T1.2.5.3\">\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_row\" id=\"S3.T1.2.5.3.1\">Coalesced hashing</th>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.5.3.2\">92</td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.5.3.3\">56</td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.5.3.4\">48</td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.5.3.5\">21</td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.5.3.6\">19</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T1.2.6.4\">\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_row\" id=\"S3.T1.2.6.4.1\"><span class=\"ltx_text ltx_font_bold\" id=\"S3.T1.2.6.4.1.1\">Neighborhash</span></th>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.6.4.2\"><span class=\"ltx_text ltx_font_bold\" id=\"S3.T1.2.6.4.2.1\">116</span></td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.6.4.3\"><span class=\"ltx_text ltx_font_bold\" id=\"S3.T1.2.6.4.3.1\">74</span></td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.6.4.4\"><span class=\"ltx_text ltx_font_bold\" id=\"S3.T1.2.6.4.4.1\">66</span></td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.6.4.5\"><span class=\"ltx_text ltx_font_bold\" id=\"S3.T1.2.6.4.5.1\">37</span></td>\n<td class=\"ltx_td ltx_align_left\" id=\"S3.T1.2.6.4.6\"><span class=\"ltx_text ltx_font_bold\" id=\"S3.T1.2.6.4.6.1\">36</span></td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T1.2.7.5\">\n<th class=\"ltx_td ltx_align_left ltx_th ltx_th_row ltx_border_bb\" id=\"S3.T1.2.7.5.1\">Random Access /</th>\n<td class=\"ltx_td ltx_align_left ltx_border_bb\" id=\"S3.T1.2.7.5.2\">/</td>\n<td class=\"ltx_td ltx_align_left ltx_border_bb\" id=\"S3.T1.2.7.5.3\">/</td>\n<td class=\"ltx_td ltx_align_left ltx_border_bb\" id=\"S3.T1.2.7.5.4\">/</td>\n<td class=\"ltx_td ltx_align_left ltx_border_bb\" id=\"S3.T1.2.7.5.5\">67</td>\n<td class=\"ltx_td ltx_align_left ltx_border_bb\" id=\"S3.T1.2.7.5.6\">67</td>\n</tr>\n</tbody>\n</table>\n\n",
        "footnotes": [],
        "references": [
            "we evaluate the scalar hash-tables. The hash-tables evaluated include Linear Probing, Coalesced hashing, ska::bytell_hash_map\u00a0<cite class=\"ltx_cite ltx_citemacro_citep\">(Skarupke, <a class=\"ltx_ref\" href=\"https://arxiv.org/html/2409.00400v1#bib.bib35\" title=\"\">2018</a>)</cite> and Neighborhash. We also introduce the previously mentioned random access in the comparison to understand the absolute level of query performance. The results are shown in \n(Skarupke, 2018) and Neighborhash. We also introduce the previously mentioned random access in the comparison to understand the absolute level of query performance. The results are shown in Table\u00a01. Due to the significant throughput of RA on datasets smaller than 256MB, it has been omitted from the table. As the dataset size increases, continuous cache misses lead to a sustained decline in throughput. In comparison to other implementations, NeighborHash consistently exhibits performance improvements across all scenarios. At a dataset size of 16GB, NeighborHash demonstrates over 50% higher query throughput compared to other implementations. In this test, the success query rate(SQR) was 90%, consistent with mainstream recommendation systems online. We also conducted tests under conditions of low hit rates(30%), and the results showed completely consistent trends."
        ]
    },
    "S3.T2": {
        "caption": "Table 2. NeighborHash, SQR=90%",
        "table": "<table class=\"ltx_tabular ltx_centering ltx_guessed_headers ltx_align_middle\" id=\"S3.T2.2\">\n<thead class=\"ltx_thead\">\n<tr class=\"ltx_tr\" id=\"S3.T2.2.1.1\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_th_row ltx_border_tt\" id=\"S3.T2.2.1.1.1\">Datasets</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_border_tt\" id=\"S3.T2.2.1.1.2\">LLC-LD</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_border_tt\" id=\"S3.T2.2.1.1.3\">LLC-MR</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_border_tt\" id=\"S3.T2.2.1.1.4\">MOPS</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_border_tt\" id=\"S3.T2.2.1.1.5\">BPL</th>\n</tr>\n</thead>\n<tbody class=\"ltx_tbody\">\n<tr class=\"ltx_tr\" id=\"S3.T2.2.2.1\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row ltx_border_t\" id=\"S3.T2.2.2.1.1\">256KB</th>\n<td class=\"ltx_td ltx_align_center ltx_border_t\" id=\"S3.T2.2.2.1.2\">0.004</td>\n<td class=\"ltx_td ltx_align_center ltx_border_t\" id=\"S3.T2.2.2.1.3\">25%</td>\n<td class=\"ltx_td ltx_align_center ltx_border_t\" id=\"S3.T2.2.2.1.4\">116</td>\n<td class=\"ltx_td ltx_align_center ltx_border_t\" id=\"S3.T2.2.2.1.5\">0.15</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T2.2.3.2\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row\" id=\"S3.T2.2.3.2.1\">2MB</th>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.3.2.2\">54</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.3.2.3\">0.01%</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.3.2.4\">74</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.3.2.5\">0.15</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T2.2.4.3\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row\" id=\"S3.T2.2.4.3.1\">16MB</th>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.4.3.2\">82</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.4.3.3\">3.58%</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.4.3.4\">66</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.4.3.5\">2.56</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T2.2.5.4\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row\" id=\"S3.T2.2.5.4.1\">32MB</th>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.5.4.2\">59</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.5.4.3\">33.98%</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.5.4.4\">48</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.5.4.5\">27.9</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T2.2.6.5\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row\" id=\"S3.T2.2.6.5.1\">256MB</th>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.6.5.2\">46.6</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.6.5.3\">90.9%</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.6.5.4\">37</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.6.5.5\">78.7</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T2.2.7.6\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row\" id=\"S3.T2.2.7.6.1\">2GB</th>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.7.6.2\">45.5</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.7.6.3\">98.6%</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.7.6.4\">37</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T2.2.7.6.5\">81.4</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T2.2.8.7\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row ltx_border_bb\" id=\"S3.T2.2.8.7.1\">16GB</th>\n<td class=\"ltx_td ltx_align_center ltx_border_bb\" id=\"S3.T2.2.8.7.2\">44.3</td>\n<td class=\"ltx_td ltx_align_center ltx_border_bb\" id=\"S3.T2.2.8.7.3\">99.2%</td>\n<td class=\"ltx_td ltx_align_center ltx_border_bb\" id=\"S3.T2.2.8.7.4\">39</td>\n<td class=\"ltx_td ltx_align_center ltx_border_bb\" id=\"S3.T2.2.8.7.5\">82.1</td>\n</tr>\n</tbody>\n</table>\n\n",
        "footnotes": [],
        "references": [
            "To analyze the impact of dataset size on hash-table performance, we conducted a detailed evaluation of NeighborHash, as presented in Table\u00a02. For dataset sizes less than 2MB, most memory loads can be accommodated by the L1 and L2 cache. At this point, the MOPS is more influenced by the number of instructions and their cycles. Starting from a size of 16MB, the LLC miss rate begins to rise, reaching about 34% at 32MB. Simultaneously, MOPS starts to decline, while Bytes-per-lookup increases. As the LLC miss rate increases, Bytes-per-lookup exhibits a rapid growth after 32MB (L2 cache size) and converges at a dataset size of 2GB, indicating that MOPS is almost entirely dominated by memory latency."
        ]
    },
    "S3.T3": {
        "caption": "Table 3. size=16GB, SQR=90%, LF=0.8, Ablation Analysis",
        "table": "<table class=\"ltx_tabular ltx_centering ltx_guessed_headers ltx_align_middle\" id=\"S3.T3.2\">\n<thead class=\"ltx_thead\">\n<tr class=\"ltx_tr\" id=\"S3.T3.2.1.1\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_th_row ltx_border_tt\" id=\"S3.T3.2.1.1.1\">Hashmap</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_th_row ltx_border_tt\" id=\"S3.T3.2.1.1.2\">MOPS</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_border_tt\" id=\"S3.T3.2.1.1.3\">MOPS-gain</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_border_tt\" id=\"S3.T3.2.1.1.4\">APCL</th>\n</tr>\n</thead>\n<tbody class=\"ltx_tbody\">\n<tr class=\"ltx_tr\" id=\"S3.T3.2.2.1\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row ltx_border_t\" id=\"S3.T3.2.2.1.1\">CoalescedHashing</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row ltx_border_t\" id=\"S3.T3.2.2.1.2\">19</th>\n<td class=\"ltx_td ltx_align_center ltx_border_t\" id=\"S3.T3.2.2.1.3\">1</td>\n<td class=\"ltx_td ltx_align_center ltx_border_t\" id=\"S3.T3.2.2.1.4\">1.72</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T3.2.3.2\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row\" id=\"S3.T3.2.3.2.1\">PerfectCellarHash</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row\" id=\"S3.T3.2.3.2.2\">23</th>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T3.2.3.2.3\">1.21</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T3.2.3.2.4\">1.48</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T3.2.4.3\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row\" id=\"S3.T3.2.4.3.1\">NeighborProbing</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row\" id=\"S3.T3.2.4.3.2\">30</th>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T3.2.4.3.3\">1.30</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T3.2.4.3.4\">1.34</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T3.2.5.4\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row ltx_border_bb\" id=\"S3.T3.2.5.4.1\">NeighborHash</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_row ltx_border_bb\" id=\"S3.T3.2.5.4.2\">39</th>\n<td class=\"ltx_td ltx_align_center ltx_border_bb\" id=\"S3.T3.2.5.4.3\">1.30</td>\n<td class=\"ltx_td ltx_align_center ltx_border_bb\" id=\"S3.T3.2.5.4.4\">1.14</td>\n</tr>\n</tbody>\n</table>\n\n",
        "footnotes": [],
        "references": [
            "We conducted experiments and analyses on different datasets using the three aforementioned implementations. Datasets larger than 2GB exhibited similar trends. As we are particularly interested in the performance on larger datasets, the Table\u00a03 presents the results for the 16GB dataset."
        ]
    },
    "S3.T4": {
        "caption": "Table 4. KV(Rocksdb) vs KV(Neighborhash)",
        "table": "<table class=\"ltx_tabular ltx_centering ltx_guessed_headers ltx_align_middle\" id=\"S3.T4.2\">\n<thead class=\"ltx_thead\">\n<tr class=\"ltx_tr\" id=\"S3.T4.2.1.1\">\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_border_tt\" id=\"S3.T4.2.1.1.1\">Key-value</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_border_tt\" id=\"S3.T4.2.1.1.2\">Batch-size</th>\n<th class=\"ltx_td ltx_align_center ltx_th ltx_th_column ltx_border_tt\" id=\"S3.T4.2.1.1.3\">AVG-latency(ms)</th>\n</tr>\n</thead>\n<tbody class=\"ltx_tbody\">\n<tr class=\"ltx_tr\" id=\"S3.T4.2.2.1\">\n<td class=\"ltx_td ltx_border_t\" id=\"S3.T4.2.2.1.1\"/>\n<td class=\"ltx_td ltx_align_center ltx_border_t\" id=\"S3.T4.2.2.1.2\">10</td>\n<td class=\"ltx_td ltx_align_center ltx_border_t\" id=\"S3.T4.2.2.1.3\">1.11</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T4.2.3.2\">\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T4.2.3.2.1\">KV(Rocksdb)</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T4.2.3.2.2\">100</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T4.2.3.2.3\">10.56</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T4.2.4.3\">\n<td class=\"ltx_td\" id=\"S3.T4.2.4.3.1\"/>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T4.2.4.3.2\">500</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T4.2.4.3.3\">25.81</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T4.2.5.4\">\n<td class=\"ltx_td ltx_border_t\" id=\"S3.T4.2.5.4.1\"/>\n<td class=\"ltx_td ltx_align_center ltx_border_t\" id=\"S3.T4.2.5.4.2\">10</td>\n<td class=\"ltx_td ltx_align_center ltx_border_t\" id=\"S3.T4.2.5.4.3\">1.05</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T4.2.6.5\">\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T4.2.6.5.1\">KV(Neighborhash)</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T4.2.6.5.2\">100</td>\n<td class=\"ltx_td ltx_align_center\" id=\"S3.T4.2.6.5.3\">1.78</td>\n</tr>\n<tr class=\"ltx_tr\" id=\"S3.T4.2.7.6\">\n<td class=\"ltx_td ltx_border_bb\" id=\"S3.T4.2.7.6.1\"/>\n<td class=\"ltx_td ltx_align_center ltx_border_bb\" id=\"S3.T4.2.7.6.2\">500</td>\n<td class=\"ltx_td ltx_align_center ltx_border_bb\" id=\"S3.T4.2.7.6.3\">3.31</td>\n</tr>\n</tbody>\n</table>\n\n",
        "footnotes": [],
        "references": [
            "Latency. We compared its effectiveness with a RocksDB-based Key-value query service, a commonly used solution in industrial recommendations that our system has previously utilized. We observed a 3 to 6 times increase in query latency compared to the baseline. In an experiment focusing on a high-traffic storage table for item features(40M items, 1KB per-item), with a peak online Key-Seek Per Second (KPS) of around 700k, we found that as the batch_size of single key queries increased, performance of query service remained stable without significant degradation, as illustrate in Table\u00a04. CPU profiling with the perf tool showed that hash lookups in Neighborhash consumed a small portion of the CPU, with about half of the CPU usage dedicated to IO operations like payload packaging. Conversely, in the RocksDB implementation with an in-memory table configured as a hashtable and 10GB of memory(same with NeighborKV), approximately 30% of CPU utilization was allocated to memory queries and retrieval. Consequently, as the batch size increased, the performance discrepancies became more noticeable."
        ]
    }
}