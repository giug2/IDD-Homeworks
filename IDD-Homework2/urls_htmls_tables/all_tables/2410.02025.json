{
    "id_table_1": {
        "caption": "Table 1 :  MSE for the estimated conditional mean and the standard deviation.",
        "table": "S3.T1.18.18",
        "footnotes": [],
        "references": [
            "where  f j : ( a j , b j ) d j  ( a j + 1 , b j + 1 ) d j + 1 : subscript f j  superscript subscript a j subscript b j subscript d j superscript subscript a j 1 subscript b j 1 subscript d j 1 f_{j}:(a_{j},b_{j})^{d_{j}}\\to(a_{j+1},b_{j+1})^{d_{j+1}} italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT : ( italic_a start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_b start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  ( italic_a start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT , italic_b start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ,  d 0 = p + d subscript d 0 p d d_{0}={\\mathfrak{p}}+{\\mathfrak{d}} italic_d start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = fraktur_p + fraktur_d  and  d q + 1 = D subscript d q 1 D d_{q+1}=D italic_d start_POSTSUBSCRIPT italic_q + 1 end_POSTSUBSCRIPT = italic_D . Denote  f j = ( f j ( 1 ) , ... , f j ( d j + 1 ) ) subscript f j superscript subscript f j 1 ... superscript subscript f j subscript d j 1 f_{j}=(f_{j}^{(1)},\\ldots,f_{j}^{(d_{j+1})}) italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = ( italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT , ... , italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_d start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT )  as the components of  f j subscript f j f_{j} italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , let  t j subscript t j t_{j} italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  be the maximal number of variables on which each of the  f j ( i ) subscript superscript f i j f^{(i)}_{j} italic_f start_POSTSUPERSCRIPT ( italic_i ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  depends and let  f j ( i )  H  j  ( ( a j , b j ) t j , K ) subscript superscript f i j superscript H subscript  j superscript subscript a j subscript b j subscript t j K f^{(i)}_{j}\\in\\mathcal{H}^{\\beta_{j}}\\left((a_{j},b_{j})^{t_{j}},K\\right) italic_f start_POSTSUPERSCRIPT ( italic_i ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( ( italic_a start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_b start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUPERSCRIPT , italic_K )  (see Section  2.4.1  for the definition of the Holder class  H  superscript H  \\mathcal{H}^{\\beta} caligraphic_H start_POSTSUPERSCRIPT italic_ end_POSTSUPERSCRIPT ). A composite structure is very general which includes smooth functions and additive structure as special cases. In addition, in the next section, we show the class of conditional distributions  { Q G  (  | X = x ) : x  R p , G   G } \\left\\{Q_{G_{*}}(\\cdot|X=x):x\\in\\mathbb{R}^{\\mathfrak{p}},G_{*}\\in\\mathcal{G}\\right\\} { italic_Q start_POSTSUBSCRIPT italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUBSCRIPT (  | italic_X = italic_x ) : italic_x  blackboard_R start_POSTSUPERSCRIPT fraktur_p end_POSTSUPERSCRIPT , italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_G }  induced by the composite structure is broad.",
            "We first present  Lemma   1 , which establishes the bracketing entropy of the functional class  P P \\mathcal{P} caligraphic_P  with respect to Hellinger distance in terms of the covering entropy of the search class  F F \\mathcal{F} caligraphic_F . This enables us to transfer the entropy control of the individual components  F F \\mathcal{F} caligraphic_F  and    \\sigma italic_  to the entire  P P \\mathcal{P} caligraphic_P .",
            "The proof of  Lemma   1  is provided in the  Appendix   D .  Theorem   1  presents the convergence rate of the sieve-MLE to the true distribution (see  Appendix   E  for the proof).",
            "Let  F , P ,  min F P subscript  \\mathcal{F},\\mathcal{P},\\sigma_{\\min} caligraphic_F , caligraphic_P , italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  and    =    ( D ) subscript  subscript  D \\delta_{*}=\\delta_{*}(D) italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_D )  be given as in  Lemma   1 , and  n  1 n 1 n\\geq 1 italic_n  1 . Suppose that  log N (  , F ,  |  |    )   { A + 1  log   1 } \\log{\\mathcal{N}}\\left(\\delta,\\mathcal{F},\\||\\cdot|_{\\infty}\\|_{\\infty}\\right)% \\leq\\xi\\left\\{A+1\\vee\\log\\delta^{-1}\\right\\} roman_log caligraphic_N ( italic_ , caligraphic_F ,  |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  start_POSTSUBSCRIPT  end_POSTSUBSCRIPT )  italic_ { italic_A + 1  roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT }  for every    ( 0 ,   ]  0 subscript  \\delta\\in(0,\\delta_{*}] italic_  ( 0 , italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ]  and some  A ,  > 0 A  0 A,\\xi>0 italic_A , italic_ > 0 . Suppose that there exists a  G  F G F G\\in\\mathcal{F} italic_G  caligraphic_F  and some   approx  ( 0 ,   ] subscript  approx 0 subscript  \\delta_{\\operatorname*{approx}}\\in(0,\\delta_{*}] italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT  ( 0 , italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ]  such that   | G  G  |      approx subscript norm subscript G subscript G subscript  approx \\||G-G_{*}|_{\\infty}\\|_{\\infty}\\leq\\delta_{\\operatorname*{approx}}  | italic_G - italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . Furthermore, suppose that  s  1 s 1 s\\geq 1 italic_s  1 ,  A  1 A 1 A\\geq 1 italic_A  1 ,   m  i  n  1 subscript  m i n 1 \\sigma_{min}\\leq 1 italic_ start_POSTSUBSCRIPT italic_m italic_i italic_n end_POSTSUBSCRIPT  1 ,   approx  1 subscript  approx 1 \\delta_{\\operatorname*{approx}}\\leq 1 italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT  1  and     [  min ,  max ] subscript  subscript  subscript  \\sigma_{*}\\in[\\sigma_{\\min},\\sigma_{\\max}] italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ] . Then",
            "The outlined rate has two components: the statistical component, expressed as an upper bound to the metric entropy of  F F \\mathcal{F} caligraphic_F , and the approximation component, denoted as   approx subscript  approx \\delta_{\\operatorname*{approx}} italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . The statistical error is quantified by measuring the complexity of the class  P P \\mathcal{P} caligraphic_P , as formulated in  Lemma   1 . The approximation error is assessed through the ability of the provided function class to approximate the true distribution.",
            "We can simplify and visualize the result stated in  Theorem   1  in both cases: when the sieve-MLE is obtained with optimization performed over the class  F s subscript F s \\mathcal{F}_{s} caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  and  F c subscript F c \\mathcal{F}_{c} caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT . To fulfill the conditions stated in the  Theorem   1 , we need to establish entropy bounds for these function classes,  F s subscript F s \\mathcal{F}_{s} caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  and  F c subscript F c \\mathcal{F}_{c} caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT , and gain insight into their approximation capabilities for the composite structure class described in  2 .",
            "Having established the essential components for  F c subscript F c \\mathcal{F}_{c} caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT  in ( 11 ) and Lemma  4 .2, and for  F s subscript F s \\mathcal{F}_{s} caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  in ( 10 ) and Lemma  4 .1, respectively, we can simplify Theorem  1  and state Corollary  1 .",
            "Suppose that Assumptions  1  and  2  hold, and     [  min ,  max ] subscript  subscript  subscript  \\sigma_{*}\\in\\left[\\sigma_{\\min},\\sigma_{\\max}\\right] italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1  and   max <  subscript  \\sigma_{\\max}<\\infty italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT <  . Moreover, assume that the noise    subscript  \\sigma_{*} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  decays at rate    \\alpha italic_ , i.e.,     n   asymptotically-equals subscript  superscript n  \\sigma_{*}\\asymp n^{-\\alpha} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT , and   min = n   subscript  superscript n  \\sigma_{\\min}=n^{-\\gamma} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  for some      0   0 \\gamma\\geq\\alpha\\geq 0 italic_  italic_  0 . Then, for every   approx  [ 0 , 1 ] subscript  approx 0 1 \\delta_{\\operatorname*{approx}}\\in[0,1] italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT  [ 0 , 1 ] , the following holds:",
            "Let  F s = F s  ( L , r , s , B , K ) subscript F s subscript F s L r s B K \\mathcal{F}_{s}=\\mathcal{F}_{s}\\left(L,r,s,B,K\\right) caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT = caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ( italic_L , italic_r , italic_s , italic_B , italic_K )  with    =    ( D ) subscript  subscript  D \\delta_{*}=\\delta_{*}(D) italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_D )  be as given in  Lemma   1 , and  L  log   approx  1 asymptotically-equals L subscript superscript  1 approx L\\asymp\\log\\delta^{-1}_{\\operatorname*{approx}} italic_L  roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  r   approx  t  /   asymptotically-equals r subscript superscript  subscript t subscript  approx r\\asymp\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}} italic_r  italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  s   approx  t  /    log   approx  1 asymptotically-equals s subscript superscript  subscript t subscript  approx subscript superscript  1 approx s\\asymp\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}}\\log\\delta^{-1}_{% \\operatorname*{approx}} italic_s  italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  B   approx  1 asymptotically-equals B subscript superscript  1 approx B\\asymp\\delta^{-1}_{\\operatorname*{approx}} italic_B  italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . Then the sieve MLE  p ^ s subscript ^ p s \\widehat{p}_{s} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  satisfies ( 7 ) with   n  superscript subscript  n \\varepsilon_{n}^{*} italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  as in ( 8 ) with   =  approx  t  /    log 2  (  approx  1 )  subscript superscript  subscript t subscript  approx superscript 2 subscript superscript  1 approx \\xi=\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}}\\log^{2}(\\delta^{-1}_{% \\operatorname*{approx}}) italic_ = italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  and  A = log 2  (  approx  1 ) A superscript 2 subscript superscript  1 approx A=\\log^{2}(\\delta^{-1}_{\\operatorname*{approx}}) italic_A = roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  provided that   n  n   n  2 / 6 subscript  n n subscript superscript  absent 2 n 6 \\eta_{n}\\leq n\\varepsilon^{*2}_{n}/6 italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n italic_ start_POSTSUPERSCRIPT  2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT / 6  and   n   2    subscript superscript  n 2 subscript  \\varepsilon^{*}_{n}\\leq\\sqrt{2}\\delta_{*} italic_ start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  square-root start_ARG 2 end_ARG italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT .",
            "Let  F c = F c  ( L , r , B , K ) subscript F c subscript F c L r B K \\mathcal{F}_{c}=\\mathcal{F}_{c}\\left(L,r,B,K\\right) caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT = caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT ( italic_L , italic_r , italic_B , italic_K )  with    =    ( D ) subscript  subscript  D \\delta_{*}=\\delta_{*}(D) italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_D )  be as given in  Lemma   1 , and  L  log   approx  1 asymptotically-equals L subscript superscript  1 approx L\\asymp\\log\\delta^{-1}_{\\operatorname*{approx}} italic_L  roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  r   approx  t  / 2    asymptotically-equals r subscript superscript  subscript t 2 subscript  approx r\\asymp\\delta^{-t_{*}/2\\beta_{*}}_{\\operatorname*{approx}} italic_r  italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / 2 italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  B   approx  1 asymptotically-equals B subscript superscript  1 approx B\\asymp\\delta^{-1}_{\\operatorname*{approx}} italic_B  italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . Then the sieve MLE  p ^ c subscript ^ p c \\widehat{p}_{c} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT  satisfies ( 7 ) with   n  superscript subscript  n \\varepsilon_{n}^{*} italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  as in ( 8 ) with   =  approx  t  /    log 2  (  approx  1 )  subscript superscript  subscript t subscript  approx superscript 2 subscript superscript  1 approx \\xi=\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}}\\log^{2}(\\delta^{-1}_{% \\operatorname*{approx}}) italic_ = italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  and  A = log 2  (  approx  1 ) A superscript 2 subscript superscript  1 approx A=\\log^{2}(\\delta^{-1}_{\\operatorname*{approx}}) italic_A = roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  provided that   n  n   n  2 / 6 subscript  n n subscript superscript  absent 2 n 6 \\eta_{n}\\leq n\\varepsilon^{*2}_{n}/6 italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n italic_ start_POSTSUPERSCRIPT  2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT / 6  and   n   2    subscript superscript  n 2 subscript  \\varepsilon^{*}_{n}\\leq\\sqrt{2}\\delta_{*} italic_ start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  square-root start_ARG 2 end_ARG italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT .",
            "The convergence rate in ( 12 ) illustrates the influence of intrinsic dimensionality, smoothness, and noise level on the estimation process. Note that    \\alpha italic_  is upper bounded as   n   2     ( D ) superscript subscript  n 2 subscript  D \\varepsilon_{n}^{*}\\leq\\sqrt{2}\\delta_{*}(D) italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  square-root start_ARG 2 end_ARG italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_D ) . For large values of    \\alpha italic_ , estimation of  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  is inherent difficult as the data is very close on the singular support. To address this, a small noise injection, as described in  Corollary   2 , can smooth the estimation and ensure consistency.",
            "The proof of  Corollary   1  is provided in  Appendix   F . For the composite structural class  G G \\mathcal{G} caligraphic_G , the effective smoothness is denoted by    subscript  \\beta_{*} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and the dimension is  t  subscript t t_{*} italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . This effectively mitigates the curse of dimensionality. The convergence rate at ( 12 ) also recovers the optimal rate when  q = 1 q 1 q=1 italic_q = 1  and   = 0  0 \\alpha=0 italic_ = 0 , and there is a small lag of polynomial factor  t    / ( 2    + t  ) subscript t  2 subscript  subscript t t_{*}\\alpha/(2\\beta_{*}+t_{*}) italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT italic_ / ( 2 italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT + italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT )  when   > 0  0 \\alpha>0 italic_ > 0   (Norets and Pati,,  2017 ) . This lag arises due to the presence of full-dimensional noise in the response observation  Y Y Y italic_Y . Note that when the noise is small, that is    \\alpha italic_  is large, achieving a sharp estimation of  p  subscript p p_{*} italic_p start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  requires an equally accurate estimate of  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . This can be quite challenging. Our practically tractable approach attempts to address this without initially estimating the singular support.",
            "The proof of  Theorem   2  is provided in  Appendix   G .  Theorem   2  guarantees that  W 1  ( Q ^ g ^ , Q  )  log d H  ( p ^ , p  ) +   subscript less-than-or-similar-to subscript W 1 subscript ^ Q ^ g subscript Q subscript d H ^ p subscript p subscript  W_{1}\\left(\\widehat{Q}_{\\widehat{g}},Q_{*}\\right)\\lesssim_{\\log}d_{H}(\\widehat% {p},p_{*})+\\sigma_{*} italic_W start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( over^ start_ARG italic_Q end_ARG start_POSTSUBSCRIPT over^ start_ARG italic_g end_ARG end_POSTSUBSCRIPT , italic_Q start_POSTSUBSCRIPT  end_POSTSUBSCRIPT )  start_POSTSUBSCRIPT roman_log end_POSTSUBSCRIPT italic_d start_POSTSUBSCRIPT italic_H end_POSTSUBSCRIPT ( over^ start_ARG italic_p end_ARG , italic_p start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) + italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , where   log subscript less-than-or-similar-to \\lesssim_{\\log}  start_POSTSUBSCRIPT roman_log end_POSTSUBSCRIPT  represents less than or equal up to a logarithmic factor of  n n n italic_n . Following from  Corollary   1 , the Wasserstein convergence rate,  n  (    t    ) / ( 2    + t  )  log 2  ( n )     log 1 / 2  ( n ) superscript n subscript  subscript t  2 subscript  subscript t superscript 2 n subscript  superscript 1 2 n n^{-(\\beta_{*}-t_{*}\\alpha)/(2\\beta_{*}+t_{*})}\\log^{2}(n)\\vee\\sigma_{*}\\log^{% 1/2}(n) italic_n start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT italic_ ) / ( 2 italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT + italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_n )  italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 1 / 2 end_POSTSUPERSCRIPT ( italic_n ) , comprises two components: the convergence rate in the Hellinger distance and the standard deviation of the true noise sequence. It is noteworthy that the first expression is influenced by the variance of noise by the factor    \\alpha italic_ . When    \\alpha italic_  is very small, indicating that the data  Y j subscript Y j Y_{j} italic_Y start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  lies very close to the manifold, the second expression  n   superscript n  n^{-\\alpha} italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  in the overall rate dominates. Intuitively, this phenomenon arises from the underlying structural challenges in related manifold estimation problems with noisy data, as discussed by  Genovese et al., ( 2012 ) . To address this issue, we propose a data perturbation strategy by transforming the data  { ( Y j , X j ) } j = 1 n superscript subscript subscript Y j subscript X j j 1 n \\{(Y_{j},X_{j})\\}_{j=1}^{n} { ( italic_Y start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_X start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) } start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT  into  { ( Y ~ j , X j ) } j = 1 n superscript subscript subscript ~ Y j subscript X j j 1 n \\{(\\widetilde{Y}_{j},X_{j})\\}_{j=1}^{n} { ( over~ start_ARG italic_Y end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_X start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) } start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , where  Y ~ j = Y j +  j subscript ~ Y j subscript Y j subscript bold-italic- j \\widetilde{Y}_{j}=Y_{j}+{\\bm{\\epsilon}}_{j} over~ start_ARG italic_Y end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = italic_Y start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT + bold_italic_ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  and   j  N  ( 0 D , n    / (   + t  )  I D ) similar-to subscript bold-italic- j N subscript 0 D superscript n subscript  subscript  subscript t subscript I D {\\bm{\\epsilon}}_{j}\\sim{\\mathsf{N}}\\left(0_{D},n^{-\\beta_{*}/(\\beta_{*}+t_{*})% }\\,I_{D}\\right) bold_italic_ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  sansserif_N ( 0 start_POSTSUBSCRIPT italic_D end_POSTSUBSCRIPT , italic_n start_POSTSUPERSCRIPT - italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / ( italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT + italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_I start_POSTSUBSCRIPT italic_D end_POSTSUBSCRIPT ) . The resulting estimation error bound is summarized below, whose proof is provided in  Appendix   H .",
            "Suppose that Assumption  1 ,  2 , and  3  hold, and     [  min ,  max ] subscript  subscript  subscript  \\sigma_{*}\\in[\\sigma_{\\min},\\sigma_{\\max}] italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with    = n   subscript  superscript n  \\sigma_{*}=n^{-\\alpha} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  and   min = n   subscript  superscript n  \\sigma_{\\min}=n^{-\\gamma} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  for some  0     0   0\\leq\\alpha\\leq\\gamma 0  italic_  italic_ . Then for each of the network architecture classes (sparse and fully connected) with the network parameters specified in  Corollary   1 , the sieve MLE  p ^ p  e  r subscript ^ p p e r \\widehat{p}_{per} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_p italic_e italic_r end_POSTSUBSCRIPT  and  Q ^ p  e  r subscript ^ Q p e r \\widehat{Q}_{per} over^ start_ARG italic_Q end_ARG start_POSTSUBSCRIPT italic_p italic_e italic_r end_POSTSUBSCRIPT  based on the perturbed data  { ( Y ~ j , X j ) } j = 1 n superscript subscript subscript ~ Y j subscript X j j 1 n \\{(\\widetilde{Y}_{j},X_{j})\\}_{j=1}^{n} { ( over~ start_ARG italic_Y end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_X start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) } start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT  satisfies",
            "Lemma   2  establishes that the learnable distribution class includes Holder-smooth functions with smoothness parameter   min subscript  \\beta_{\\min} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  and intrinsic dimension  d d {\\mathfrak{d}} fraktur_d . As a result, following  Corollary   1 , the convergence rate for density estimation is given by   n   n  (  min + 1  d   ) / ( 2   min + 2 + d ) asymptotically-equals subscript superscript  n superscript n subscript  1 d  2 subscript  2 d \\varepsilon^{*}_{n}\\asymp n^{-(\\beta_{\\min}+1-{\\mathfrak{d}}\\alpha)/(2\\beta_{% \\min}+2+{\\mathfrak{d}})} italic_ start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT + 1 - fraktur_d italic_ ) / ( 2 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT + 2 + fraktur_d ) end_POSTSUPERSCRIPT . A push-forward map is a transport map between two distributions. The well-established regularity theory of transport map in optimal transport is directly applicable here [see  Villani et al., ( 2009 )  and  Villani, ( 2021 ) ]. The proof of  Lemma   2  is based on Theorem 12.50 of  Villani et al., ( 2009 )  and  Caffarelli, ( 1996 ) , which establishes the regularity of this transport map and its existence follows from  Brenier, ( 1991 ) . When  p Z subscript p Z p_{Z} italic_p start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT  is selected as a well-behaved parametric distribution, the regularity of the transport map is determined by the smoothness of both   X  superscript subscript  X \\mu_{X}^{*} italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  and  Q  subscript Q Q_{*} italic_Q start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . For a more detailed discussion on this, please refer to  Appendix   B .",
            "In Appendix  K , we present a novel approximation result for the function class exhibiting  smoothness disparity  in  Theorem   5 . This new result facilitates the study of theoretical properties of estimators when the generator  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Note that such a function class defined in ( 16 ) in Appendix  K  is much broader compared to the smoothness class in Section  2.4.1  as  Z Z Z italic_Z  and  X X X italic_X  do not have to be jointly smooth and it allows for smoothness disparity among them. The subsequent  Theorem   3  combines our approximation result with ( 11 ) and enables us to specialize  Theorem   1  to this class (see  Appendix   I  for the proof).",
            "Let  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Suppose that Assumption  1  holds and     [  min ,  max ] subscript  subscript  subscript  \\sigma_{*}\\in\\left[\\sigma_{\\min},\\sigma_{\\max}\\right] italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1  and   max <  subscript  \\sigma_{\\max}<\\infty italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT <  . Moreover, we assume     n   asymptotically-equals subscript  superscript n  \\sigma_{*}\\asymp n^{-\\alpha} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT , and   min = n   subscript  superscript n  \\sigma_{\\min}=n^{-\\gamma} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  for some  0      (  Z  1  d +  X  1  p )  1 0   superscript superscript subscript  Z 1 d superscript subscript  X 1 p 1 0\\leq\\alpha\\leq\\gamma\\leq(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{% \\mathfrak{p}})^{-1} 0  italic_  italic_  ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT . Then, for every   approx  [ 0 , 1 ] subscript  approx 0 1 \\delta_{\\operatorname*{approx}}\\in[0,1] italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT  [ 0 , 1 ] , we have: Let  F s = F s  ( L , r , s , 1 , K ) subscript F s subscript F s L r s 1 K \\mathcal{F}_{s}=\\mathcal{F}_{s}\\left(L,r,s,1,K\\right) caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT = caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ( italic_L , italic_r , italic_s , 1 , italic_K )  with  L  log   approx  1 asymptotically-equals L subscript superscript  1 approx L\\asymp\\log\\delta^{-1}_{\\operatorname*{approx}} italic_L  roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  r   approx  (  Z  1  d +  X  1  p ) asymptotically-equals r subscript superscript  superscript subscript  Z 1 d superscript subscript  X 1 p approx r\\asymp\\delta^{-(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}})}_{% \\operatorname*{approx}} italic_r  italic_ start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  s   approx  (  Z  1  d +  X  1  p )  log   approx  1 asymptotically-equals s subscript superscript  superscript subscript  Z 1 d superscript subscript  X 1 p approx subscript superscript  1 approx s\\asymp\\delta^{-(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}})}_{% \\operatorname*{approx}}\\log\\delta^{-1}_{\\operatorname*{approx}} italic_s  italic_ start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . Then the sieve MLE  p ^ s subscript ^ p s \\widehat{p}_{s} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  satisfies ( 7 ) with the rate outlined in ( 8 ) with   =  approx  (  Z  1  d +  X  1  p )  log 2   approx  1  subscript superscript  superscript subscript  Z 1 d superscript subscript  X 1 p approx superscript 2 subscript superscript  1 approx \\xi=\\delta^{-(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}})}_{% \\operatorname*{approx}}\\log^{2}\\delta^{-1}_{\\operatorname*{approx}} italic_ = italic_ start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT  and  A = log 2   approx  1 A superscript 2 subscript superscript  1 approx A=\\log^{2}\\delta^{-1}_{\\operatorname*{approx}} italic_A = roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT , provided that   n  n   n  2 / 6 subscript  n n subscript superscript  absent 2 n 6 \\eta_{n}\\leq n\\varepsilon^{*2}_{n}/6 italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n italic_ start_POSTSUPERSCRIPT  2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT / 6 . In particular, choosing   approx := (   2 / n ) 1 / ( 2 +  Z  1  d +  X  1  p )  1 assign subscript  approx superscript superscript subscript  2 n 1 2 superscript subscript  Z 1 d superscript subscript  X 1 p 1 \\delta_{\\operatorname*{approx}}:=\\left(\\sigma_{*}^{2}/n\\right)^{1/\\left(2+% \\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}}\\right)}\\leq 1 italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT := ( italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_n ) start_POSTSUPERSCRIPT 1 / ( 2 + italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT  1  minimizes   n     { A + log  ( n /  min ) } / n   approx /   asymptotically-equals superscript subscript  n  A n subscript  n subscript  approx subscript  \\varepsilon_{n}^{*}\\asymp\\sqrt{\\xi\\left\\{A+\\log\\left(n/\\sigma_{\\min}\\right)% \\right\\}/n}\\vee\\delta_{\\operatorname*{approx}}/\\sigma_{*} italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  square-root start_ARG italic_ { italic_A + roman_log ( italic_n / italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT ) } / italic_n end_ARG  italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and gives",
            "The proof of  Theorem   3  is provided in  Appendix   I . In the special case when   = 0  0 \\alpha=0 italic_ = 0  and  d = D d D {\\mathfrak{d}}=D fraktur_d = italic_D , our convergence rate in ( 14 ) recovers the minimax optimal rate for conditional density estimation based on kernel smoothing, as established in  Li et al., ( 2022 ) .",
            "In the general case where the compact manifold  Y Y \\mathcal{Y} caligraphic_Y  needs to be covered by multiple charts, demonstrating the existence of a transport or push-forward map is challenging because  Y Y \\mathcal{Y} caligraphic_Y  is not uniformly convex. Suppose that  { ( U k ,  k ) } k = 1 K superscript subscript subscript U k subscript  k k 1 K \\{(U_{k},\\varphi_{k})\\}_{k=1}^{K} { ( italic_U start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) } start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT  forms a cover of  Y Y {\\mathcal{Y}} caligraphic_Y . Due to the compactness of  Y Y {\\mathcal{Y}} caligraphic_Y , the number of charts  K K K italic_K  is finite. Analogous to the single chart scenario, we first construct  g k   k subscript g k subscript  k g_{k}\\circ\\varphi_{k} italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT  italic_ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT  to transport the measure on each chart. We then patch these local transport maps together to construct a global transport map; see  Appendix   C  for full details. As a result, following  Corollary   1 , the convergence rate for density estimation shall be given by   n   n  (  min  d   ) / ( 2   min + d ) asymptotically-equals subscript superscript  n superscript n subscript  d  2 subscript  d \\varepsilon^{*}_{n}\\asymp n^{-(\\beta_{\\min}-{\\mathfrak{d}}\\alpha)/(2\\beta_{% \\min}+{\\mathfrak{d}})} italic_ start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT - fraktur_d italic_ ) / ( 2 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT + fraktur_d ) end_POSTSUPERSCRIPT .",
            "We compare the sieve MLE with CKDE  (Hall et al.,,  2004 )  and FlexCode proposed by  Izbicki and Lee, ( 2017 ) . To evaluate their performance, we compute the mean squared error (MSE) for both the mean and the standard deviation. We use Monte Carlo approximation to compute the mean and standard deviation for the sieve MLE, and numerical integration for CKDE and Flexcode. This evaluation strategy resembles that implemented by  Zhou et al., ( 2022 ) .  Table   1  summarizes the findings.",
            "We computed the empirical  W 1 subscript W 1 W_{1} italic_W start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT  distance using the algorithm proposed by  Cuturi, ( 2013 )  to evaluate the performance. The right panel of  Figure   1  presents the boxplots of  W 1 subscript W 1 W_{1} italic_W start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT  between the true and learned distribution for  M 1 subscript M 1 M_{1} italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT  and  M 2 subscript M 2 M_{2} italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  across 20 repetitions. The left panel highlights the following general behaviors:",
            "This observed pattern, as emphasized in  Corollary   2 , closely aligns with the results achieved in ( 13 ).",
            "We utilized the widely used MNIST dataset for two purposes: to demonstrate the generalizability of our approach to a benchmark image dataset where the intrinsic dimension  d d {\\mathfrak{d}} fraktur_d  is much lesser than the ambient dimension  D = 784 D 784 D=784 italic_D = 784  and to underscore the effectiveness of sparse networks as outlined in  Lemma   4 .1 and  Corollary   1 .1.",
            "Moreover, the condition ( 17 ) is equivalent of",
            "For the last line, we use the fact that   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1 . The inequality at ( 18 ) follows from  e  x  ( 1  x ) superscript e x 1 x e^{-x}\\geq(1-x) italic_e start_POSTSUPERSCRIPT - italic_x end_POSTSUPERSCRIPT  ( 1 - italic_x ) . The ones at ( 19 ) follows using",
            "Let   > 0  0 \\varepsilon>0 italic_ > 0 . Let  { g 1 , ... , g N 1 } subscript g 1 ... subscript g subscript N 1 \\{g_{1},\\ldots,g_{N_{1}}\\} { italic_g start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_g start_POSTSUBSCRIPT italic_N start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT }  be   1  limit-from subscript  1 \\eta_{1}- italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - covering of  F F \\mathcal{F} caligraphic_F  and  {  1 , ... ,  N 2 } subscript  1 ... subscript  subscript N 2 \\{\\sigma_{1},\\ldots,\\sigma_{N_{2}}\\} { italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_ start_POSTSUBSCRIPT italic_N start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_POSTSUBSCRIPT }  be   2  limit-from subscript  2 \\eta_{2}- italic_ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT - covering of  [  min ,  max ] subscript  subscript  \\left[\\sigma_{\\min},\\sigma_{\\max}\\right] [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with respect to   |  |    \\||\\cdot|_{\\infty}\\|_{\\infty}  |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  and  |  |  |\\cdot|_{\\infty} |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . By ( 21 ) and ( 24 ),   1 = c 1  1   min D + 2   / 4 subscript  1 superscript subscript c 1 1 superscript subscript  D 2  4 \\eta_{1}=c_{1}^{-1}\\sigma_{\\min}^{D+2}\\varepsilon/4 italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_D + 2 end_POSTSUPERSCRIPT italic_ / 4  and   2 = c 2  2   min D + 1   / 4 subscript  2 superscript subscript c 2 2 superscript subscript  D 1  4 \\eta_{2}=c_{2}^{-2}\\sigma_{\\min}^{D+1}\\varepsilon/4 italic_ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 2 end_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_D + 1 end_POSTSUPERSCRIPT italic_ / 4  implies",
            "Choose four absolute constants  c 1 , ... , c 4 subscript c 1 ... subscript c 4 c_{1},\\ldots,c_{4} italic_c start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_c start_POSTSUBSCRIPT 4 end_POSTSUBSCRIPT  as in Theorem 1 of  Wong and Shen, ( 1995 ) . Define  c c c italic_c  and  C C C italic_C  in the statement of  Lemma   1 . The proof closely follows  Chae et al., ( 2023 ) . We have therein the proof of Theorem 3 that",
            "For the sparse case in  1 .1, utilizing the entropy bound from ( 10 ), we observe that",
            "Similarly for the fully connected case  1 .2, utilizing the entropy bound from ( 11 ) , we observe that",
            "Following the entropy bound from ( 10 ), we have",
            "The rest directly follows from the  Theorem   1",
            "We may also write ( 31 ) as a linear combination of monomials"
        ]
    },
    "id_table_2": {
        "caption": "",
        "table": "A1.E15",
        "footnotes": [],
        "references": [
            "Our analysis in  Corollary   2  suggests the need to inject a small amount of noise into the data when they are sufficiently close to the manifold. Intuitively, this observation validates the underlying structural challenges in related manifold estimation problems with noisy data, as outlined by  Genovese et al., ( 2012 ) .",
            "Here,  G   (  , x ) : Z  M x : subscript G  x  Z subscript M x G_{*}(\\cdot,x):{\\mathcal{Z}}\\to{\\mathcal{M}}_{x} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT (  , italic_x ) : caligraphic_Z  caligraphic_M start_POSTSUBSCRIPT italic_x end_POSTSUBSCRIPT  is the unknown generator function,  Z Z Z italic_Z  a latent variable with a known distribution  P Z subscript P Z P_{Z} italic_P start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT  and support  Z  R d Z superscript R d \\mathcal{Z}\\subset{\\mathbb{R}}^{\\mathfrak{d}} caligraphic_Z  blackboard_R start_POSTSUPERSCRIPT fraktur_d end_POSTSUPERSCRIPT  independent of the predictor  X X X italic_X . The existence of the generator  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  directly follows from Noise Outsourcing  Lemma   3 . This lemma enables the transfer of randomness into the covariate and an orthogonal (independent) component through a generating function for any regression response. We denote  M : =  x  X M x  R D {\\mathcal{M}}:\\,=\\cup_{x\\in{\\mathcal{X}}}{\\mathcal{M}}_{x}\\subset\\mathbb{R}^{D} caligraphic_M : =  start_POSTSUBSCRIPT italic_x  caligraphic_X end_POSTSUBSCRIPT caligraphic_M start_POSTSUBSCRIPT italic_x end_POSTSUBSCRIPT  blackboard_R start_POSTSUPERSCRIPT italic_D end_POSTSUPERSCRIPT  as the support of the image of  G   ( Z , X ) subscript G Z X G_{*}({\\mathcal{Z}},{\\mathcal{X}}) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( caligraphic_Z , caligraphic_X )  such as a (union of)  d d d italic_d -dimensional manifold. We model  G   (  ,  ) : Z  X  R d  R p  Y  R D : subscript G   Z X superscript R d superscript R p  Y superscript R D G_{*}(\\cdot,\\cdot):{\\mathcal{Z}}\\times{\\mathcal{X}}\\subset{\\mathbb{R}}^{% \\mathfrak{d}}\\times{\\mathbb{R}}^{\\mathfrak{p}}\\rightarrow\\mathcal{Y}\\subset{% \\mathbb{R}}^{D} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT (  ,  ) : caligraphic_Z  caligraphic_X  blackboard_R start_POSTSUPERSCRIPT fraktur_d end_POSTSUPERSCRIPT  blackboard_R start_POSTSUPERSCRIPT fraktur_p end_POSTSUPERSCRIPT  caligraphic_Y  blackboard_R start_POSTSUPERSCRIPT italic_D end_POSTSUPERSCRIPT  using a deep neural network, leading to a  conditional deep generative model  for ( 2 ).",
            "In light of equation ( 2 ), it is evident that the distribution of  Y | X = x conditional Y X x Y|X=x italic_Y | italic_X = italic_x  results from the convolution of two distinct distributions: the pushforward of  Z Z Z italic_Z  through  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  with  X = x X x X=x italic_X = italic_x , and    \\varepsilon italic_  following an independent  D D D italic_D -dimensional normal distribution. The density corresponding to the true distribution  P  (  | X = x ) P_{*}(\\cdot|X=x) italic_P start_POSTSUBSCRIPT  end_POSTSUBSCRIPT (  | italic_X = italic_x )  can thus be expressed as:",
            "Denote   X   ( x ) superscript subscript  X  x \\mu_{X}^{\\ast}(x) italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT ( italic_x )  as the distribution of  X X X italic_X . We denote the true conditional densities as  p  = { p  (  | x ) , x  R p } p_{*}=\\{p_{*}(\\cdot|x),x\\in\\mathbb{R}^{\\mathfrak{p}}\\} italic_p start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = { italic_p start_POSTSUBSCRIPT  end_POSTSUBSCRIPT (  | italic_x ) , italic_x  blackboard_R start_POSTSUPERSCRIPT fraktur_p end_POSTSUPERSCRIPT } . It is natural to assume that the data is generated from  p  subscript p p_{*} italic_p start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  from model ( 2 ) with some true generator  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  and    subscript  \\sigma_{*} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . We denote  Q  (  | X = x ) Q_{*}(\\cdot|X=x) italic_Q start_POSTSUBSCRIPT  end_POSTSUBSCRIPT (  | italic_X = italic_x )  (or  Q G  subscript Q subscript G Q_{G_{*}} italic_Q start_POSTSUBSCRIPT italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUBSCRIPT ) as the distribution of  G   ( Z , x ) subscript G Z x G_{*}(Z,x) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_Z , italic_x )  for some distribution  P Z subscript P Z P_{Z} italic_P start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT .",
            "where  f j : ( a j , b j ) d j  ( a j + 1 , b j + 1 ) d j + 1 : subscript f j  superscript subscript a j subscript b j subscript d j superscript subscript a j 1 subscript b j 1 subscript d j 1 f_{j}:(a_{j},b_{j})^{d_{j}}\\to(a_{j+1},b_{j+1})^{d_{j+1}} italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT : ( italic_a start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_b start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  ( italic_a start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT , italic_b start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ,  d 0 = p + d subscript d 0 p d d_{0}={\\mathfrak{p}}+{\\mathfrak{d}} italic_d start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = fraktur_p + fraktur_d  and  d q + 1 = D subscript d q 1 D d_{q+1}=D italic_d start_POSTSUBSCRIPT italic_q + 1 end_POSTSUBSCRIPT = italic_D . Denote  f j = ( f j ( 1 ) , ... , f j ( d j + 1 ) ) subscript f j superscript subscript f j 1 ... superscript subscript f j subscript d j 1 f_{j}=(f_{j}^{(1)},\\ldots,f_{j}^{(d_{j+1})}) italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = ( italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT , ... , italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_d start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT )  as the components of  f j subscript f j f_{j} italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , let  t j subscript t j t_{j} italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  be the maximal number of variables on which each of the  f j ( i ) subscript superscript f i j f^{(i)}_{j} italic_f start_POSTSUPERSCRIPT ( italic_i ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  depends and let  f j ( i )  H  j  ( ( a j , b j ) t j , K ) subscript superscript f i j superscript H subscript  j superscript subscript a j subscript b j subscript t j K f^{(i)}_{j}\\in\\mathcal{H}^{\\beta_{j}}\\left((a_{j},b_{j})^{t_{j}},K\\right) italic_f start_POSTSUPERSCRIPT ( italic_i ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( ( italic_a start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_b start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUPERSCRIPT , italic_K )  (see Section  2.4.1  for the definition of the Holder class  H  superscript H  \\mathcal{H}^{\\beta} caligraphic_H start_POSTSUPERSCRIPT italic_ end_POSTSUPERSCRIPT ). A composite structure is very general which includes smooth functions and additive structure as special cases. In addition, in the next section, we show the class of conditional distributions  { Q G  (  | X = x ) : x  R p , G   G } \\left\\{Q_{G_{*}}(\\cdot|X=x):x\\in\\mathbb{R}^{\\mathfrak{p}},G_{*}\\in\\mathcal{G}\\right\\} { italic_Q start_POSTSUBSCRIPT italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUBSCRIPT (  | italic_X = italic_x ) : italic_x  blackboard_R start_POSTSUPERSCRIPT fraktur_p end_POSTSUPERSCRIPT , italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_G }  induced by the composite structure is broad.",
            "Denote  G = G  ( q , d , t ,  , K ) G G q d t  K \\mathcal{G}=\\mathcal{G}\\left(q,\\bm{d},\\bm{t},\\bm{\\beta},K\\right) caligraphic_G = caligraphic_G ( italic_q , bold_italic_d , bold_italic_t , bold_italic_ , italic_K )  as a collection of functions of form ( 5 ), where  d = ( d 0 , ... , d q + 1 ) d subscript d 0 ... subscript d q 1 \\bm{d}=(d_{0},\\ldots,d_{q+1}) bold_italic_d = ( italic_d start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , ... , italic_d start_POSTSUBSCRIPT italic_q + 1 end_POSTSUBSCRIPT ) ,  t = ( t 0 , ... , t q + 1 ) t subscript t 0 ... subscript t q 1 \\bm{t}=(t_{0},\\ldots,t_{q+1}) bold_italic_t = ( italic_t start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , ... , italic_t start_POSTSUBSCRIPT italic_q + 1 end_POSTSUBSCRIPT ) , and   = (  0 , ... ,  q + 1 )  subscript  0 ... subscript  q 1 \\bm{\\beta}=(\\beta_{0},\\ldots,\\beta_{q+1}) bold_italic_ = ( italic_ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , ... , italic_ start_POSTSUBSCRIPT italic_q + 1 end_POSTSUBSCRIPT ) . We regard  ( q , d , t ,  , K ) q d t  K (q,\\bm{d},\\bm{t},\\bm{\\beta},K) ( italic_q , bold_italic_d , bold_italic_t , bold_italic_ , italic_K )  as constants in our setup, and assume that the true generator  G   (  , x ) subscript G  x G_{*}(\\cdot,x) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT (  , italic_x )  as in ( 2 ) belongs to  G G \\mathcal{G} caligraphic_G , for all  x  X x X x\\in{\\mathcal{X}} italic_x  caligraphic_X . Additionally, we assume   | G  |     K subscript norm subscript subscript G K \\||G_{*}|_{\\infty}\\|_{\\infty}\\leq K  | italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_K .",
            "2  permits low intrinsic dimensionality within the learnable function class.  3  imposes the strong identifiability condition necessary for efficient estimation, as seen in manifold literature  (Aamari and Levrard,,  2019 ; Tang and Yang,,  2023 ) .",
            "We can simplify and visualize the result stated in  Theorem   1  in both cases: when the sieve-MLE is obtained with optimization performed over the class  F s subscript F s \\mathcal{F}_{s} caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  and  F c subscript F c \\mathcal{F}_{c} caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT . To fulfill the conditions stated in the  Theorem   1 , we need to establish entropy bounds for these function classes,  F s subscript F s \\mathcal{F}_{s} caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  and  F c subscript F c \\mathcal{F}_{c} caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT , and gain insight into their approximation capabilities for the composite structure class described in  2 .",
            "Suppose that Assumptions  1  and  2  hold, and     [  min ,  max ] subscript  subscript  subscript  \\sigma_{*}\\in\\left[\\sigma_{\\min},\\sigma_{\\max}\\right] italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1  and   max <  subscript  \\sigma_{\\max}<\\infty italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT <  . Moreover, assume that the noise    subscript  \\sigma_{*} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  decays at rate    \\alpha italic_ , i.e.,     n   asymptotically-equals subscript  superscript n  \\sigma_{*}\\asymp n^{-\\alpha} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT , and   min = n   subscript  superscript n  \\sigma_{\\min}=n^{-\\gamma} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  for some      0   0 \\gamma\\geq\\alpha\\geq 0 italic_  italic_  0 . Then, for every   approx  [ 0 , 1 ] subscript  approx 0 1 \\delta_{\\operatorname*{approx}}\\in[0,1] italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT  [ 0 , 1 ] , the following holds:",
            "The convergence rate in ( 12 ) illustrates the influence of intrinsic dimensionality, smoothness, and noise level on the estimation process. Note that    \\alpha italic_  is upper bounded as   n   2     ( D ) superscript subscript  n 2 subscript  D \\varepsilon_{n}^{*}\\leq\\sqrt{2}\\delta_{*}(D) italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  square-root start_ARG 2 end_ARG italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_D ) . For large values of    \\alpha italic_ , estimation of  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  is inherent difficult as the data is very close on the singular support. To address this, a small noise injection, as described in  Corollary   2 , can smooth the estimation and ensure consistency.",
            "The proof of  Corollary   1  is provided in  Appendix   F . For the composite structural class  G G \\mathcal{G} caligraphic_G , the effective smoothness is denoted by    subscript  \\beta_{*} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and the dimension is  t  subscript t t_{*} italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . This effectively mitigates the curse of dimensionality. The convergence rate at ( 12 ) also recovers the optimal rate when  q = 1 q 1 q=1 italic_q = 1  and   = 0  0 \\alpha=0 italic_ = 0 , and there is a small lag of polynomial factor  t    / ( 2    + t  ) subscript t  2 subscript  subscript t t_{*}\\alpha/(2\\beta_{*}+t_{*}) italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT italic_ / ( 2 italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT + italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT )  when   > 0  0 \\alpha>0 italic_ > 0   (Norets and Pati,,  2017 ) . This lag arises due to the presence of full-dimensional noise in the response observation  Y Y Y italic_Y . Note that when the noise is small, that is    \\alpha italic_  is large, achieving a sharp estimation of  p  subscript p p_{*} italic_p start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  requires an equally accurate estimate of  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . This can be quite challenging. Our practically tractable approach attempts to address this without initially estimating the singular support.",
            "The proof of  Theorem   2  is provided in  Appendix   G .  Theorem   2  guarantees that  W 1  ( Q ^ g ^ , Q  )  log d H  ( p ^ , p  ) +   subscript less-than-or-similar-to subscript W 1 subscript ^ Q ^ g subscript Q subscript d H ^ p subscript p subscript  W_{1}\\left(\\widehat{Q}_{\\widehat{g}},Q_{*}\\right)\\lesssim_{\\log}d_{H}(\\widehat% {p},p_{*})+\\sigma_{*} italic_W start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( over^ start_ARG italic_Q end_ARG start_POSTSUBSCRIPT over^ start_ARG italic_g end_ARG end_POSTSUBSCRIPT , italic_Q start_POSTSUBSCRIPT  end_POSTSUBSCRIPT )  start_POSTSUBSCRIPT roman_log end_POSTSUBSCRIPT italic_d start_POSTSUBSCRIPT italic_H end_POSTSUBSCRIPT ( over^ start_ARG italic_p end_ARG , italic_p start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) + italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , where   log subscript less-than-or-similar-to \\lesssim_{\\log}  start_POSTSUBSCRIPT roman_log end_POSTSUBSCRIPT  represents less than or equal up to a logarithmic factor of  n n n italic_n . Following from  Corollary   1 , the Wasserstein convergence rate,  n  (    t    ) / ( 2    + t  )  log 2  ( n )     log 1 / 2  ( n ) superscript n subscript  subscript t  2 subscript  subscript t superscript 2 n subscript  superscript 1 2 n n^{-(\\beta_{*}-t_{*}\\alpha)/(2\\beta_{*}+t_{*})}\\log^{2}(n)\\vee\\sigma_{*}\\log^{% 1/2}(n) italic_n start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT italic_ ) / ( 2 italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT + italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_n )  italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 1 / 2 end_POSTSUPERSCRIPT ( italic_n ) , comprises two components: the convergence rate in the Hellinger distance and the standard deviation of the true noise sequence. It is noteworthy that the first expression is influenced by the variance of noise by the factor    \\alpha italic_ . When    \\alpha italic_  is very small, indicating that the data  Y j subscript Y j Y_{j} italic_Y start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  lies very close to the manifold, the second expression  n   superscript n  n^{-\\alpha} italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  in the overall rate dominates. Intuitively, this phenomenon arises from the underlying structural challenges in related manifold estimation problems with noisy data, as discussed by  Genovese et al., ( 2012 ) . To address this issue, we propose a data perturbation strategy by transforming the data  { ( Y j , X j ) } j = 1 n superscript subscript subscript Y j subscript X j j 1 n \\{(Y_{j},X_{j})\\}_{j=1}^{n} { ( italic_Y start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_X start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) } start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT  into  { ( Y ~ j , X j ) } j = 1 n superscript subscript subscript ~ Y j subscript X j j 1 n \\{(\\widetilde{Y}_{j},X_{j})\\}_{j=1}^{n} { ( over~ start_ARG italic_Y end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_X start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) } start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , where  Y ~ j = Y j +  j subscript ~ Y j subscript Y j subscript bold-italic- j \\widetilde{Y}_{j}=Y_{j}+{\\bm{\\epsilon}}_{j} over~ start_ARG italic_Y end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = italic_Y start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT + bold_italic_ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  and   j  N  ( 0 D , n    / (   + t  )  I D ) similar-to subscript bold-italic- j N subscript 0 D superscript n subscript  subscript  subscript t subscript I D {\\bm{\\epsilon}}_{j}\\sim{\\mathsf{N}}\\left(0_{D},n^{-\\beta_{*}/(\\beta_{*}+t_{*})% }\\,I_{D}\\right) bold_italic_ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  sansserif_N ( 0 start_POSTSUBSCRIPT italic_D end_POSTSUBSCRIPT , italic_n start_POSTSUPERSCRIPT - italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / ( italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT + italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_I start_POSTSUBSCRIPT italic_D end_POSTSUBSCRIPT ) . The resulting estimation error bound is summarized below, whose proof is provided in  Appendix   H .",
            "Suppose that Assumption  1 ,  2 , and  3  hold, and     [  min ,  max ] subscript  subscript  subscript  \\sigma_{*}\\in[\\sigma_{\\min},\\sigma_{\\max}] italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with    = n   subscript  superscript n  \\sigma_{*}=n^{-\\alpha} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  and   min = n   subscript  superscript n  \\sigma_{\\min}=n^{-\\gamma} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  for some  0     0   0\\leq\\alpha\\leq\\gamma 0  italic_  italic_ . Then for each of the network architecture classes (sparse and fully connected) with the network parameters specified in  Corollary   1 , the sieve MLE  p ^ p  e  r subscript ^ p p e r \\widehat{p}_{per} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_p italic_e italic_r end_POSTSUBSCRIPT  and  Q ^ p  e  r subscript ^ Q p e r \\widehat{Q}_{per} over^ start_ARG italic_Q end_ARG start_POSTSUBSCRIPT italic_p italic_e italic_r end_POSTSUBSCRIPT  based on the perturbed data  { ( Y ~ j , X j ) } j = 1 n superscript subscript subscript ~ Y j subscript X j j 1 n \\{(\\widetilde{Y}_{j},X_{j})\\}_{j=1}^{n} { ( over~ start_ARG italic_Y end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_X start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) } start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT  satisfies",
            "Section  2.2  focuses on the true generator  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  within the class of functions with composition structures. In this subsection, we show that such a conditional distribution class achieved by the push-forward map  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  is broad and includes many existing distribution classes for  Q  subscript Q Q_{*} italic_Q start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  as special cases.",
            "Lemma   2  establishes that the learnable distribution class includes Holder-smooth functions with smoothness parameter   min subscript  \\beta_{\\min} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  and intrinsic dimension  d d {\\mathfrak{d}} fraktur_d . As a result, following  Corollary   1 , the convergence rate for density estimation is given by   n   n  (  min + 1  d   ) / ( 2   min + 2 + d ) asymptotically-equals subscript superscript  n superscript n subscript  1 d  2 subscript  2 d \\varepsilon^{*}_{n}\\asymp n^{-(\\beta_{\\min}+1-{\\mathfrak{d}}\\alpha)/(2\\beta_{% \\min}+2+{\\mathfrak{d}})} italic_ start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT + 1 - fraktur_d italic_ ) / ( 2 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT + 2 + fraktur_d ) end_POSTSUPERSCRIPT . A push-forward map is a transport map between two distributions. The well-established regularity theory of transport map in optimal transport is directly applicable here [see  Villani et al., ( 2009 )  and  Villani, ( 2021 ) ]. The proof of  Lemma   2  is based on Theorem 12.50 of  Villani et al., ( 2009 )  and  Caffarelli, ( 1996 ) , which establishes the regularity of this transport map and its existence follows from  Brenier, ( 1991 ) . When  p Z subscript p Z p_{Z} italic_p start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT  is selected as a well-behaved parametric distribution, the regularity of the transport map is determined by the smoothness of both   X  superscript subscript  X \\mu_{X}^{*} italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  and  Q  subscript Q Q_{*} italic_Q start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . For a more detailed discussion on this, please refer to  Appendix   B .",
            "In Appendix  K , we present a novel approximation result for the function class exhibiting  smoothness disparity  in  Theorem   5 . This new result facilitates the study of theoretical properties of estimators when the generator  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Note that such a function class defined in ( 16 ) in Appendix  K  is much broader compared to the smoothness class in Section  2.4.1  as  Z Z Z italic_Z  and  X X X italic_X  do not have to be jointly smooth and it allows for smoothness disparity among them. The subsequent  Theorem   3  combines our approximation result with ( 11 ) and enables us to specialize  Theorem   1  to this class (see  Appendix   I  for the proof).",
            "In this part, we extend  Lemma   2  and provide the existence of the generator when the conditional distribution is supported on a compact manifold with dimension  d   D subscript d  D \\mathsf{d}_{\\ast}\\leq D sansserif_d start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_D . Due to space constraints, we provide only a sketched proof here; the detailed proof can be found in  Appendix   C . Specifically, we first present arguments for the existence of the generator when  Y Y {\\mathcal{Y}} caligraphic_Y  is covered by a single chart. We then extend this to the multiple chart case using the technique of partition of unity.",
            "In the simpler case when there exists a single  ( Y ,  ) Y  ({\\mathcal{Y}},\\varphi) ( caligraphic_Y , italic_ )  covering  Y Y {\\mathcal{Y}} caligraphic_Y , where   : B 1  ( 0 d  )  Y :   subscript B 1 subscript 0 subscript d  Y \\varphi:{\\mathcal{B}}_{1}({0}_{\\mathsf{d}_{\\ast}})\\to{\\mathcal{Y}} italic_ : caligraphic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( 0 start_POSTSUBSCRIPT sansserif_d start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUBSCRIPT )  caligraphic_Y  is a homeomorphism, we assume    H  min + 1  superscript H subscript  1 \\varphi\\in\\mathcal{H}^{\\beta_{\\min}+1} italic_  caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT + 1 end_POSTSUPERSCRIPT . In this case, we use the change of variable formula to transfer the measure on  B 1  ( 0 d  ) subscript B 1 subscript 0 subscript d  {\\mathcal{B}}_{1}({0}_{\\mathsf{d}_{\\ast}}) caligraphic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( 0 start_POSTSUBSCRIPT sansserif_d start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUBSCRIPT )  (unit ball in  R d  superscript R subscript d  {\\mathbb{R}}^{\\mathsf{d}_{\\ast}} blackboard_R start_POSTSUPERSCRIPT sansserif_d start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ) from  Y Y {\\mathcal{Y}} caligraphic_Y . Following  Lemma   2 , we can find a transport map  g  H  min g superscript H subscript  g\\in\\mathcal{H}^{\\beta_{\\min}} italic_g  caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  mapping from  Z  X Z X {\\mathcal{Z}}\\times{\\mathcal{X}} caligraphic_Z  caligraphic_X  to  B 1  ( 0 d  ) subscript B 1 subscript 0 subscript d  {\\mathcal{B}}_{1}({0}_{\\mathsf{d}_{\\ast}}) caligraphic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( 0 start_POSTSUBSCRIPT sansserif_d start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUBSCRIPT ) . The map  g   g  g\\circ\\varphi italic_g  italic_  then serves as our generator.",
            "We examine two classes of datasets: (i) full-dimensional response and (ii) response residing on a low-dimensional manifold. The first highlights the generality of our proposed approach, while the second underscores its efficiency in terms of the Wasserstein metric and validates the small noise perturbation strategy outlined in  Corollary   2 .",
            "This observed pattern, as emphasized in  Corollary   2 , closely aligns with the results achieved in ( 13 ).",
            "Figure   2  presents a visual comparison between real and generated images, organized according to their respective labels. The real images were randomly sampled from the training set along with their corresponding labels, while the generated images were produced using these labels (conditions) and random seeds.",
            "Following the assumptions on the Jacobian determinant and    H  min + 1  superscript H subscript  1 \\varphi\\in\\mathcal{H}^{\\beta_{\\min}+1} italic_  caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT + 1 end_POSTSUPERSCRIPT , it follows that  | J   ( u ) | subscript J  u |J_{\\varphi}(\\mathbf{u})| | italic_J start_POSTSUBSCRIPT italic_ end_POSTSUBSCRIPT ( bold_u ) |  is bounded from above and below, and the map  u  | J   ( u ) | maps-to u subscript J  u \\mathbf{u}\\mapsto|J_{\\varphi}(\\mathbf{u})| bold_u  | italic_J start_POSTSUBSCRIPT italic_ end_POSTSUBSCRIPT ( bold_u ) |  belongs to  H  min superscript H subscript  \\mathcal{H}^{\\beta_{\\min}} caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT end_POSTSUPERSCRIPT . Therefore,  q ~ ~ q \\widetilde{q} over~ start_ARG italic_q end_ARG  is bounded above and below, belongs to  H  min  ( B 1  ( 0 d  ) ) superscript H subscript  subscript B 1 subscript 0 subscript d  \\mathcal{H}^{\\beta_{\\min}}({\\mathcal{B}}_{1}({0}_{\\mathsf{d}_{\\ast}})) caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( 0 start_POSTSUBSCRIPT sansserif_d start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUBSCRIPT ) ) . By  Lemma   2 , assuming   min   Z   X subscript  subscript  Z subscript  X \\beta_{\\min}\\leq\\beta_{Z}\\wedge\\beta_{X} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT  italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT , there exists  g  H  min + 1 g superscript H subscript  1 g\\in\\mathcal{H}^{\\beta_{{\\min}}+1} italic_g  caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT + 1 end_POSTSUPERSCRIPT  such that  Q ~ = Q g ~ Q subscript Q g \\widetilde{Q}=Q_{g} over~ start_ARG italic_Q end_ARG = italic_Q start_POSTSUBSCRIPT italic_g end_POSTSUBSCRIPT . Thus, we have  Q = Q g   Q subscript Q g  Q=Q_{g\\circ\\varphi} italic_Q = italic_Q start_POSTSUBSCRIPT italic_g  italic_ end_POSTSUBSCRIPT , where  g   : Z  X  Y : g   Z X Y g\\circ\\varphi:{\\mathcal{Z}}\\times{\\mathcal{X}}\\to{\\mathcal{Y}} italic_g  italic_ : caligraphic_Z  caligraphic_X  caligraphic_Y . Following  Lemma   4 , it is possible to find the appropriate neural network approximating them.",
            "With all the necessary tools at our disposal, we are ready to begin the construction of the desired map. We start by partitioning the measure on  Z  X Z X {\\mathcal{Z}}\\times{\\mathcal{X}} caligraphic_Z  caligraphic_X  into subsets with weights  {  k } k = 1 K superscript subscript subscript  k k 1 K \\{\\pi_{k}\\}_{k=1}^{K} { italic_ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT } start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT , denoted as  { V k } k = 1 K superscript subscript subscript V k k 1 K \\{\\mathcal{V}_{k}\\}_{k=1}^{K} { caligraphic_V start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT } start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_K end_POSTSUPERSCRIPT . By following a similar approach to the single chart scenario and utilizing  Lemma   2 , we obtain the push-forward maps  g k   k : V k  Z  X  U k  Y : subscript g k subscript  k subscript V k Z X  subscript U k Y g_{k}\\circ\\varphi_{k}:\\mathcal{V}_{k}\\subset{\\mathcal{Z}}\\times{\\mathcal{X}}% \\to U_{k}\\subset{\\mathcal{Y}} italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT  italic_ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT : caligraphic_V start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT  caligraphic_Z  caligraphic_X  italic_U start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT  caligraphic_Y , which transport the normalized measure from  V k subscript V k \\mathcal{V}_{k} caligraphic_V start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT  to the measure  Q k  subscript superscript Q  k Q^{\\prime}_{k} italic_Q start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT , corresponding to the density  q k  subscript superscript q  k q^{\\prime}_{k} italic_q start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT  for each  1  k  K 1 k K 1\\leq k\\leq K 1  italic_k  italic_K .",
            "and  | g 2  ( x , z )  g 1  ( x , z ) |    1 subscript subscript g 2 x z subscript g 1 x z subscript  1 |g_{2}(x,z)-g_{1}(x,z)|_{\\infty}\\leq\\eta_{1} | italic_g start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_x , italic_z ) - italic_g start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( italic_x , italic_z ) | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT . The change at ( 20 ) follows from     ( y  g 1  ( x , z ) )  ( 2     2 )  D subscript italic-  y subscript g 1 x z superscript 2  superscript  2 D \\phi_{\\sigma}(y-g_{1}(x,z))\\leq\\left(\\sqrt{2\\pi\\sigma^{2}}\\right)^{-D} italic_ start_POSTSUBSCRIPT italic_ end_POSTSUBSCRIPT ( italic_y - italic_g start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( italic_x , italic_z ) )  ( square-root start_ARG 2 italic_ italic_ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG ) start_POSTSUPERSCRIPT - italic_D end_POSTSUPERSCRIPT  and the bound",
            "The ( 22 ) follows from  1  e     1 superscript e   1-e^{-\\alpha}\\leq\\alpha 1 - italic_e start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  italic_ . The change at ( 23 ) follows from    1  ( y  g  ( x , z ) )  ( 2     1 2 )  D subscript italic- subscript  1 y g x z superscript 2  superscript subscript  1 2 D \\phi_{\\sigma_{1}}(y-g(x,z))\\leq\\left(\\sqrt{2\\pi\\sigma_{1}^{2}}\\right)^{-D} italic_ start_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT ( italic_y - italic_g ( italic_x , italic_z ) )  ( square-root start_ARG 2 italic_ italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG ) start_POSTSUPERSCRIPT - italic_D end_POSTSUPERSCRIPT  and",
            "Let   > 0  0 \\varepsilon>0 italic_ > 0 . Let  { g 1 , ... , g N 1 } subscript g 1 ... subscript g subscript N 1 \\{g_{1},\\ldots,g_{N_{1}}\\} { italic_g start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_g start_POSTSUBSCRIPT italic_N start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT }  be   1  limit-from subscript  1 \\eta_{1}- italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - covering of  F F \\mathcal{F} caligraphic_F  and  {  1 , ... ,  N 2 } subscript  1 ... subscript  subscript N 2 \\{\\sigma_{1},\\ldots,\\sigma_{N_{2}}\\} { italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_ start_POSTSUBSCRIPT italic_N start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_POSTSUBSCRIPT }  be   2  limit-from subscript  2 \\eta_{2}- italic_ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT - covering of  [  min ,  max ] subscript  subscript  \\left[\\sigma_{\\min},\\sigma_{\\max}\\right] [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with respect to   |  |    \\||\\cdot|_{\\infty}\\|_{\\infty}  |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  and  |  |  |\\cdot|_{\\infty} |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . By ( 21 ) and ( 24 ),   1 = c 1  1   min D + 2   / 4 subscript  1 superscript subscript c 1 1 superscript subscript  D 2  4 \\eta_{1}=c_{1}^{-1}\\sigma_{\\min}^{D+2}\\varepsilon/4 italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_D + 2 end_POSTSUPERSCRIPT italic_ / 4  and   2 = c 2  2   min D + 1   / 4 subscript  2 superscript subscript c 2 2 superscript subscript  D 1  4 \\eta_{2}=c_{2}^{-2}\\sigma_{\\min}^{D+1}\\varepsilon/4 italic_ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 2 end_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_D + 1 end_POSTSUPERSCRIPT italic_ / 4  implies",
            "where  c  (  max , K , D ) c subscript  K D c(\\sigma_{\\max},K,D) italic_c ( italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT , italic_K , italic_D )  is a constant. We use the fact that   min  { log  (  max /  min ) } D subscript  superscript subscript  subscript  D \\sigma_{\\min}\\{\\log(\\sigma_{\\max}/\\sigma_{\\min})\\}^{D} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT { roman_log ( italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT ) } start_POSTSUPERSCRIPT italic_D end_POSTSUPERSCRIPT  is bounded above by some constant depending only upon   max subscript  \\sigma_{\\max} italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT  as   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1 . Similar to ( 27 ), it is possible to write for all   >    subscript  \\delta>\\delta_{*} italic_ > italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT",
            "The result now follows directly ( 28 ) and ( 27 ) with ( 26 ).",
            "for every    2  c 3    / 2  2 subscript c 3 subscript  2 \\varepsilon\\leq\\sqrt{2}\\leq c_{3}\\delta_{*}/\\sqrt{2} italic_  square-root start_ARG 2 end_ARG  italic_c start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / square-root start_ARG 2 end_ARG , where  c 5 = c 5  ( c , C , c 3 ) subscript c 5 subscript c 5 c C subscript c 3 c_{5}=c_{5}(c,C,c_{3}) italic_c start_POSTSUBSCRIPT 5 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 5 end_POSTSUBSCRIPT ( italic_c , italic_C , italic_c start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT ) . Observe that  c 4  n   n 2 subscript c 4 n superscript subscript  n 2 c_{4}\\sqrt{n}\\varepsilon_{n}^{2} italic_c start_POSTSUBSCRIPT 4 end_POSTSUBSCRIPT square-root start_ARG italic_n end_ARG italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT  is upper bound to ( 29 ) and Eq. (3.1) of  Wong and Shen, ( 1995 )  is satisfied.",
            "It is suffice to assume that    \\varepsilon italic_  and     log    1 subscript  superscript  1 \\sigma_{*}\\sqrt{\\log\\varepsilon^{-1}} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT square-root start_ARG roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT end_ARG  are sufficiently small. If not, let   +    log    1  c 0  subscript  superscript  1 subscript c 0 \\varepsilon+\\sigma_{*}\\sqrt{\\log\\varepsilon^{-1}}\\geq c_{0} italic_ + italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT square-root start_ARG roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT end_ARG  italic_c start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , where  c 0  ( K , D , r  ) subscript c 0 K D subscript r  c_{0}(K,D,\\mathsf{r}_{\\ast}) italic_c start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT ( italic_K , italic_D , sansserif_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) . Then  Theorem   2  holds trivially by taking a large enough constant depending just on  D D D italic_D ,  K K K italic_K , and  r  subscript r  \\mathsf{r}_{\\ast} sansserif_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT .",
            "Following this and the  Theorem   2 , for the rate we have",
            "and with ( 32 ),"
        ]
    },
    "id_table_3": {
        "caption": "",
        "table": "A1.E16",
        "footnotes": [],
        "references": [
            "Here,  G   (  , x ) : Z  M x : subscript G  x  Z subscript M x G_{*}(\\cdot,x):{\\mathcal{Z}}\\to{\\mathcal{M}}_{x} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT (  , italic_x ) : caligraphic_Z  caligraphic_M start_POSTSUBSCRIPT italic_x end_POSTSUBSCRIPT  is the unknown generator function,  Z Z Z italic_Z  a latent variable with a known distribution  P Z subscript P Z P_{Z} italic_P start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT  and support  Z  R d Z superscript R d \\mathcal{Z}\\subset{\\mathbb{R}}^{\\mathfrak{d}} caligraphic_Z  blackboard_R start_POSTSUPERSCRIPT fraktur_d end_POSTSUPERSCRIPT  independent of the predictor  X X X italic_X . The existence of the generator  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  directly follows from Noise Outsourcing  Lemma   3 . This lemma enables the transfer of randomness into the covariate and an orthogonal (independent) component through a generating function for any regression response. We denote  M : =  x  X M x  R D {\\mathcal{M}}:\\,=\\cup_{x\\in{\\mathcal{X}}}{\\mathcal{M}}_{x}\\subset\\mathbb{R}^{D} caligraphic_M : =  start_POSTSUBSCRIPT italic_x  caligraphic_X end_POSTSUBSCRIPT caligraphic_M start_POSTSUBSCRIPT italic_x end_POSTSUBSCRIPT  blackboard_R start_POSTSUPERSCRIPT italic_D end_POSTSUPERSCRIPT  as the support of the image of  G   ( Z , X ) subscript G Z X G_{*}({\\mathcal{Z}},{\\mathcal{X}}) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( caligraphic_Z , caligraphic_X )  such as a (union of)  d d d italic_d -dimensional manifold. We model  G   (  ,  ) : Z  X  R d  R p  Y  R D : subscript G   Z X superscript R d superscript R p  Y superscript R D G_{*}(\\cdot,\\cdot):{\\mathcal{Z}}\\times{\\mathcal{X}}\\subset{\\mathbb{R}}^{% \\mathfrak{d}}\\times{\\mathbb{R}}^{\\mathfrak{p}}\\rightarrow\\mathcal{Y}\\subset{% \\mathbb{R}}^{D} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT (  ,  ) : caligraphic_Z  caligraphic_X  blackboard_R start_POSTSUPERSCRIPT fraktur_d end_POSTSUPERSCRIPT  blackboard_R start_POSTSUPERSCRIPT fraktur_p end_POSTSUPERSCRIPT  caligraphic_Y  blackboard_R start_POSTSUPERSCRIPT italic_D end_POSTSUPERSCRIPT  using a deep neural network, leading to a  conditional deep generative model  for ( 2 ).",
            "2  permits low intrinsic dimensionality within the learnable function class.  3  imposes the strong identifiability condition necessary for efficient estimation, as seen in manifold literature  (Aamari and Levrard,,  2019 ; Tang and Yang,,  2023 ) .",
            "Suppose that Assumption  3  holds. If  d H  ( p g ,  , p  )   subscript d H subscript p g  subscript p  d_{H}(p_{g,\\sigma},p_{*})\\leq\\varepsilon italic_d start_POSTSUBSCRIPT italic_H end_POSTSUBSCRIPT ( italic_p start_POSTSUBSCRIPT italic_g , italic_ end_POSTSUBSCRIPT , italic_p start_POSTSUBSCRIPT  end_POSTSUBSCRIPT )  italic_  holds for some    [ 0 , 1 ]  0 1 \\varepsilon\\in[0,1] italic_  [ 0 , 1 ]  and some  p g ,   P subscript p g  P p_{g,\\sigma}\\in{\\mathcal{P}} italic_p start_POSTSUBSCRIPT italic_g , italic_ end_POSTSUBSCRIPT  caligraphic_P , then we have",
            "Suppose that Assumption  1 ,  2 , and  3  hold, and     [  min ,  max ] subscript  subscript  subscript  \\sigma_{*}\\in[\\sigma_{\\min},\\sigma_{\\max}] italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with    = n   subscript  superscript n  \\sigma_{*}=n^{-\\alpha} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  and   min = n   subscript  superscript n  \\sigma_{\\min}=n^{-\\gamma} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  for some  0     0   0\\leq\\alpha\\leq\\gamma 0  italic_  italic_ . Then for each of the network architecture classes (sparse and fully connected) with the network parameters specified in  Corollary   1 , the sieve MLE  p ^ p  e  r subscript ^ p p e r \\widehat{p}_{per} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_p italic_e italic_r end_POSTSUBSCRIPT  and  Q ^ p  e  r subscript ^ Q p e r \\widehat{Q}_{per} over^ start_ARG italic_Q end_ARG start_POSTSUBSCRIPT italic_p italic_e italic_r end_POSTSUBSCRIPT  based on the perturbed data  { ( Y ~ j , X j ) } j = 1 n superscript subscript subscript ~ Y j subscript X j j 1 n \\{(\\widetilde{Y}_{j},X_{j})\\}_{j=1}^{n} { ( over~ start_ARG italic_Y end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_X start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) } start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT  satisfies",
            "In Appendix  K , we present a novel approximation result for the function class exhibiting  smoothness disparity  in  Theorem   5 . This new result facilitates the study of theoretical properties of estimators when the generator  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Note that such a function class defined in ( 16 ) in Appendix  K  is much broader compared to the smoothness class in Section  2.4.1  as  Z Z Z italic_Z  and  X X X italic_X  do not have to be jointly smooth and it allows for smoothness disparity among them. The subsequent  Theorem   3  combines our approximation result with ( 11 ) and enables us to specialize  Theorem   1  to this class (see  Appendix   I  for the proof).",
            "The proof of  Theorem   3  is provided in  Appendix   I . In the special case when   = 0  0 \\alpha=0 italic_ = 0  and  d = D d D {\\mathfrak{d}}=D fraktur_d = italic_D , our convergence rate in ( 14 ) recovers the minimax optimal rate for conditional density estimation based on kernel smoothing, as established in  Li et al., ( 2022 ) .",
            "This observed pattern, as emphasized in  Corollary   2 , closely aligns with the results achieved in ( 13 ).",
            "Many of the problems in the conditional setting have an analog in the joint setup. Our proposed approach has a direct statistical extension to this setup. The sufficiency of such extension follows from the observation in the subsequent  Lemma   3  which is based on Lemma 2.1 and Lemma 2.2 of  Zhou et al., ( 2022 )  (see also Theorem 5.10 of  Kallenberg, ( 1997 ) ).",
            "The ( 22 ) follows from  1  e     1 superscript e   1-e^{-\\alpha}\\leq\\alpha 1 - italic_e start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  italic_ . The change at ( 23 ) follows from    1  ( y  g  ( x , z ) )  ( 2     1 2 )  D subscript italic- subscript  1 y g x z superscript 2  superscript subscript  1 2 D \\phi_{\\sigma_{1}}(y-g(x,z))\\leq\\left(\\sqrt{2\\pi\\sigma_{1}^{2}}\\right)^{-D} italic_ start_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT ( italic_y - italic_g ( italic_x , italic_z ) )  ( square-root start_ARG 2 italic_ italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG ) start_POSTSUPERSCRIPT - italic_D end_POSTSUPERSCRIPT  and",
            "Since  | z  y | 2   subscript z y 2  |z-y|_{2}\\leq\\sigma | italic_z - italic_y | start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  italic_ , the right hand side is bounded below by a positive constant depending just on  D D D italic_D  which is again a contradiction to ( 30 ). This proves the assertion made in the theorem.",
            "We may also write ( 31 ) as a linear combination of monomials",
            "and with ( 32 ),",
            "All the constructed networks in this proof are of the form  F  ( L , p , s ) = F  ( L , p , s ,  ) F L p s F L p s \\mathcal{F}(L,\\mathbf{p},s)=\\mathcal{F}(L,\\mathbf{p},s,\\infty) caligraphic_F ( italic_L , bold_p , italic_s ) = caligraphic_F ( italic_L , bold_p , italic_s ,  )  with  F =  F F=\\infty italic_F =  . Denote  M 1 = M  ~ /  subscript M 1 superscript M ~   M_{1}=M^{\\widetilde{\\beta}/\\beta} italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_ end_ARG / italic_ end_POSTSUPERSCRIPT ,  M 2 = M  ~ /   subscript M 2 superscript M ~  subscript   M_{2}=M^{\\widetilde{\\beta}/\\beta_{\\prime}} italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_ end_ARG / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ,   sum =  +   subscript  sum  subscript   {\\beta_{\\mathrm{sum}}}=\\beta+\\beta_{\\prime} italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT = italic_ + italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and  r sum = r + r  subscript r sum r subscript r  {\\mathsf{r}_{\\mathrm{sum}}}=r+r_{\\prime} sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT = italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . Let  M M M italic_M  be the largest integer such that  M = ( M 1 + 1 ) r  ( M 2 + 1 ) r   N M superscript subscript M 1 1 r superscript subscript M 2 1 subscript r  N \\mathsf{M}=(M_{1}+1)^{r}(M_{2}+1)^{r_{\\prime}}\\leq N sansserif_M = ( italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  italic_N  and define  L  := ( m + 5 )   log 2  (  sum  r sum )  assign superscript L m 5 subscript 2 subscript  sum subscript r sum L^{*}:=(m+5)\\lceil\\log_{2}({\\beta_{\\mathrm{sum}}}\\vee{\\mathsf{r}_{\\mathrm{sum}% }})\\rceil italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT := ( italic_m + 5 )  roman_log start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT )  . Thanks to ( 34 ), ( 33 ) and Lemma  9 , we can add one hidden layer to the network  Mon m ,  sum r sum superscript subscript Mon m subscript  sum subscript r sum \\operatorname{Mon}_{m,{\\beta_{\\mathrm{sum}}}}^{\\mathsf{r}_{\\mathrm{sum}}} roman_Mon start_POSTSUBSCRIPT italic_m , italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  to obtain a network",
            "Next, we pair the  ( u l ( 1 ) , v l ( 2 ) ) subscript u superscript bold-l 1 subscript v superscript bold-l 2 (\\mathbf{u}_{{\\bm{\\ell}}^{(1)}},\\mathbf{v}_{{\\bm{\\ell}}^{(2)}}) ( bold_u start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , bold_v start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ) -th entry of the output of  Q 1 subscript Q 1 Q_{1} italic_Q start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT  and  Hat r superscript Hat r \\operatorname{Hat}^{r} roman_Hat start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT  and apply to each of the  M M \\mathsf{M} sansserif_M  pairs the  Mult m subscript Mult m \\operatorname{Mult}_{m} roman_Mult start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT  network described in Lemma  7 . In the last layer, we add all entries. By Lemma  7  this requires at most  24  ( m + 5 )  M + M  25  ( m + 5 )  N 24 m 5 M M 25 m 5 N 24(m+5)\\mathsf{M}+\\mathsf{M}\\leq 25(m+5)N 24 ( italic_m + 5 ) sansserif_M + sansserif_M  25 ( italic_m + 5 ) italic_N  active parameters for the  M M \\mathsf{M} sansserif_M  multiplications and the sum. Using Lemma  7 , Lemma  6 , ( 36 ) and triangle inequality, there exists a network  Q 2  F  ( 2 + L  + m + 6 , ( r sum , 6  ( r sum +   sum  )  N , ... , 6  ( r sum +   sum  )  N , 1 ) ) subscript Q 2 F 2 superscript L m 6 subscript r sum 6 subscript r sum subscript  sum N ... 6 subscript r sum subscript  sum N 1 Q_{2}\\in\\mathcal{F}(2+L^{*}+m+6,({\\mathsf{r}_{\\mathrm{sum}}},6({\\mathsf{r}_{% \\mathrm{sum}}}+\\lceil{\\beta_{\\mathrm{sum}}}\\rceil)N,\\ldots,6({\\mathsf{r}_{% \\mathrm{sum}}}+\\lceil{\\beta_{\\mathrm{sum}}}\\rceil)N,1)) italic_Q start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  caligraphic_F ( 2 + italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT + italic_m + 6 , ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT , 6 ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT +  italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  ) italic_N , ... , 6 ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT +  italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  ) italic_N , 1 ) )  such that for any  u  [ 0 , 1 ] r u superscript 0 1 r \\mathbf{u}\\in[0,1]^{r} bold_u  [ 0 , 1 ] start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT  and for any  v  [ 0 , 1 ] r  v superscript 0 1 subscript r  \\mathbf{v}\\in[0,1]^{r_{\\prime}} bold_v  [ 0 , 1 ] start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT",
            "Here, the first inequality follows from the fact that the support of  ( Hat r + r   ( u , v ) ) u l ( 1 ) , v l ( 2 ) subscript superscript Hat r subscript r  u v subscript u superscript l 1 subscript v superscript l 2 (\\operatorname{Hat}^{r+r_{\\prime}}(\\mathbf{u},\\mathbf{v}))_{\\mathbf{u}_{\\ell^{% (1)}},\\mathbf{v}_{\\ell^{(2)}}} ( roman_Hat start_POSTSUPERSCRIPT italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( bold_u , bold_v ) ) start_POSTSUBSCRIPT bold_u start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , bold_v start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT end_POSTSUBSCRIPT  is contained in the support of  (  j = 1 r ( 1 / M  | u ( j )  u l ( 1 ) ( j ) | ) +   j = 1 r  ( 1 / M  | v ( j )  v l ( 2 ) ( j ) | ) + ) superscript subscript product j 1 r subscript 1 M superscript u j subscript superscript u j superscript bold-l 1 superscript subscript product j 1 subscript r  subscript 1 M superscript v j subscript superscript v j superscript bold-l 2 \\left(\\prod_{j=1}^{r}(1/M-|u^{(j)}-u^{(j)}_{{\\bm{\\ell}}^{(1)}}|)_{+}\\prod_{j=1% }^{r_{\\prime}}(1/M-|v^{(j)}-v^{(j)}_{{\\bm{\\ell}}^{(2)}}|)_{+}\\right) (  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( 1 / italic_M - | italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( 1 / italic_M - | italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT )  (see Lemma  6 ). Because of ( 37 ), the network  Q 2 subscript Q 2 Q_{2} italic_Q start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  has at most",
            "Because of ( 38 ) and ( 35 ), there exists a network  Q 3 subscript Q 3 Q_{3} italic_Q start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT  in",
            "With ( 39 ), the number of non-zero parameters of  Q 3 subscript Q 3 Q_{3} italic_Q start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT  is bounded by"
        ]
    },
    "id_table_4": {
        "caption": "",
        "table": "A11.EGx1",
        "footnotes": [],
        "references": [
            "where  f j : ( a j , b j ) d j  ( a j + 1 , b j + 1 ) d j + 1 : subscript f j  superscript subscript a j subscript b j subscript d j superscript subscript a j 1 subscript b j 1 subscript d j 1 f_{j}:(a_{j},b_{j})^{d_{j}}\\to(a_{j+1},b_{j+1})^{d_{j+1}} italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT : ( italic_a start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_b start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  ( italic_a start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT , italic_b start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ,  d 0 = p + d subscript d 0 p d d_{0}={\\mathfrak{p}}+{\\mathfrak{d}} italic_d start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = fraktur_p + fraktur_d  and  d q + 1 = D subscript d q 1 D d_{q+1}=D italic_d start_POSTSUBSCRIPT italic_q + 1 end_POSTSUBSCRIPT = italic_D . Denote  f j = ( f j ( 1 ) , ... , f j ( d j + 1 ) ) subscript f j superscript subscript f j 1 ... superscript subscript f j subscript d j 1 f_{j}=(f_{j}^{(1)},\\ldots,f_{j}^{(d_{j+1})}) italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = ( italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT , ... , italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_d start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT )  as the components of  f j subscript f j f_{j} italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , let  t j subscript t j t_{j} italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  be the maximal number of variables on which each of the  f j ( i ) subscript superscript f i j f^{(i)}_{j} italic_f start_POSTSUPERSCRIPT ( italic_i ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  depends and let  f j ( i )  H  j  ( ( a j , b j ) t j , K ) subscript superscript f i j superscript H subscript  j superscript subscript a j subscript b j subscript t j K f^{(i)}_{j}\\in\\mathcal{H}^{\\beta_{j}}\\left((a_{j},b_{j})^{t_{j}},K\\right) italic_f start_POSTSUPERSCRIPT ( italic_i ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT  caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( ( italic_a start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_b start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUPERSCRIPT , italic_K )  (see Section  2.4.1  for the definition of the Holder class  H  superscript H  \\mathcal{H}^{\\beta} caligraphic_H start_POSTSUPERSCRIPT italic_ end_POSTSUPERSCRIPT ). A composite structure is very general which includes smooth functions and additive structure as special cases. In addition, in the next section, we show the class of conditional distributions  { Q G  (  | X = x ) : x  R p , G   G } \\left\\{Q_{G_{*}}(\\cdot|X=x):x\\in\\mathbb{R}^{\\mathfrak{p}},G_{*}\\in\\mathcal{G}\\right\\} { italic_Q start_POSTSUBSCRIPT italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUBSCRIPT (  | italic_X = italic_x ) : italic_x  blackboard_R start_POSTSUPERSCRIPT fraktur_p end_POSTSUPERSCRIPT , italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_G }  induced by the composite structure is broad.",
            "The approximation properties of the sparse and fully connected network are provided in  Lemma   4 .1 and  Lemma   4 .2 of the  Appendix   J , respectively.",
            "Having established the essential components for  F c subscript F c \\mathcal{F}_{c} caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT  in ( 11 ) and Lemma  4 .2, and for  F s subscript F s \\mathcal{F}_{s} caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  in ( 10 ) and Lemma  4 .1, respectively, we can simplify Theorem  1  and state Corollary  1 .",
            "In Appendix  K , we present a novel approximation result for the function class exhibiting  smoothness disparity  in  Theorem   5 . This new result facilitates the study of theoretical properties of estimators when the generator  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Note that such a function class defined in ( 16 ) in Appendix  K  is much broader compared to the smoothness class in Section  2.4.1  as  Z Z Z italic_Z  and  X X X italic_X  do not have to be jointly smooth and it allows for smoothness disparity among them. The subsequent  Theorem   3  combines our approximation result with ( 11 ) and enables us to specialize  Theorem   1  to this class (see  Appendix   I  for the proof).",
            "The proof of  Theorem   3  is provided in  Appendix   I . In the special case when   = 0  0 \\alpha=0 italic_ = 0  and  d = D d D {\\mathfrak{d}}=D fraktur_d = italic_D , our convergence rate in ( 14 ) recovers the minimax optimal rate for conditional density estimation based on kernel smoothing, as established in  Li et al., ( 2022 ) .",
            "We utilized the widely used MNIST dataset for two purposes: to demonstrate the generalizability of our approach to a benchmark image dataset where the intrinsic dimension  d d {\\mathfrak{d}} fraktur_d  is much lesser than the ambient dimension  D = 784 D 784 D=784 italic_D = 784  and to underscore the effectiveness of sparse networks as outlined in  Lemma   4 .1 and  Corollary   1 .1.",
            "Given that  Z Z Z italic_Z  and  X X X italic_X  is independent, the product measure on  Z  X Z X {\\mathcal{Z}}\\times{\\mathcal{X}} caligraphic_Z  caligraphic_X  is  p Z   X  subscript p Z superscript subscript  X p_{Z}\\mu_{X}^{*} italic_p start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT . Following the smoothness from  p Z subscript p Z p_{Z} italic_p start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT  and   X  superscript subscript  X \\mu_{X}^{*} italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT , the map  p Z  (  )   X   (  )  H min  {  Z ,  X }  ( Z  X ) subscript p Z  superscript subscript  X  superscript H subscript  Z subscript  X Z X p_{Z}(\\cdot)\\mu_{X}^{*}(\\cdot)\\in\\mathcal{H}^{\\min\\{\\beta_{Z},\\beta_{X}\\}}({% \\mathcal{Z}}\\times{\\mathcal{X}}) italic_p start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT (  ) italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT (  )  caligraphic_H start_POSTSUPERSCRIPT roman_min { italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT } end_POSTSUPERSCRIPT ( caligraphic_Z  caligraphic_X ) . This implies that  p Z  (  )   X   (  )  H min  {  Z ,  X ,  Q }  ( Z  X ) subscript p Z  superscript subscript  X  superscript H subscript  Z subscript  X subscript  Q Z X p_{Z}(\\cdot)\\mu_{X}^{*}(\\cdot)\\in\\mathcal{H}^{\\min\\{\\beta_{Z},\\beta_{X},\\beta_% {Q}\\}}({\\mathcal{Z}}\\times{\\mathcal{X}}) italic_p start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT (  ) italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT (  )  caligraphic_H start_POSTSUPERSCRIPT roman_min { italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_Q end_POSTSUBSCRIPT } end_POSTSUPERSCRIPT ( caligraphic_Z  caligraphic_X ) . Again  q   H  Q  ( Y ) subscript q superscript H subscript  Q Y q_{*}\\in\\mathcal{H}^{\\beta_{Q}}({\\mathcal{Y}}) italic_q start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Q end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Y )  implies  q   H min  {  Z ,  X ,  Q }  ( Y ) subscript q superscript H subscript  Z subscript  X subscript  Q Y q_{*}\\in\\mathcal{H}^{\\min\\{\\beta_{Z},\\beta_{X},\\beta_{Q}\\}}({\\mathcal{Y}}) italic_q start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUPERSCRIPT roman_min { italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_Q end_POSTSUBSCRIPT } end_POSTSUPERSCRIPT ( caligraphic_Y ) . The result now follows directly from  Theorem   4 .",
            "Following the assumptions on the Jacobian determinant and    H  min + 1  superscript H subscript  1 \\varphi\\in\\mathcal{H}^{\\beta_{\\min}+1} italic_  caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT + 1 end_POSTSUPERSCRIPT , it follows that  | J   ( u ) | subscript J  u |J_{\\varphi}(\\mathbf{u})| | italic_J start_POSTSUBSCRIPT italic_ end_POSTSUBSCRIPT ( bold_u ) |  is bounded from above and below, and the map  u  | J   ( u ) | maps-to u subscript J  u \\mathbf{u}\\mapsto|J_{\\varphi}(\\mathbf{u})| bold_u  | italic_J start_POSTSUBSCRIPT italic_ end_POSTSUBSCRIPT ( bold_u ) |  belongs to  H  min superscript H subscript  \\mathcal{H}^{\\beta_{\\min}} caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT end_POSTSUPERSCRIPT . Therefore,  q ~ ~ q \\widetilde{q} over~ start_ARG italic_q end_ARG  is bounded above and below, belongs to  H  min  ( B 1  ( 0 d  ) ) superscript H subscript  subscript B 1 subscript 0 subscript d  \\mathcal{H}^{\\beta_{\\min}}({\\mathcal{B}}_{1}({0}_{\\mathsf{d}_{\\ast}})) caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( 0 start_POSTSUBSCRIPT sansserif_d start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUBSCRIPT ) ) . By  Lemma   2 , assuming   min   Z   X subscript  subscript  Z subscript  X \\beta_{\\min}\\leq\\beta_{Z}\\wedge\\beta_{X} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT  italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT , there exists  g  H  min + 1 g superscript H subscript  1 g\\in\\mathcal{H}^{\\beta_{{\\min}}+1} italic_g  caligraphic_H start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT + 1 end_POSTSUPERSCRIPT  such that  Q ~ = Q g ~ Q subscript Q g \\widetilde{Q}=Q_{g} over~ start_ARG italic_Q end_ARG = italic_Q start_POSTSUBSCRIPT italic_g end_POSTSUBSCRIPT . Thus, we have  Q = Q g   Q subscript Q g  Q=Q_{g\\circ\\varphi} italic_Q = italic_Q start_POSTSUBSCRIPT italic_g  italic_ end_POSTSUBSCRIPT , where  g   : Z  X  Y : g   Z X Y g\\circ\\varphi:{\\mathcal{Z}}\\times{\\mathcal{X}}\\to{\\mathcal{Y}} italic_g  italic_ : caligraphic_Z  caligraphic_X  caligraphic_Y . Following  Lemma   4 , it is possible to find the appropriate neural network approximating them.",
            "Let   > 0  0 \\varepsilon>0 italic_ > 0 . Let  { g 1 , ... , g N 1 } subscript g 1 ... subscript g subscript N 1 \\{g_{1},\\ldots,g_{N_{1}}\\} { italic_g start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_g start_POSTSUBSCRIPT italic_N start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT }  be   1  limit-from subscript  1 \\eta_{1}- italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - covering of  F F \\mathcal{F} caligraphic_F  and  {  1 , ... ,  N 2 } subscript  1 ... subscript  subscript N 2 \\{\\sigma_{1},\\ldots,\\sigma_{N_{2}}\\} { italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_ start_POSTSUBSCRIPT italic_N start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_POSTSUBSCRIPT }  be   2  limit-from subscript  2 \\eta_{2}- italic_ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT - covering of  [  min ,  max ] subscript  subscript  \\left[\\sigma_{\\min},\\sigma_{\\max}\\right] [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with respect to   |  |    \\||\\cdot|_{\\infty}\\|_{\\infty}  |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  and  |  |  |\\cdot|_{\\infty} |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . By ( 21 ) and ( 24 ),   1 = c 1  1   min D + 2   / 4 subscript  1 superscript subscript c 1 1 superscript subscript  D 2  4 \\eta_{1}=c_{1}^{-1}\\sigma_{\\min}^{D+2}\\varepsilon/4 italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_D + 2 end_POSTSUPERSCRIPT italic_ / 4  and   2 = c 2  2   min D + 1   / 4 subscript  2 superscript subscript c 2 2 superscript subscript  D 1  4 \\eta_{2}=c_{2}^{-2}\\sigma_{\\min}^{D+1}\\varepsilon/4 italic_ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 2 end_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_D + 1 end_POSTSUPERSCRIPT italic_ / 4  implies",
            "The approximability of the sparse network is detailed in  Lemma   4 .1, which restates Lemma 5 from  Chae et al., ( 2023 ) . For the fully connected network,  Lemma   4 .2 demonstrates its approximation capabilities, derived directly from Theorem 2 and the proof of Theorem 1 in  Kohler and Langer, ( 2021 ) . Additionally, the inclusion of the class  G G \\mathcal{G} caligraphic_G  in the fully connected setup is supported by the discussion in Section 1 of  Kohler and Langer, ( 2020 ) .",
            "All the constructed networks in this proof are of the form  F  ( L , p , s ) = F  ( L , p , s ,  ) F L p s F L p s \\mathcal{F}(L,\\mathbf{p},s)=\\mathcal{F}(L,\\mathbf{p},s,\\infty) caligraphic_F ( italic_L , bold_p , italic_s ) = caligraphic_F ( italic_L , bold_p , italic_s ,  )  with  F =  F F=\\infty italic_F =  . Denote  M 1 = M  ~ /  subscript M 1 superscript M ~   M_{1}=M^{\\widetilde{\\beta}/\\beta} italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_ end_ARG / italic_ end_POSTSUPERSCRIPT ,  M 2 = M  ~ /   subscript M 2 superscript M ~  subscript   M_{2}=M^{\\widetilde{\\beta}/\\beta_{\\prime}} italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_ end_ARG / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ,   sum =  +   subscript  sum  subscript   {\\beta_{\\mathrm{sum}}}=\\beta+\\beta_{\\prime} italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT = italic_ + italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and  r sum = r + r  subscript r sum r subscript r  {\\mathsf{r}_{\\mathrm{sum}}}=r+r_{\\prime} sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT = italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . Let  M M M italic_M  be the largest integer such that  M = ( M 1 + 1 ) r  ( M 2 + 1 ) r   N M superscript subscript M 1 1 r superscript subscript M 2 1 subscript r  N \\mathsf{M}=(M_{1}+1)^{r}(M_{2}+1)^{r_{\\prime}}\\leq N sansserif_M = ( italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  italic_N  and define  L  := ( m + 5 )   log 2  (  sum  r sum )  assign superscript L m 5 subscript 2 subscript  sum subscript r sum L^{*}:=(m+5)\\lceil\\log_{2}({\\beta_{\\mathrm{sum}}}\\vee{\\mathsf{r}_{\\mathrm{sum}% }})\\rceil italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT := ( italic_m + 5 )  roman_log start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT )  . Thanks to ( 34 ), ( 33 ) and Lemma  9 , we can add one hidden layer to the network  Mon m ,  sum r sum superscript subscript Mon m subscript  sum subscript r sum \\operatorname{Mon}_{m,{\\beta_{\\mathrm{sum}}}}^{\\mathsf{r}_{\\mathrm{sum}}} roman_Mon start_POSTSUBSCRIPT italic_m , italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  to obtain a network"
        ]
    },
    "id_table_5": {
        "caption": "",
        "table": "A11.EGx2",
        "footnotes": [],
        "references": [
            "Denote  G = G  ( q , d , t ,  , K ) G G q d t  K \\mathcal{G}=\\mathcal{G}\\left(q,\\bm{d},\\bm{t},\\bm{\\beta},K\\right) caligraphic_G = caligraphic_G ( italic_q , bold_italic_d , bold_italic_t , bold_italic_ , italic_K )  as a collection of functions of form ( 5 ), where  d = ( d 0 , ... , d q + 1 ) d subscript d 0 ... subscript d q 1 \\bm{d}=(d_{0},\\ldots,d_{q+1}) bold_italic_d = ( italic_d start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , ... , italic_d start_POSTSUBSCRIPT italic_q + 1 end_POSTSUBSCRIPT ) ,  t = ( t 0 , ... , t q + 1 ) t subscript t 0 ... subscript t q 1 \\bm{t}=(t_{0},\\ldots,t_{q+1}) bold_italic_t = ( italic_t start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , ... , italic_t start_POSTSUBSCRIPT italic_q + 1 end_POSTSUBSCRIPT ) , and   = (  0 , ... ,  q + 1 )  subscript  0 ... subscript  q 1 \\bm{\\beta}=(\\beta_{0},\\ldots,\\beta_{q+1}) bold_italic_ = ( italic_ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , ... , italic_ start_POSTSUBSCRIPT italic_q + 1 end_POSTSUBSCRIPT ) . We regard  ( q , d , t ,  , K ) q d t  K (q,\\bm{d},\\bm{t},\\bm{\\beta},K) ( italic_q , bold_italic_d , bold_italic_t , bold_italic_ , italic_K )  as constants in our setup, and assume that the true generator  G   (  , x ) subscript G  x G_{*}(\\cdot,x) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT (  , italic_x )  as in ( 2 ) belongs to  G G \\mathcal{G} caligraphic_G , for all  x  X x X x\\in{\\mathcal{X}} italic_x  caligraphic_X . Additionally, we assume   | G  |     K subscript norm subscript subscript G K \\||G_{*}|_{\\infty}\\|_{\\infty}\\leq K  | italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_K .",
            "In Appendix  K , we present a novel approximation result for the function class exhibiting  smoothness disparity  in  Theorem   5 . This new result facilitates the study of theoretical properties of estimators when the generator  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Note that such a function class defined in ( 16 ) in Appendix  K  is much broader compared to the smoothness class in Section  2.4.1  as  Z Z Z italic_Z  and  X X X italic_X  do not have to be jointly smooth and it allows for smoothness disparity among them. The subsequent  Theorem   3  combines our approximation result with ( 11 ) and enables us to specialize  Theorem   1  to this class (see  Appendix   I  for the proof).",
            "With  m =  log 2  ( n )  m subscript 2 n m=\\lceil\\log_{2}(n)\\rceil italic_m =  roman_log start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_n )   and  N = ( n (  Z  1  d +  X  1  p )  [ 1 +   (  Z  1  d +  X  1  p ) ] / [ 2 +  Z  1  d +  X  1  p ] ) N superscript n superscript subscript  Z 1 d superscript subscript  X 1 p delimited-[] 1  superscript subscript  Z 1 d superscript subscript  X 1 p delimited-[] 2 superscript subscript  Z 1 d superscript subscript  X 1 p N=\\left(n^{(\\beta_{Z}^{-1}d+\\beta_{X}^{-1}p)\\left[1+\\alpha(\\beta_{Z}^{-1}d+% \\beta_{X}^{-1}p)\\right]/\\left[2+\\beta_{Z}^{-1}d+\\beta_{X}^{-1}p\\right]}\\right) italic_N = ( italic_n start_POSTSUPERSCRIPT ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_p ) [ 1 + italic_ ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_p ) ] / [ 2 + italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_p ] end_POSTSUPERSCRIPT )  in  Theorem   5 , we can find a network  G G G italic_G  with the mentioned architecture such that",
            "We denote   ~ = (  +   )  1      ~  superscript  subscript   1  subscript   \\widetilde{\\beta}=(\\beta+\\beta_{\\prime})^{-1}\\beta\\beta_{\\prime} over~ start_ARG italic_ end_ARG = ( italic_ + italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_ italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  and  r ~ = (  +   )  1  ( r   + r     ) ~ r superscript  subscript   1 r  subscript r  subscript   \\widetilde{r}=(\\beta+\\beta_{\\prime})^{-1}(r\\beta+r_{\\prime}\\beta_{\\prime}) over~ start_ARG italic_r end_ARG = ( italic_ + italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ( italic_r italic_ + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) . Before presenting the proof of  Theorem   5 , we formulate some required results.",
            "Because of ( 38 ) and ( 35 ), there exists a network  Q 3 subscript Q 3 Q_{3} italic_Q start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT  in",
            "Observe that by construction  M = ( M 1 + 1 ) r  ( M 2 + 1 ) r   N  ( 3  M 1 ) r  ( 3  M 2 ) r  = 3 r sum  M r ~ M superscript subscript M 1 1 r superscript subscript M 2 1 subscript r  N superscript 3 subscript M 1 r superscript 3 subscript M 2 subscript r  superscript 3 subscript r sum superscript M ~ r \\mathsf{M}=(M_{1}+1)^{r}(M_{2}+1)^{r_{\\prime}}\\leq N\\leq(3M_{1})^{r}(3M_{2})^{% r_{\\prime}}=3^{\\mathsf{r}_{\\mathrm{sum}}}M^{\\widetilde{r}} sansserif_M = ( italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  italic_N  ( 3 italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( 3 italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT = 3 start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUPERSCRIPT italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_r end_ARG end_POSTSUPERSCRIPT  and hence  M   ~  N   ~ / r ~  3 r sum   ~ / r ~ . superscript M ~  superscript N ~  ~ r superscript 3 subscript r sum ~  ~ r M^{-\\widetilde{\\beta}}\\leq N^{-\\widetilde{\\beta}/\\widetilde{r}}3^{{\\mathsf{r}_% {\\mathrm{sum}}}\\widetilde{\\beta}/\\widetilde{r}}. italic_M start_POSTSUPERSCRIPT - over~ start_ARG italic_ end_ARG end_POSTSUPERSCRIPT  italic_N start_POSTSUPERSCRIPT - over~ start_ARG italic_ end_ARG / over~ start_ARG italic_r end_ARG end_POSTSUPERSCRIPT 3 start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT over~ start_ARG italic_ end_ARG / over~ start_ARG italic_r end_ARG end_POSTSUPERSCRIPT .  Together with Lemma  5 , the result follows.",
            "The following technical lemmas are required for the proof of  Theorem   5 .  Lemma   7 ,  Lemma   8 , and  Lemma   9  restate Lemma A.2, Lemma A.3, and Lemma A.4 from  Schmidt-Hieber, ( 2020 ) , respectively."
        ]
    },
    "id_table_6": {
        "caption": "",
        "table": "A11.EGx3",
        "footnotes": [],
        "references": [
            "In Appendix  K , we present a novel approximation result for the function class exhibiting  smoothness disparity  in  Theorem   5 . This new result facilitates the study of theoretical properties of estimators when the generator  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Note that such a function class defined in ( 16 ) in Appendix  K  is much broader compared to the smoothness class in Section  2.4.1  as  Z Z Z italic_Z  and  X X X italic_X  do not have to be jointly smooth and it allows for smoothness disparity among them. The subsequent  Theorem   3  combines our approximation result with ( 11 ) and enables us to specialize  Theorem   1  to this class (see  Appendix   I  for the proof).",
            "The result now follows directly ( 28 ) and ( 27 ) with ( 26 ).",
            "Recall that the network  Hat r sum superscript Hat subscript r sum \\operatorname{Hat}^{\\mathsf{r}_{\\mathrm{sum}}} roman_Hat start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  computes the products of hat functions (splines)  (  j = 1 r ( 1 / M 1  | u ( j )  u l ( 1 ) | ) + )  (  j = 1 r  ( 1 / M 2  | v ( j )  v l ( 2 ) | ) + ) superscript subscript product j 1 r subscript 1 subscript M 1 superscript u j subscript u superscript bold-l 1 superscript subscript product j 1 subscript r  subscript 1 subscript M 2 superscript v j subscript v superscript bold-l 2 (\\prod_{j=1}^{r}(1/M_{1}-|u^{(j)}-u_{{\\bm{\\ell}}^{(1)}}|)_{+})(\\prod_{j=1}^{r_% {\\prime}}(1/M_{2}-|v^{(j)}-v_{{\\bm{\\ell}}^{(2)}}|)_{+}) (  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( 1 / italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - | italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_u start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT ) (  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( 1 / italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT - | italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_v start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT )  up to an error that is bounded by  r sum 2  2  m . subscript superscript r 2 sum superscript 2 m \\mathsf{r}^{2}_{\\mathrm{sum}}2^{-m}. sansserif_r start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT 2 start_POSTSUPERSCRIPT - italic_m end_POSTSUPERSCRIPT .  It requires at most  37  r sum 2  N  L  37 subscript superscript r 2 sum N superscript L  37\\mathsf{r}^{2}_{\\mathrm{sum}}NL^{\\ast} 37 sansserif_r start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT italic_N italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  active parameters. Observe that  C r sum ,  sum  (  sum + 1 ) r sum  N subscript C subscript r sum subscript  sum superscript subscript  sum 1 subscript r sum N C_{{\\mathsf{r}_{\\mathrm{sum}}},{\\beta_{\\mathrm{sum}}}}\\leq({\\beta_{\\mathrm{sum% }}}+1)^{\\mathsf{r}_{\\mathrm{sum}}}\\leq N italic_C start_POSTSUBSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUBSCRIPT  ( italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  italic_N  by the definition of  C r ,  subscript C r  C_{r,\\beta} italic_C start_POSTSUBSCRIPT italic_r , italic_ end_POSTSUBSCRIPT  and the assumptions on  N . N N. italic_N .  By Lemma  6 , the networks  Q 1 subscript Q 1 Q_{1} italic_Q start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT  and  Hat r sum superscript Hat subscript r sum \\operatorname{Hat}^{\\mathsf{r}_{\\mathrm{sum}}} roman_Hat start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  can be embedded into a joint parallel network  ( Q 1 , Hat r sum ) subscript Q 1 superscript Hat subscript r sum (Q_{1},\\operatorname{Hat}^{\\mathsf{r}_{\\mathrm{sum}}}) ( italic_Q start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , roman_Hat start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUPERSCRIPT )  with  2 + L  2 superscript L 2+L^{*} 2 + italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  hidden layers of size  ( r sum , 6  ( r sum +   sum  )  N , ... , 6  ( r sum +   sum  )  N , 2  M ) subscript r sum 6 subscript r sum subscript  sum N ... 6 subscript r sum subscript  sum N 2 M ({\\mathsf{r}_{\\mathrm{sum}}},6({\\mathsf{r}_{\\mathrm{sum}}}+\\lceil{\\beta_{% \\mathrm{sum}}}\\rceil)N,\\ldots,6({\\mathsf{r}_{\\mathrm{sum}}}+\\lceil{\\beta_{% \\mathrm{sum}}}\\rceil)N,2\\mathsf{M}) ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT , 6 ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT +  italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  ) italic_N , ... , 6 ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT +  italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  ) italic_N , 2 sansserif_M ) . Using  C r ,   ( M + 1 ) r  N subscript C r  superscript M 1 r N C_{r,\\beta}\\vee(M+1)^{r}\\leq N italic_C start_POSTSUBSCRIPT italic_r , italic_ end_POSTSUBSCRIPT  ( italic_M + 1 ) start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT  italic_N  again, the number of non-zero parameters in the combined network  ( Q 1 , Hat r ) subscript Q 1 superscript Hat r (Q_{1},\\operatorname{Hat}^{r}) ( italic_Q start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , roman_Hat start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT )  is bounded by",
            "Next, we pair the  ( u l ( 1 ) , v l ( 2 ) ) subscript u superscript bold-l 1 subscript v superscript bold-l 2 (\\mathbf{u}_{{\\bm{\\ell}}^{(1)}},\\mathbf{v}_{{\\bm{\\ell}}^{(2)}}) ( bold_u start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , bold_v start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ) -th entry of the output of  Q 1 subscript Q 1 Q_{1} italic_Q start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT  and  Hat r superscript Hat r \\operatorname{Hat}^{r} roman_Hat start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT  and apply to each of the  M M \\mathsf{M} sansserif_M  pairs the  Mult m subscript Mult m \\operatorname{Mult}_{m} roman_Mult start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT  network described in Lemma  7 . In the last layer, we add all entries. By Lemma  7  this requires at most  24  ( m + 5 )  M + M  25  ( m + 5 )  N 24 m 5 M M 25 m 5 N 24(m+5)\\mathsf{M}+\\mathsf{M}\\leq 25(m+5)N 24 ( italic_m + 5 ) sansserif_M + sansserif_M  25 ( italic_m + 5 ) italic_N  active parameters for the  M M \\mathsf{M} sansserif_M  multiplications and the sum. Using Lemma  7 , Lemma  6 , ( 36 ) and triangle inequality, there exists a network  Q 2  F  ( 2 + L  + m + 6 , ( r sum , 6  ( r sum +   sum  )  N , ... , 6  ( r sum +   sum  )  N , 1 ) ) subscript Q 2 F 2 superscript L m 6 subscript r sum 6 subscript r sum subscript  sum N ... 6 subscript r sum subscript  sum N 1 Q_{2}\\in\\mathcal{F}(2+L^{*}+m+6,({\\mathsf{r}_{\\mathrm{sum}}},6({\\mathsf{r}_{% \\mathrm{sum}}}+\\lceil{\\beta_{\\mathrm{sum}}}\\rceil)N,\\ldots,6({\\mathsf{r}_{% \\mathrm{sum}}}+\\lceil{\\beta_{\\mathrm{sum}}}\\rceil)N,1)) italic_Q start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  caligraphic_F ( 2 + italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT + italic_m + 6 , ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT , 6 ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT +  italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  ) italic_N , ... , 6 ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT +  italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  ) italic_N , 1 ) )  such that for any  u  [ 0 , 1 ] r u superscript 0 1 r \\mathbf{u}\\in[0,1]^{r} bold_u  [ 0 , 1 ] start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT  and for any  v  [ 0 , 1 ] r  v superscript 0 1 subscript r  \\mathbf{v}\\in[0,1]^{r_{\\prime}} bold_v  [ 0 , 1 ] start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT",
            "Here, the first inequality follows from the fact that the support of  ( Hat r + r   ( u , v ) ) u l ( 1 ) , v l ( 2 ) subscript superscript Hat r subscript r  u v subscript u superscript l 1 subscript v superscript l 2 (\\operatorname{Hat}^{r+r_{\\prime}}(\\mathbf{u},\\mathbf{v}))_{\\mathbf{u}_{\\ell^{% (1)}},\\mathbf{v}_{\\ell^{(2)}}} ( roman_Hat start_POSTSUPERSCRIPT italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( bold_u , bold_v ) ) start_POSTSUBSCRIPT bold_u start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , bold_v start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT end_POSTSUBSCRIPT  is contained in the support of  (  j = 1 r ( 1 / M  | u ( j )  u l ( 1 ) ( j ) | ) +   j = 1 r  ( 1 / M  | v ( j )  v l ( 2 ) ( j ) | ) + ) superscript subscript product j 1 r subscript 1 M superscript u j subscript superscript u j superscript bold-l 1 superscript subscript product j 1 subscript r  subscript 1 M superscript v j subscript superscript v j superscript bold-l 2 \\left(\\prod_{j=1}^{r}(1/M-|u^{(j)}-u^{(j)}_{{\\bm{\\ell}}^{(1)}}|)_{+}\\prod_{j=1% }^{r_{\\prime}}(1/M-|v^{(j)}-v^{(j)}_{{\\bm{\\ell}}^{(2)}}|)_{+}\\right) (  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( 1 / italic_M - | italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( 1 / italic_M - | italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT )  (see Lemma  6 ). Because of ( 37 ), the network  Q 2 subscript Q 2 Q_{2} italic_Q start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  has at most"
        ]
    },
    "id_table_7": {
        "caption": "",
        "table": "A11.EGx4",
        "footnotes": [],
        "references": [
            "Let  F s = F s  ( L , r , s , B , K ) subscript F s subscript F s L r s B K \\mathcal{F}_{s}=\\mathcal{F}_{s}\\left(L,r,s,B,K\\right) caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT = caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ( italic_L , italic_r , italic_s , italic_B , italic_K )  with    =    ( D ) subscript  subscript  D \\delta_{*}=\\delta_{*}(D) italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_D )  be as given in  Lemma   1 , and  L  log   approx  1 asymptotically-equals L subscript superscript  1 approx L\\asymp\\log\\delta^{-1}_{\\operatorname*{approx}} italic_L  roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  r   approx  t  /   asymptotically-equals r subscript superscript  subscript t subscript  approx r\\asymp\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}} italic_r  italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  s   approx  t  /    log   approx  1 asymptotically-equals s subscript superscript  subscript t subscript  approx subscript superscript  1 approx s\\asymp\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}}\\log\\delta^{-1}_{% \\operatorname*{approx}} italic_s  italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  B   approx  1 asymptotically-equals B subscript superscript  1 approx B\\asymp\\delta^{-1}_{\\operatorname*{approx}} italic_B  italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . Then the sieve MLE  p ^ s subscript ^ p s \\widehat{p}_{s} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  satisfies ( 7 ) with   n  superscript subscript  n \\varepsilon_{n}^{*} italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  as in ( 8 ) with   =  approx  t  /    log 2  (  approx  1 )  subscript superscript  subscript t subscript  approx superscript 2 subscript superscript  1 approx \\xi=\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}}\\log^{2}(\\delta^{-1}_{% \\operatorname*{approx}}) italic_ = italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  and  A = log 2  (  approx  1 ) A superscript 2 subscript superscript  1 approx A=\\log^{2}(\\delta^{-1}_{\\operatorname*{approx}}) italic_A = roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  provided that   n  n   n  2 / 6 subscript  n n subscript superscript  absent 2 n 6 \\eta_{n}\\leq n\\varepsilon^{*2}_{n}/6 italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n italic_ start_POSTSUPERSCRIPT  2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT / 6  and   n   2    subscript superscript  n 2 subscript  \\varepsilon^{*}_{n}\\leq\\sqrt{2}\\delta_{*} italic_ start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  square-root start_ARG 2 end_ARG italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT .",
            "Let  F c = F c  ( L , r , B , K ) subscript F c subscript F c L r B K \\mathcal{F}_{c}=\\mathcal{F}_{c}\\left(L,r,B,K\\right) caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT = caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT ( italic_L , italic_r , italic_B , italic_K )  with    =    ( D ) subscript  subscript  D \\delta_{*}=\\delta_{*}(D) italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_D )  be as given in  Lemma   1 , and  L  log   approx  1 asymptotically-equals L subscript superscript  1 approx L\\asymp\\log\\delta^{-1}_{\\operatorname*{approx}} italic_L  roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  r   approx  t  / 2    asymptotically-equals r subscript superscript  subscript t 2 subscript  approx r\\asymp\\delta^{-t_{*}/2\\beta_{*}}_{\\operatorname*{approx}} italic_r  italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / 2 italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  B   approx  1 asymptotically-equals B subscript superscript  1 approx B\\asymp\\delta^{-1}_{\\operatorname*{approx}} italic_B  italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . Then the sieve MLE  p ^ c subscript ^ p c \\widehat{p}_{c} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT  satisfies ( 7 ) with   n  superscript subscript  n \\varepsilon_{n}^{*} italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  as in ( 8 ) with   =  approx  t  /    log 2  (  approx  1 )  subscript superscript  subscript t subscript  approx superscript 2 subscript superscript  1 approx \\xi=\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}}\\log^{2}(\\delta^{-1}_{% \\operatorname*{approx}}) italic_ = italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  and  A = log 2  (  approx  1 ) A superscript 2 subscript superscript  1 approx A=\\log^{2}(\\delta^{-1}_{\\operatorname*{approx}}) italic_A = roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  provided that   n  n   n  2 / 6 subscript  n n subscript superscript  absent 2 n 6 \\eta_{n}\\leq n\\varepsilon^{*2}_{n}/6 italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n italic_ start_POSTSUPERSCRIPT  2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT / 6  and   n   2    subscript superscript  n 2 subscript  \\varepsilon^{*}_{n}\\leq\\sqrt{2}\\delta_{*} italic_ start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  square-root start_ARG 2 end_ARG italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT .",
            "Let  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Suppose that Assumption  1  holds and     [  min ,  max ] subscript  subscript  subscript  \\sigma_{*}\\in\\left[\\sigma_{\\min},\\sigma_{\\max}\\right] italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1  and   max <  subscript  \\sigma_{\\max}<\\infty italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT <  . Moreover, we assume     n   asymptotically-equals subscript  superscript n  \\sigma_{*}\\asymp n^{-\\alpha} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT , and   min = n   subscript  superscript n  \\sigma_{\\min}=n^{-\\gamma} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  for some  0      (  Z  1  d +  X  1  p )  1 0   superscript superscript subscript  Z 1 d superscript subscript  X 1 p 1 0\\leq\\alpha\\leq\\gamma\\leq(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{% \\mathfrak{p}})^{-1} 0  italic_  italic_  ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT . Then, for every   approx  [ 0 , 1 ] subscript  approx 0 1 \\delta_{\\operatorname*{approx}}\\in[0,1] italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT  [ 0 , 1 ] , we have: Let  F s = F s  ( L , r , s , 1 , K ) subscript F s subscript F s L r s 1 K \\mathcal{F}_{s}=\\mathcal{F}_{s}\\left(L,r,s,1,K\\right) caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT = caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ( italic_L , italic_r , italic_s , 1 , italic_K )  with  L  log   approx  1 asymptotically-equals L subscript superscript  1 approx L\\asymp\\log\\delta^{-1}_{\\operatorname*{approx}} italic_L  roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  r   approx  (  Z  1  d +  X  1  p ) asymptotically-equals r subscript superscript  superscript subscript  Z 1 d superscript subscript  X 1 p approx r\\asymp\\delta^{-(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}})}_{% \\operatorname*{approx}} italic_r  italic_ start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  s   approx  (  Z  1  d +  X  1  p )  log   approx  1 asymptotically-equals s subscript superscript  superscript subscript  Z 1 d superscript subscript  X 1 p approx subscript superscript  1 approx s\\asymp\\delta^{-(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}})}_{% \\operatorname*{approx}}\\log\\delta^{-1}_{\\operatorname*{approx}} italic_s  italic_ start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . Then the sieve MLE  p ^ s subscript ^ p s \\widehat{p}_{s} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  satisfies ( 7 ) with the rate outlined in ( 8 ) with   =  approx  (  Z  1  d +  X  1  p )  log 2   approx  1  subscript superscript  superscript subscript  Z 1 d superscript subscript  X 1 p approx superscript 2 subscript superscript  1 approx \\xi=\\delta^{-(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}})}_{% \\operatorname*{approx}}\\log^{2}\\delta^{-1}_{\\operatorname*{approx}} italic_ = italic_ start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT  and  A = log 2   approx  1 A superscript 2 subscript superscript  1 approx A=\\log^{2}\\delta^{-1}_{\\operatorname*{approx}} italic_A = roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT , provided that   n  n   n  2 / 6 subscript  n n subscript superscript  absent 2 n 6 \\eta_{n}\\leq n\\varepsilon^{*2}_{n}/6 italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n italic_ start_POSTSUPERSCRIPT  2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT / 6 . In particular, choosing   approx := (   2 / n ) 1 / ( 2 +  Z  1  d +  X  1  p )  1 assign subscript  approx superscript superscript subscript  2 n 1 2 superscript subscript  Z 1 d superscript subscript  X 1 p 1 \\delta_{\\operatorname*{approx}}:=\\left(\\sigma_{*}^{2}/n\\right)^{1/\\left(2+% \\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}}\\right)}\\leq 1 italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT := ( italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_n ) start_POSTSUPERSCRIPT 1 / ( 2 + italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT  1  minimizes   n     { A + log  ( n /  min ) } / n   approx /   asymptotically-equals superscript subscript  n  A n subscript  n subscript  approx subscript  \\varepsilon_{n}^{*}\\asymp\\sqrt{\\xi\\left\\{A+\\log\\left(n/\\sigma_{\\min}\\right)% \\right\\}/n}\\vee\\delta_{\\operatorname*{approx}}/\\sigma_{*} italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  square-root start_ARG italic_ { italic_A + roman_log ( italic_n / italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT ) } / italic_n end_ARG  italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and gives",
            "Moreover, the condition ( 17 ) is equivalent of",
            "where  c  (  max , K , D ) c subscript  K D c(\\sigma_{\\max},K,D) italic_c ( italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT , italic_K , italic_D )  is a constant. We use the fact that   min  { log  (  max /  min ) } D subscript  superscript subscript  subscript  D \\sigma_{\\min}\\{\\log(\\sigma_{\\max}/\\sigma_{\\min})\\}^{D} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT { roman_log ( italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT ) } start_POSTSUPERSCRIPT italic_D end_POSTSUPERSCRIPT  is bounded above by some constant depending only upon   max subscript  \\sigma_{\\max} italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT  as   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1 . Similar to ( 27 ), it is possible to write for all   >    subscript  \\delta>\\delta_{*} italic_ > italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT",
            "The result now follows directly ( 28 ) and ( 27 ) with ( 26 ).",
            "Next, we pair the  ( u l ( 1 ) , v l ( 2 ) ) subscript u superscript bold-l 1 subscript v superscript bold-l 2 (\\mathbf{u}_{{\\bm{\\ell}}^{(1)}},\\mathbf{v}_{{\\bm{\\ell}}^{(2)}}) ( bold_u start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , bold_v start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ) -th entry of the output of  Q 1 subscript Q 1 Q_{1} italic_Q start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT  and  Hat r superscript Hat r \\operatorname{Hat}^{r} roman_Hat start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT  and apply to each of the  M M \\mathsf{M} sansserif_M  pairs the  Mult m subscript Mult m \\operatorname{Mult}_{m} roman_Mult start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT  network described in Lemma  7 . In the last layer, we add all entries. By Lemma  7  this requires at most  24  ( m + 5 )  M + M  25  ( m + 5 )  N 24 m 5 M M 25 m 5 N 24(m+5)\\mathsf{M}+\\mathsf{M}\\leq 25(m+5)N 24 ( italic_m + 5 ) sansserif_M + sansserif_M  25 ( italic_m + 5 ) italic_N  active parameters for the  M M \\mathsf{M} sansserif_M  multiplications and the sum. Using Lemma  7 , Lemma  6 , ( 36 ) and triangle inequality, there exists a network  Q 2  F  ( 2 + L  + m + 6 , ( r sum , 6  ( r sum +   sum  )  N , ... , 6  ( r sum +   sum  )  N , 1 ) ) subscript Q 2 F 2 superscript L m 6 subscript r sum 6 subscript r sum subscript  sum N ... 6 subscript r sum subscript  sum N 1 Q_{2}\\in\\mathcal{F}(2+L^{*}+m+6,({\\mathsf{r}_{\\mathrm{sum}}},6({\\mathsf{r}_{% \\mathrm{sum}}}+\\lceil{\\beta_{\\mathrm{sum}}}\\rceil)N,\\ldots,6({\\mathsf{r}_{% \\mathrm{sum}}}+\\lceil{\\beta_{\\mathrm{sum}}}\\rceil)N,1)) italic_Q start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  caligraphic_F ( 2 + italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT + italic_m + 6 , ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT , 6 ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT +  italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  ) italic_N , ... , 6 ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT +  italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  ) italic_N , 1 ) )  such that for any  u  [ 0 , 1 ] r u superscript 0 1 r \\mathbf{u}\\in[0,1]^{r} bold_u  [ 0 , 1 ] start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT  and for any  v  [ 0 , 1 ] r  v superscript 0 1 subscript r  \\mathbf{v}\\in[0,1]^{r_{\\prime}} bold_v  [ 0 , 1 ] start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT",
            "Here, the first inequality follows from the fact that the support of  ( Hat r + r   ( u , v ) ) u l ( 1 ) , v l ( 2 ) subscript superscript Hat r subscript r  u v subscript u superscript l 1 subscript v superscript l 2 (\\operatorname{Hat}^{r+r_{\\prime}}(\\mathbf{u},\\mathbf{v}))_{\\mathbf{u}_{\\ell^{% (1)}},\\mathbf{v}_{\\ell^{(2)}}} ( roman_Hat start_POSTSUPERSCRIPT italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( bold_u , bold_v ) ) start_POSTSUBSCRIPT bold_u start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , bold_v start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT end_POSTSUBSCRIPT  is contained in the support of  (  j = 1 r ( 1 / M  | u ( j )  u l ( 1 ) ( j ) | ) +   j = 1 r  ( 1 / M  | v ( j )  v l ( 2 ) ( j ) | ) + ) superscript subscript product j 1 r subscript 1 M superscript u j subscript superscript u j superscript bold-l 1 superscript subscript product j 1 subscript r  subscript 1 M superscript v j subscript superscript v j superscript bold-l 2 \\left(\\prod_{j=1}^{r}(1/M-|u^{(j)}-u^{(j)}_{{\\bm{\\ell}}^{(1)}}|)_{+}\\prod_{j=1% }^{r_{\\prime}}(1/M-|v^{(j)}-v^{(j)}_{{\\bm{\\ell}}^{(2)}}|)_{+}\\right) (  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( 1 / italic_M - | italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( 1 / italic_M - | italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT )  (see Lemma  6 ). Because of ( 37 ), the network  Q 2 subscript Q 2 Q_{2} italic_Q start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  has at most",
            "The following technical lemmas are required for the proof of  Theorem   5 .  Lemma   7 ,  Lemma   8 , and  Lemma   9  restate Lemma A.2, Lemma A.3, and Lemma A.4 from  Schmidt-Hieber, ( 2020 ) , respectively."
        ]
    },
    "id_table_8": {
        "caption": "",
        "table": "A11.EGx5",
        "footnotes": [],
        "references": [
            "Let  F s = F s  ( L , r , s , B , K ) subscript F s subscript F s L r s B K \\mathcal{F}_{s}=\\mathcal{F}_{s}\\left(L,r,s,B,K\\right) caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT = caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ( italic_L , italic_r , italic_s , italic_B , italic_K )  with    =    ( D ) subscript  subscript  D \\delta_{*}=\\delta_{*}(D) italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_D )  be as given in  Lemma   1 , and  L  log   approx  1 asymptotically-equals L subscript superscript  1 approx L\\asymp\\log\\delta^{-1}_{\\operatorname*{approx}} italic_L  roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  r   approx  t  /   asymptotically-equals r subscript superscript  subscript t subscript  approx r\\asymp\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}} italic_r  italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  s   approx  t  /    log   approx  1 asymptotically-equals s subscript superscript  subscript t subscript  approx subscript superscript  1 approx s\\asymp\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}}\\log\\delta^{-1}_{% \\operatorname*{approx}} italic_s  italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  B   approx  1 asymptotically-equals B subscript superscript  1 approx B\\asymp\\delta^{-1}_{\\operatorname*{approx}} italic_B  italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . Then the sieve MLE  p ^ s subscript ^ p s \\widehat{p}_{s} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  satisfies ( 7 ) with   n  superscript subscript  n \\varepsilon_{n}^{*} italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  as in ( 8 ) with   =  approx  t  /    log 2  (  approx  1 )  subscript superscript  subscript t subscript  approx superscript 2 subscript superscript  1 approx \\xi=\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}}\\log^{2}(\\delta^{-1}_{% \\operatorname*{approx}}) italic_ = italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  and  A = log 2  (  approx  1 ) A superscript 2 subscript superscript  1 approx A=\\log^{2}(\\delta^{-1}_{\\operatorname*{approx}}) italic_A = roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  provided that   n  n   n  2 / 6 subscript  n n subscript superscript  absent 2 n 6 \\eta_{n}\\leq n\\varepsilon^{*2}_{n}/6 italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n italic_ start_POSTSUPERSCRIPT  2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT / 6  and   n   2    subscript superscript  n 2 subscript  \\varepsilon^{*}_{n}\\leq\\sqrt{2}\\delta_{*} italic_ start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  square-root start_ARG 2 end_ARG italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT .",
            "Let  F c = F c  ( L , r , B , K ) subscript F c subscript F c L r B K \\mathcal{F}_{c}=\\mathcal{F}_{c}\\left(L,r,B,K\\right) caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT = caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT ( italic_L , italic_r , italic_B , italic_K )  with    =    ( D ) subscript  subscript  D \\delta_{*}=\\delta_{*}(D) italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT = italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_D )  be as given in  Lemma   1 , and  L  log   approx  1 asymptotically-equals L subscript superscript  1 approx L\\asymp\\log\\delta^{-1}_{\\operatorname*{approx}} italic_L  roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  r   approx  t  / 2    asymptotically-equals r subscript superscript  subscript t 2 subscript  approx r\\asymp\\delta^{-t_{*}/2\\beta_{*}}_{\\operatorname*{approx}} italic_r  italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / 2 italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  B   approx  1 asymptotically-equals B subscript superscript  1 approx B\\asymp\\delta^{-1}_{\\operatorname*{approx}} italic_B  italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . Then the sieve MLE  p ^ c subscript ^ p c \\widehat{p}_{c} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT  satisfies ( 7 ) with   n  superscript subscript  n \\varepsilon_{n}^{*} italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  as in ( 8 ) with   =  approx  t  /    log 2  (  approx  1 )  subscript superscript  subscript t subscript  approx superscript 2 subscript superscript  1 approx \\xi=\\delta^{-t_{*}/\\beta_{*}}_{\\operatorname*{approx}}\\log^{2}(\\delta^{-1}_{% \\operatorname*{approx}}) italic_ = italic_ start_POSTSUPERSCRIPT - italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  and  A = log 2  (  approx  1 ) A superscript 2 subscript superscript  1 approx A=\\log^{2}(\\delta^{-1}_{\\operatorname*{approx}}) italic_A = roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT )  provided that   n  n   n  2 / 6 subscript  n n subscript superscript  absent 2 n 6 \\eta_{n}\\leq n\\varepsilon^{*2}_{n}/6 italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n italic_ start_POSTSUPERSCRIPT  2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT / 6  and   n   2    subscript superscript  n 2 subscript  \\varepsilon^{*}_{n}\\leq\\sqrt{2}\\delta_{*} italic_ start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  square-root start_ARG 2 end_ARG italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT .",
            "Let  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Suppose that Assumption  1  holds and     [  min ,  max ] subscript  subscript  subscript  \\sigma_{*}\\in\\left[\\sigma_{\\min},\\sigma_{\\max}\\right] italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1  and   max <  subscript  \\sigma_{\\max}<\\infty italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT <  . Moreover, we assume     n   asymptotically-equals subscript  superscript n  \\sigma_{*}\\asymp n^{-\\alpha} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT , and   min = n   subscript  superscript n  \\sigma_{\\min}=n^{-\\gamma} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT = italic_n start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  for some  0      (  Z  1  d +  X  1  p )  1 0   superscript superscript subscript  Z 1 d superscript subscript  X 1 p 1 0\\leq\\alpha\\leq\\gamma\\leq(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{% \\mathfrak{p}})^{-1} 0  italic_  italic_  ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT . Then, for every   approx  [ 0 , 1 ] subscript  approx 0 1 \\delta_{\\operatorname*{approx}}\\in[0,1] italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT  [ 0 , 1 ] , we have: Let  F s = F s  ( L , r , s , 1 , K ) subscript F s subscript F s L r s 1 K \\mathcal{F}_{s}=\\mathcal{F}_{s}\\left(L,r,s,1,K\\right) caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT = caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ( italic_L , italic_r , italic_s , 1 , italic_K )  with  L  log   approx  1 asymptotically-equals L subscript superscript  1 approx L\\asymp\\log\\delta^{-1}_{\\operatorname*{approx}} italic_L  roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  r   approx  (  Z  1  d +  X  1  p ) asymptotically-equals r subscript superscript  superscript subscript  Z 1 d superscript subscript  X 1 p approx r\\asymp\\delta^{-(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}})}_{% \\operatorname*{approx}} italic_r  italic_ start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT ,  s   approx  (  Z  1  d +  X  1  p )  log   approx  1 asymptotically-equals s subscript superscript  superscript subscript  Z 1 d superscript subscript  X 1 p approx subscript superscript  1 approx s\\asymp\\delta^{-(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}})}_{% \\operatorname*{approx}}\\log\\delta^{-1}_{\\operatorname*{approx}} italic_s  italic_ start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT . Then the sieve MLE  p ^ s subscript ^ p s \\widehat{p}_{s} over^ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  satisfies ( 7 ) with the rate outlined in ( 8 ) with   =  approx  (  Z  1  d +  X  1  p )  log 2   approx  1  subscript superscript  superscript subscript  Z 1 d superscript subscript  X 1 p approx superscript 2 subscript superscript  1 approx \\xi=\\delta^{-(\\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}})}_{% \\operatorname*{approx}}\\log^{2}\\delta^{-1}_{\\operatorname*{approx}} italic_ = italic_ start_POSTSUPERSCRIPT - ( italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT  and  A = log 2   approx  1 A superscript 2 subscript superscript  1 approx A=\\log^{2}\\delta^{-1}_{\\operatorname*{approx}} italic_A = roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_ start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT , provided that   n  n   n  2 / 6 subscript  n n subscript superscript  absent 2 n 6 \\eta_{n}\\leq n\\varepsilon^{*2}_{n}/6 italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  italic_n italic_ start_POSTSUPERSCRIPT  2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT / 6 . In particular, choosing   approx := (   2 / n ) 1 / ( 2 +  Z  1  d +  X  1  p )  1 assign subscript  approx superscript superscript subscript  2 n 1 2 superscript subscript  Z 1 d superscript subscript  X 1 p 1 \\delta_{\\operatorname*{approx}}:=\\left(\\sigma_{*}^{2}/n\\right)^{1/\\left(2+% \\beta_{Z}^{-1}{\\mathfrak{d}}+\\beta_{X}^{-1}{\\mathfrak{p}}\\right)}\\leq 1 italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT := ( italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_n ) start_POSTSUPERSCRIPT 1 / ( 2 + italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_d + italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT fraktur_p ) end_POSTSUPERSCRIPT  1  minimizes   n     { A + log  ( n /  min ) } / n   approx /   asymptotically-equals superscript subscript  n  A n subscript  n subscript  approx subscript  \\varepsilon_{n}^{*}\\asymp\\sqrt{\\xi\\left\\{A+\\log\\left(n/\\sigma_{\\min}\\right)% \\right\\}/n}\\vee\\delta_{\\operatorname*{approx}}/\\sigma_{*} italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  square-root start_ARG italic_ { italic_A + roman_log ( italic_n / italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT ) } / italic_n end_ARG  italic_ start_POSTSUBSCRIPT roman_approx end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and gives",
            "For the last line, we use the fact that   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1 . The inequality at ( 18 ) follows from  e  x  ( 1  x ) superscript e x 1 x e^{-x}\\geq(1-x) italic_e start_POSTSUPERSCRIPT - italic_x end_POSTSUPERSCRIPT  ( 1 - italic_x ) . The ones at ( 19 ) follows using",
            "The result now follows directly ( 28 ) and ( 27 ) with ( 26 ).",
            "For fixed  u l ( 1 ) subscript u superscript bold-l 1 \\mathbf{u}_{{\\bm{\\ell}}^{(1)}} bold_u start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT  and  v l ( 2 ) subscript v superscript bold-l 2 \\mathbf{v}_{{\\bm{\\ell}}^{(2)}} bold_v start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , and from the use of  Lemma   8  there exist  Mult m r + r  superscript subscript Mult m r subscript r  \\operatorname{Mult}_{m}^{r+r_{\\prime}} roman_Mult start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  networks in the class",
            "computing  (  j = 1 r ( 1 / M 1  | u ( j )  u l ( 1 ) | ) + )  (  j = 1 r  ( 1 / M 2  | v ( j )  v l ( 2 ) | ) + ) superscript subscript product j 1 r subscript 1 subscript M 1 superscript u j subscript u superscript bold-l 1 superscript subscript product j 1 subscript r  subscript 1 subscript M 2 superscript v j subscript v superscript bold-l 2 (\\prod_{j=1}^{r}(1/M_{1}-|u^{(j)}-u_{{\\bm{\\ell}}^{(1)}}|)_{+})\\times(\\prod_{j=% 1}^{r_{\\prime}}(1/M_{2}-|v^{(j)}-v_{{\\bm{\\ell}}^{(2)}}|)_{+}) (  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( 1 / italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - | italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_u start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT )  (  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( 1 / italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT - | italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_v start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT )  up to an error that is bounded by  ( r + r  ) 2   2  m superscript r subscript r  2 superscript 2 m (r+r_{\\prime})^{2}\\,2^{-m} ( italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT 2 start_POSTSUPERSCRIPT - italic_m end_POSTSUPERSCRIPT . Observe that we have two extra hidden layers to compute  ( 1 / M 1  | u ( j )  u l ( 1 ) | ) + ) (1/M_{1}-|u^{(j)}-u_{{\\bm{\\ell}}^{(1)}}|)_{+}) ( 1 / italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - | italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_u start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT )  and  ( 1 / M 2  | v ( j )  v l ( 2 ) | ) + ) (1/M_{2}-|v^{(j)}-v_{{\\bm{\\ell}}^{(2)}}|)_{+}) ( 1 / italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT - | italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_v start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT )  for fixed  u l ( 1 ) subscript u superscript bold-l 1 \\mathbf{u}_{{\\bm{\\ell}}^{(1)}} bold_u start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT  and  v l ( 2 ) subscript v superscript bold-l 2 \\mathbf{v}_{{\\bm{\\ell}}^{(2)}} bold_v start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT  respectively, before we enter into the multinomial computation by regime invoking  Lemma   8 . Observe that the number of parameters in this network is upper bounded by  37  ( r + r  ) 2  ( m + 5 )   log 2  ( r + r  )  37 superscript r subscript r  2 m 5 subscript 2 r subscript r  37(r+r_{\\prime})^{2}(m+5)\\lceil\\log_{2}(r+r_{\\prime})\\rceil 37 ( italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_m + 5 )  roman_log start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT )  .",
            "By Lemma  8 , for any  x  R r x superscript R r \\mathbf{x}\\in{\\mathbb{R}}^{r} bold_x  blackboard_R start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ,  Mult m r  ( x ) = 0 superscript subscript Mult m r x 0 \\operatorname{Mult}_{m}^{r}(\\mathbf{x})=0 roman_Mult start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( bold_x ) = 0  if one of the components of  x x \\mathbf{x} bold_x  is zero. This shows that for any  u l ( 1 ) , v l ( 2 )  D  ( M ) subscript u superscript l 1 subscript v superscript l 2 D M \\mathbf{u}_{\\ell^{(1)}},\\mathbf{v}_{\\ell^{(2)}}\\in\\mathbf{D}(M) bold_u start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , bold_v start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT  bold_D ( italic_M ) , the support of the function  ( u , v )  ( Hat r + r   ( u , v ) ) u l ( 1 ) , v l ( 2 ) maps-to u v subscript superscript Hat r subscript r  u v subscript u superscript l 1 subscript v superscript l 2 (\\mathbf{u},\\mathbf{v})\\mapsto(\\operatorname{Hat}^{r+r_{\\prime}}(\\mathbf{u},% \\mathbf{v}))_{\\mathbf{u}_{\\ell^{(1)}},\\mathbf{v}_{\\ell^{(2)}}} ( bold_u , bold_v )  ( roman_Hat start_POSTSUPERSCRIPT italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( bold_u , bold_v ) ) start_POSTSUBSCRIPT bold_u start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , bold_v start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT end_POSTSUBSCRIPT  is contained in the support of the function  ( u , v )  (  j = 1 r ( 1 / M  | u ( j )  u l ( 1 ) ( j ) | ) +   j = 1 r  ( 1 / M  | v ( j )  v l ( 2 ) ( j ) | ) + ) maps-to u v superscript subscript product j 1 r subscript 1 M superscript u j subscript superscript u j superscript bold-l 1 superscript subscript product j 1 subscript r  subscript 1 M superscript v j subscript superscript v j superscript bold-l 2 (\\mathbf{u},\\mathbf{v})\\mapsto\\left(\\prod_{j=1}^{r}(1/M-|u^{(j)}-u^{(j)}_{{\\bm% {\\ell}}^{(1)}}|)_{+}\\prod_{j=1}^{r_{\\prime}}(1/M-|v^{(j)}-v^{(j)}_{{\\bm{\\ell}}% ^{(2)}}|)_{+}\\right) ( bold_u , bold_v )  (  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( 1 / italic_M - | italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( 1 / italic_M - | italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT ) .",
            "Because of ( 38 ) and ( 35 ), there exists a network  Q 3 subscript Q 3 Q_{3} italic_Q start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT  in",
            "The following technical lemmas are required for the proof of  Theorem   5 .  Lemma   7 ,  Lemma   8 , and  Lemma   9  restate Lemma A.2, Lemma A.3, and Lemma A.4 from  Schmidt-Hieber, ( 2020 ) , respectively."
        ]
    },
    "id_table_9": {
        "caption": "",
        "table": "A11.EGx6",
        "footnotes": [],
        "references": [
            "We define the  sparse  neural architecture class  F s  ( L , r , s , B , K ) subscript F s L r s B K \\mathcal{F}_{s}(L,{\\bf r},s,B,K) caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT ( italic_L , bold_r , italic_s , italic_B , italic_K )  as set of functions of form ( 9 ) satisfying",
            "The  fully connected  neural architecture class  F c = F c  ( L , r , B , K ) subscript F c subscript F c L r B K \\mathcal{F}_{c}=\\mathcal{F}_{c}\\left(L,{\\bf r},B,K\\right) caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT = caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT ( italic_L , bold_r , italic_B , italic_K )  is set of functions of form ( 9 ) satisfying",
            "For the last line, we use the fact that   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1 . The inequality at ( 18 ) follows from  e  x  ( 1  x ) superscript e x 1 x e^{-x}\\geq(1-x) italic_e start_POSTSUPERSCRIPT - italic_x end_POSTSUPERSCRIPT  ( 1 - italic_x ) . The ones at ( 19 ) follows using",
            "for every    2  c 3    / 2  2 subscript c 3 subscript  2 \\varepsilon\\leq\\sqrt{2}\\leq c_{3}\\delta_{*}/\\sqrt{2} italic_  square-root start_ARG 2 end_ARG  italic_c start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / square-root start_ARG 2 end_ARG , where  c 5 = c 5  ( c , C , c 3 ) subscript c 5 subscript c 5 c C subscript c 3 c_{5}=c_{5}(c,C,c_{3}) italic_c start_POSTSUBSCRIPT 5 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 5 end_POSTSUBSCRIPT ( italic_c , italic_C , italic_c start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT ) . Observe that  c 4  n   n 2 subscript c 4 n superscript subscript  n 2 c_{4}\\sqrt{n}\\varepsilon_{n}^{2} italic_c start_POSTSUBSCRIPT 4 end_POSTSUBSCRIPT square-root start_ARG italic_n end_ARG italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT  is upper bound to ( 29 ) and Eq. (3.1) of  Wong and Shen, ( 1995 )  is satisfied.",
            "All the constructed networks in this proof are of the form  F  ( L , p , s ) = F  ( L , p , s ,  ) F L p s F L p s \\mathcal{F}(L,\\mathbf{p},s)=\\mathcal{F}(L,\\mathbf{p},s,\\infty) caligraphic_F ( italic_L , bold_p , italic_s ) = caligraphic_F ( italic_L , bold_p , italic_s ,  )  with  F =  F F=\\infty italic_F =  . Denote  M 1 = M  ~ /  subscript M 1 superscript M ~   M_{1}=M^{\\widetilde{\\beta}/\\beta} italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_ end_ARG / italic_ end_POSTSUPERSCRIPT ,  M 2 = M  ~ /   subscript M 2 superscript M ~  subscript   M_{2}=M^{\\widetilde{\\beta}/\\beta_{\\prime}} italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_ end_ARG / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ,   sum =  +   subscript  sum  subscript   {\\beta_{\\mathrm{sum}}}=\\beta+\\beta_{\\prime} italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT = italic_ + italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and  r sum = r + r  subscript r sum r subscript r  {\\mathsf{r}_{\\mathrm{sum}}}=r+r_{\\prime} sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT = italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . Let  M M M italic_M  be the largest integer such that  M = ( M 1 + 1 ) r  ( M 2 + 1 ) r   N M superscript subscript M 1 1 r superscript subscript M 2 1 subscript r  N \\mathsf{M}=(M_{1}+1)^{r}(M_{2}+1)^{r_{\\prime}}\\leq N sansserif_M = ( italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  italic_N  and define  L  := ( m + 5 )   log 2  (  sum  r sum )  assign superscript L m 5 subscript 2 subscript  sum subscript r sum L^{*}:=(m+5)\\lceil\\log_{2}({\\beta_{\\mathrm{sum}}}\\vee{\\mathsf{r}_{\\mathrm{sum}% }})\\rceil italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT := ( italic_m + 5 )  roman_log start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT )  . Thanks to ( 34 ), ( 33 ) and Lemma  9 , we can add one hidden layer to the network  Mon m ,  sum r sum superscript subscript Mon m subscript  sum subscript r sum \\operatorname{Mon}_{m,{\\beta_{\\mathrm{sum}}}}^{\\mathsf{r}_{\\mathrm{sum}}} roman_Mon start_POSTSUBSCRIPT italic_m , italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  to obtain a network",
            "With ( 39 ), the number of non-zero parameters of  Q 3 subscript Q 3 Q_{3} italic_Q start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT  is bounded by",
            "The following technical lemmas are required for the proof of  Theorem   5 .  Lemma   7 ,  Lemma   8 , and  Lemma   9  restate Lemma A.2, Lemma A.3, and Lemma A.4 from  Schmidt-Hieber, ( 2020 ) , respectively."
        ]
    },
    "id_table_10": {
        "caption": "",
        "table": "A7.E30",
        "footnotes": [],
        "references": [
            "Having established the essential components for  F c subscript F c \\mathcal{F}_{c} caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT  in ( 11 ) and Lemma  4 .2, and for  F s subscript F s \\mathcal{F}_{s} caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  in ( 10 ) and Lemma  4 .1, respectively, we can simplify Theorem  1  and state Corollary  1 .",
            "For the sparse case in  1 .1, utilizing the entropy bound from ( 10 ), we observe that",
            "Following the entropy bound from ( 10 ), we have"
        ]
    },
    "id_table_11": {
        "caption": "",
        "table": "A11.EGx7",
        "footnotes": [],
        "references": [
            "Having established the essential components for  F c subscript F c \\mathcal{F}_{c} caligraphic_F start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT  in ( 11 ) and Lemma  4 .2, and for  F s subscript F s \\mathcal{F}_{s} caligraphic_F start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  in ( 10 ) and Lemma  4 .1, respectively, we can simplify Theorem  1  and state Corollary  1 .",
            "In Appendix  K , we present a novel approximation result for the function class exhibiting  smoothness disparity  in  Theorem   5 . This new result facilitates the study of theoretical properties of estimators when the generator  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Note that such a function class defined in ( 16 ) in Appendix  K  is much broader compared to the smoothness class in Section  2.4.1  as  Z Z Z italic_Z  and  X X X italic_X  do not have to be jointly smooth and it allows for smoothness disparity among them. The subsequent  Theorem   3  combines our approximation result with ( 11 ) and enables us to specialize  Theorem   1  to this class (see  Appendix   I  for the proof).",
            "Similarly for the fully connected case  1 .2, utilizing the entropy bound from ( 11 ) , we observe that"
        ]
    },
    "id_table_12": {
        "caption": "",
        "table": "A11.EGx8",
        "footnotes": [],
        "references": [
            "The convergence rate in ( 12 ) illustrates the influence of intrinsic dimensionality, smoothness, and noise level on the estimation process. Note that    \\alpha italic_  is upper bounded as   n   2     ( D ) superscript subscript  n 2 subscript  D \\varepsilon_{n}^{*}\\leq\\sqrt{2}\\delta_{*}(D) italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  square-root start_ARG 2 end_ARG italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT ( italic_D ) . For large values of    \\alpha italic_ , estimation of  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  is inherent difficult as the data is very close on the singular support. To address this, a small noise injection, as described in  Corollary   2 , can smooth the estimation and ensure consistency.",
            "The proof of  Corollary   1  is provided in  Appendix   F . For the composite structural class  G G \\mathcal{G} caligraphic_G , the effective smoothness is denoted by    subscript  \\beta_{*} italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and the dimension is  t  subscript t t_{*} italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . This effectively mitigates the curse of dimensionality. The convergence rate at ( 12 ) also recovers the optimal rate when  q = 1 q 1 q=1 italic_q = 1  and   = 0  0 \\alpha=0 italic_ = 0 , and there is a small lag of polynomial factor  t    / ( 2    + t  ) subscript t  2 subscript  subscript t t_{*}\\alpha/(2\\beta_{*}+t_{*}) italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT italic_ / ( 2 italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT + italic_t start_POSTSUBSCRIPT  end_POSTSUBSCRIPT )  when   > 0  0 \\alpha>0 italic_ > 0   (Norets and Pati,,  2017 ) . This lag arises due to the presence of full-dimensional noise in the response observation  Y Y Y italic_Y . Note that when the noise is small, that is    \\alpha italic_  is large, achieving a sharp estimation of  p  subscript p p_{*} italic_p start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  requires an equally accurate estimate of  G  subscript G G_{*} italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . This can be quite challenging. Our practically tractable approach attempts to address this without initially estimating the singular support."
        ]
    },
    "id_table_13": {
        "caption": "",
        "table": "A11.EGx9",
        "footnotes": [],
        "references": [
            "This observed pattern, as emphasized in  Corollary   2 , closely aligns with the results achieved in ( 13 )."
        ]
    },
    "id_table_14": {
        "caption": "",
        "table": "A11.EGx10",
        "footnotes": [],
        "references": [
            "The proof of  Theorem   3  is provided in  Appendix   I . In the special case when   = 0  0 \\alpha=0 italic_ = 0  and  d = D d D {\\mathfrak{d}}=D fraktur_d = italic_D , our convergence rate in ( 14 ) recovers the minimax optimal rate for conditional density estimation based on kernel smoothing, as established in  Li et al., ( 2022 ) ."
        ]
    },
    "id_table_15": {
        "caption": "",
        "table": "A11.EGx11",
        "footnotes": [],
        "references": []
    },
    "id_table_16": {
        "caption": "",
        "table": "A11.EGx12",
        "footnotes": [],
        "references": [
            "In Appendix  K , we present a novel approximation result for the function class exhibiting  smoothness disparity  in  Theorem   5 . This new result facilitates the study of theoretical properties of estimators when the generator  G   H d , p  Z ,  X  ( Z , X , K ) subscript G superscript subscript H d p subscript  Z subscript  X Z X K G_{*}\\in\\mathcal{H}_{{\\mathfrak{d}},{\\mathfrak{p}}}^{\\beta_{Z},\\beta_{X}}\\left% ({\\mathcal{Z}},{\\mathcal{X}},K\\right) italic_G start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  caligraphic_H start_POSTSUBSCRIPT fraktur_d , fraktur_p end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT italic_X end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( caligraphic_Z , caligraphic_X , italic_K ) . Note that such a function class defined in ( 16 ) in Appendix  K  is much broader compared to the smoothness class in Section  2.4.1  as  Z Z Z italic_Z  and  X X X italic_X  do not have to be jointly smooth and it allows for smoothness disparity among them. The subsequent  Theorem   3  combines our approximation result with ( 11 ) and enables us to specialize  Theorem   1  to this class (see  Appendix   I  for the proof)."
        ]
    },
    "id_table_17": {
        "caption": "",
        "table": "A11.EGx13",
        "footnotes": [],
        "references": [
            "Moreover, the condition ( 17 ) is equivalent of"
        ]
    },
    "id_table_18": {
        "caption": "",
        "table": "A11.EGx14",
        "footnotes": [],
        "references": [
            "For the last line, we use the fact that   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1 . The inequality at ( 18 ) follows from  e  x  ( 1  x ) superscript e x 1 x e^{-x}\\geq(1-x) italic_e start_POSTSUPERSCRIPT - italic_x end_POSTSUPERSCRIPT  ( 1 - italic_x ) . The ones at ( 19 ) follows using"
        ]
    },
    "id_table_19": {
        "caption": "",
        "table": "A11.EGx15",
        "footnotes": [],
        "references": [
            "For the last line, we use the fact that   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1 . The inequality at ( 18 ) follows from  e  x  ( 1  x ) superscript e x 1 x e^{-x}\\geq(1-x) italic_e start_POSTSUPERSCRIPT - italic_x end_POSTSUPERSCRIPT  ( 1 - italic_x ) . The ones at ( 19 ) follows using"
        ]
    },
    "id_table_20": {
        "caption": "",
        "table": "A11.EGx16",
        "footnotes": [],
        "references": [
            "and  | g 2  ( x , z )  g 1  ( x , z ) |    1 subscript subscript g 2 x z subscript g 1 x z subscript  1 |g_{2}(x,z)-g_{1}(x,z)|_{\\infty}\\leq\\eta_{1} | italic_g start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_x , italic_z ) - italic_g start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( italic_x , italic_z ) | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT . The change at ( 20 ) follows from     ( y  g 1  ( x , z ) )  ( 2     2 )  D subscript italic-  y subscript g 1 x z superscript 2  superscript  2 D \\phi_{\\sigma}(y-g_{1}(x,z))\\leq\\left(\\sqrt{2\\pi\\sigma^{2}}\\right)^{-D} italic_ start_POSTSUBSCRIPT italic_ end_POSTSUBSCRIPT ( italic_y - italic_g start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( italic_x , italic_z ) )  ( square-root start_ARG 2 italic_ italic_ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG ) start_POSTSUPERSCRIPT - italic_D end_POSTSUPERSCRIPT  and the bound"
        ]
    },
    "id_table_21": {
        "caption": "",
        "table": "A11.EGx17",
        "footnotes": [],
        "references": [
            "Let   > 0  0 \\varepsilon>0 italic_ > 0 . Let  { g 1 , ... , g N 1 } subscript g 1 ... subscript g subscript N 1 \\{g_{1},\\ldots,g_{N_{1}}\\} { italic_g start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_g start_POSTSUBSCRIPT italic_N start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT }  be   1  limit-from subscript  1 \\eta_{1}- italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - covering of  F F \\mathcal{F} caligraphic_F  and  {  1 , ... ,  N 2 } subscript  1 ... subscript  subscript N 2 \\{\\sigma_{1},\\ldots,\\sigma_{N_{2}}\\} { italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_ start_POSTSUBSCRIPT italic_N start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_POSTSUBSCRIPT }  be   2  limit-from subscript  2 \\eta_{2}- italic_ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT - covering of  [  min ,  max ] subscript  subscript  \\left[\\sigma_{\\min},\\sigma_{\\max}\\right] [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with respect to   |  |    \\||\\cdot|_{\\infty}\\|_{\\infty}  |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  and  |  |  |\\cdot|_{\\infty} |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . By ( 21 ) and ( 24 ),   1 = c 1  1   min D + 2   / 4 subscript  1 superscript subscript c 1 1 superscript subscript  D 2  4 \\eta_{1}=c_{1}^{-1}\\sigma_{\\min}^{D+2}\\varepsilon/4 italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_D + 2 end_POSTSUPERSCRIPT italic_ / 4  and   2 = c 2  2   min D + 1   / 4 subscript  2 superscript subscript c 2 2 superscript subscript  D 1  4 \\eta_{2}=c_{2}^{-2}\\sigma_{\\min}^{D+1}\\varepsilon/4 italic_ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 2 end_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_D + 1 end_POSTSUPERSCRIPT italic_ / 4  implies"
        ]
    },
    "id_table_22": {
        "caption": "",
        "table": "A11.EGx18",
        "footnotes": [],
        "references": [
            "The ( 22 ) follows from  1  e     1 superscript e   1-e^{-\\alpha}\\leq\\alpha 1 - italic_e start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  italic_ . The change at ( 23 ) follows from    1  ( y  g  ( x , z ) )  ( 2     1 2 )  D subscript italic- subscript  1 y g x z superscript 2  superscript subscript  1 2 D \\phi_{\\sigma_{1}}(y-g(x,z))\\leq\\left(\\sqrt{2\\pi\\sigma_{1}^{2}}\\right)^{-D} italic_ start_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT ( italic_y - italic_g ( italic_x , italic_z ) )  ( square-root start_ARG 2 italic_ italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG ) start_POSTSUPERSCRIPT - italic_D end_POSTSUPERSCRIPT  and"
        ]
    },
    "id_table_23": {
        "caption": "",
        "table": "A11.EGx19",
        "footnotes": [],
        "references": [
            "The ( 22 ) follows from  1  e     1 superscript e   1-e^{-\\alpha}\\leq\\alpha 1 - italic_e start_POSTSUPERSCRIPT - italic_ end_POSTSUPERSCRIPT  italic_ . The change at ( 23 ) follows from    1  ( y  g  ( x , z ) )  ( 2     1 2 )  D subscript italic- subscript  1 y g x z superscript 2  superscript subscript  1 2 D \\phi_{\\sigma_{1}}(y-g(x,z))\\leq\\left(\\sqrt{2\\pi\\sigma_{1}^{2}}\\right)^{-D} italic_ start_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT ( italic_y - italic_g ( italic_x , italic_z ) )  ( square-root start_ARG 2 italic_ italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG ) start_POSTSUPERSCRIPT - italic_D end_POSTSUPERSCRIPT  and"
        ]
    },
    "id_table_24": {
        "caption": "",
        "table": "A11.EGx20",
        "footnotes": [],
        "references": [
            "Let   > 0  0 \\varepsilon>0 italic_ > 0 . Let  { g 1 , ... , g N 1 } subscript g 1 ... subscript g subscript N 1 \\{g_{1},\\ldots,g_{N_{1}}\\} { italic_g start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_g start_POSTSUBSCRIPT italic_N start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT }  be   1  limit-from subscript  1 \\eta_{1}- italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - covering of  F F \\mathcal{F} caligraphic_F  and  {  1 , ... ,  N 2 } subscript  1 ... subscript  subscript N 2 \\{\\sigma_{1},\\ldots,\\sigma_{N_{2}}\\} { italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , ... , italic_ start_POSTSUBSCRIPT italic_N start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_POSTSUBSCRIPT }  be   2  limit-from subscript  2 \\eta_{2}- italic_ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT - covering of  [  min ,  max ] subscript  subscript  \\left[\\sigma_{\\min},\\sigma_{\\max}\\right] [ italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT , italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT ]  with respect to   |  |    \\||\\cdot|_{\\infty}\\|_{\\infty}  |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  start_POSTSUBSCRIPT  end_POSTSUBSCRIPT  and  |  |  |\\cdot|_{\\infty} |  | start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . By ( 21 ) and ( 24 ),   1 = c 1  1   min D + 2   / 4 subscript  1 superscript subscript c 1 1 superscript subscript  D 2  4 \\eta_{1}=c_{1}^{-1}\\sigma_{\\min}^{D+2}\\varepsilon/4 italic_ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_D + 2 end_POSTSUPERSCRIPT italic_ / 4  and   2 = c 2  2   min D + 1   / 4 subscript  2 superscript subscript c 2 2 superscript subscript  D 1  4 \\eta_{2}=c_{2}^{-2}\\sigma_{\\min}^{D+1}\\varepsilon/4 italic_ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 2 end_POSTSUPERSCRIPT italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_D + 1 end_POSTSUPERSCRIPT italic_ / 4  implies"
        ]
    },
    "id_table_25": {
        "caption": "",
        "table": "A11.EGx21",
        "footnotes": [],
        "references": []
    },
    "id_table_26": {
        "caption": "",
        "table": "A11.EGx22",
        "footnotes": [],
        "references": [
            "The result now follows directly ( 28 ) and ( 27 ) with ( 26 )."
        ]
    },
    "id_table_27": {
        "caption": "",
        "table": "A11.EGx23",
        "footnotes": [],
        "references": [
            "where  c  (  max , K , D ) c subscript  K D c(\\sigma_{\\max},K,D) italic_c ( italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT , italic_K , italic_D )  is a constant. We use the fact that   min  { log  (  max /  min ) } D subscript  superscript subscript  subscript  D \\sigma_{\\min}\\{\\log(\\sigma_{\\max}/\\sigma_{\\min})\\}^{D} italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT { roman_log ( italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT / italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT ) } start_POSTSUPERSCRIPT italic_D end_POSTSUPERSCRIPT  is bounded above by some constant depending only upon   max subscript  \\sigma_{\\max} italic_ start_POSTSUBSCRIPT roman_max end_POSTSUBSCRIPT  as   min  1 subscript  1 \\sigma_{\\min}\\leq 1 italic_ start_POSTSUBSCRIPT roman_min end_POSTSUBSCRIPT  1 . Similar to ( 27 ), it is possible to write for all   >    subscript  \\delta>\\delta_{*} italic_ > italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT",
            "The result now follows directly ( 28 ) and ( 27 ) with ( 26 )."
        ]
    },
    "id_table_28": {
        "caption": "",
        "table": "A11.EGx24",
        "footnotes": [],
        "references": [
            "The result now follows directly ( 28 ) and ( 27 ) with ( 26 )."
        ]
    },
    "id_table_29": {
        "caption": "",
        "table": "A11.EGx25",
        "footnotes": [],
        "references": [
            "for every    2  c 3    / 2  2 subscript c 3 subscript  2 \\varepsilon\\leq\\sqrt{2}\\leq c_{3}\\delta_{*}/\\sqrt{2} italic_  square-root start_ARG 2 end_ARG  italic_c start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT / square-root start_ARG 2 end_ARG , where  c 5 = c 5  ( c , C , c 3 ) subscript c 5 subscript c 5 c C subscript c 3 c_{5}=c_{5}(c,C,c_{3}) italic_c start_POSTSUBSCRIPT 5 end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT 5 end_POSTSUBSCRIPT ( italic_c , italic_C , italic_c start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT ) . Observe that  c 4  n   n 2 subscript c 4 n superscript subscript  n 2 c_{4}\\sqrt{n}\\varepsilon_{n}^{2} italic_c start_POSTSUBSCRIPT 4 end_POSTSUBSCRIPT square-root start_ARG italic_n end_ARG italic_ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT  is upper bound to ( 29 ) and Eq. (3.1) of  Wong and Shen, ( 1995 )  is satisfied."
        ]
    },
    "id_table_30": {
        "caption": "",
        "table": "A11.EGx26",
        "footnotes": [],
        "references": [
            "Since  | z  y | 2   subscript z y 2  |z-y|_{2}\\leq\\sigma | italic_z - italic_y | start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  italic_ , the right hand side is bounded below by a positive constant depending just on  D D D italic_D  which is again a contradiction to ( 30 ). This proves the assertion made in the theorem."
        ]
    },
    "id_table_31": {
        "caption": "",
        "table": "A11.EGx27",
        "footnotes": [],
        "references": [
            "We may also write ( 31 ) as a linear combination of monomials"
        ]
    },
    "id_table_32": {
        "caption": "",
        "table": "A11.EGx28",
        "footnotes": [],
        "references": [
            "and with ( 32 ),"
        ]
    },
    "id_table_33": {
        "caption": "",
        "table": "A11.EGx29",
        "footnotes": [],
        "references": [
            "All the constructed networks in this proof are of the form  F  ( L , p , s ) = F  ( L , p , s ,  ) F L p s F L p s \\mathcal{F}(L,\\mathbf{p},s)=\\mathcal{F}(L,\\mathbf{p},s,\\infty) caligraphic_F ( italic_L , bold_p , italic_s ) = caligraphic_F ( italic_L , bold_p , italic_s ,  )  with  F =  F F=\\infty italic_F =  . Denote  M 1 = M  ~ /  subscript M 1 superscript M ~   M_{1}=M^{\\widetilde{\\beta}/\\beta} italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_ end_ARG / italic_ end_POSTSUPERSCRIPT ,  M 2 = M  ~ /   subscript M 2 superscript M ~  subscript   M_{2}=M^{\\widetilde{\\beta}/\\beta_{\\prime}} italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_ end_ARG / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ,   sum =  +   subscript  sum  subscript   {\\beta_{\\mathrm{sum}}}=\\beta+\\beta_{\\prime} italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT = italic_ + italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and  r sum = r + r  subscript r sum r subscript r  {\\mathsf{r}_{\\mathrm{sum}}}=r+r_{\\prime} sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT = italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . Let  M M M italic_M  be the largest integer such that  M = ( M 1 + 1 ) r  ( M 2 + 1 ) r   N M superscript subscript M 1 1 r superscript subscript M 2 1 subscript r  N \\mathsf{M}=(M_{1}+1)^{r}(M_{2}+1)^{r_{\\prime}}\\leq N sansserif_M = ( italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  italic_N  and define  L  := ( m + 5 )   log 2  (  sum  r sum )  assign superscript L m 5 subscript 2 subscript  sum subscript r sum L^{*}:=(m+5)\\lceil\\log_{2}({\\beta_{\\mathrm{sum}}}\\vee{\\mathsf{r}_{\\mathrm{sum}% }})\\rceil italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT := ( italic_m + 5 )  roman_log start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT )  . Thanks to ( 34 ), ( 33 ) and Lemma  9 , we can add one hidden layer to the network  Mon m ,  sum r sum superscript subscript Mon m subscript  sum subscript r sum \\operatorname{Mon}_{m,{\\beta_{\\mathrm{sum}}}}^{\\mathsf{r}_{\\mathrm{sum}}} roman_Mon start_POSTSUBSCRIPT italic_m , italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  to obtain a network"
        ]
    },
    "id_table_34": {
        "caption": "",
        "table": "A11.EGx30",
        "footnotes": [],
        "references": [
            "All the constructed networks in this proof are of the form  F  ( L , p , s ) = F  ( L , p , s ,  ) F L p s F L p s \\mathcal{F}(L,\\mathbf{p},s)=\\mathcal{F}(L,\\mathbf{p},s,\\infty) caligraphic_F ( italic_L , bold_p , italic_s ) = caligraphic_F ( italic_L , bold_p , italic_s ,  )  with  F =  F F=\\infty italic_F =  . Denote  M 1 = M  ~ /  subscript M 1 superscript M ~   M_{1}=M^{\\widetilde{\\beta}/\\beta} italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_ end_ARG / italic_ end_POSTSUPERSCRIPT ,  M 2 = M  ~ /   subscript M 2 superscript M ~  subscript   M_{2}=M^{\\widetilde{\\beta}/\\beta_{\\prime}} italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_M start_POSTSUPERSCRIPT over~ start_ARG italic_ end_ARG / italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ,   sum =  +   subscript  sum  subscript   {\\beta_{\\mathrm{sum}}}=\\beta+\\beta_{\\prime} italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT = italic_ + italic_ start_POSTSUBSCRIPT  end_POSTSUBSCRIPT , and  r sum = r + r  subscript r sum r subscript r  {\\mathsf{r}_{\\mathrm{sum}}}=r+r_{\\prime} sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT = italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT . Let  M M M italic_M  be the largest integer such that  M = ( M 1 + 1 ) r  ( M 2 + 1 ) r   N M superscript subscript M 1 1 r superscript subscript M 2 1 subscript r  N \\mathsf{M}=(M_{1}+1)^{r}(M_{2}+1)^{r_{\\prime}}\\leq N sansserif_M = ( italic_M start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( italic_M start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT + 1 ) start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  italic_N  and define  L  := ( m + 5 )   log 2  (  sum  r sum )  assign superscript L m 5 subscript 2 subscript  sum subscript r sum L^{*}:=(m+5)\\lceil\\log_{2}({\\beta_{\\mathrm{sum}}}\\vee{\\mathsf{r}_{\\mathrm{sum}% }})\\rceil italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT := ( italic_m + 5 )  roman_log start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT )  . Thanks to ( 34 ), ( 33 ) and Lemma  9 , we can add one hidden layer to the network  Mon m ,  sum r sum superscript subscript Mon m subscript  sum subscript r sum \\operatorname{Mon}_{m,{\\beta_{\\mathrm{sum}}}}^{\\mathsf{r}_{\\mathrm{sum}}} roman_Mon start_POSTSUBSCRIPT italic_m , italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  to obtain a network"
        ]
    },
    "id_table_35": {
        "caption": "",
        "table": "A11.EGx31",
        "footnotes": [],
        "references": [
            "Because of ( 38 ) and ( 35 ), there exists a network  Q 3 subscript Q 3 Q_{3} italic_Q start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT  in"
        ]
    },
    "id_table_36": {
        "caption": "",
        "table": "A11.EGx32",
        "footnotes": [],
        "references": [
            "Next, we pair the  ( u l ( 1 ) , v l ( 2 ) ) subscript u superscript bold-l 1 subscript v superscript bold-l 2 (\\mathbf{u}_{{\\bm{\\ell}}^{(1)}},\\mathbf{v}_{{\\bm{\\ell}}^{(2)}}) ( bold_u start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , bold_v start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ) -th entry of the output of  Q 1 subscript Q 1 Q_{1} italic_Q start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT  and  Hat r superscript Hat r \\operatorname{Hat}^{r} roman_Hat start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT  and apply to each of the  M M \\mathsf{M} sansserif_M  pairs the  Mult m subscript Mult m \\operatorname{Mult}_{m} roman_Mult start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT  network described in Lemma  7 . In the last layer, we add all entries. By Lemma  7  this requires at most  24  ( m + 5 )  M + M  25  ( m + 5 )  N 24 m 5 M M 25 m 5 N 24(m+5)\\mathsf{M}+\\mathsf{M}\\leq 25(m+5)N 24 ( italic_m + 5 ) sansserif_M + sansserif_M  25 ( italic_m + 5 ) italic_N  active parameters for the  M M \\mathsf{M} sansserif_M  multiplications and the sum. Using Lemma  7 , Lemma  6 , ( 36 ) and triangle inequality, there exists a network  Q 2  F  ( 2 + L  + m + 6 , ( r sum , 6  ( r sum +   sum  )  N , ... , 6  ( r sum +   sum  )  N , 1 ) ) subscript Q 2 F 2 superscript L m 6 subscript r sum 6 subscript r sum subscript  sum N ... 6 subscript r sum subscript  sum N 1 Q_{2}\\in\\mathcal{F}(2+L^{*}+m+6,({\\mathsf{r}_{\\mathrm{sum}}},6({\\mathsf{r}_{% \\mathrm{sum}}}+\\lceil{\\beta_{\\mathrm{sum}}}\\rceil)N,\\ldots,6({\\mathsf{r}_{% \\mathrm{sum}}}+\\lceil{\\beta_{\\mathrm{sum}}}\\rceil)N,1)) italic_Q start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  caligraphic_F ( 2 + italic_L start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT + italic_m + 6 , ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT , 6 ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT +  italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  ) italic_N , ... , 6 ( sansserif_r start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT +  italic_ start_POSTSUBSCRIPT roman_sum end_POSTSUBSCRIPT  ) italic_N , 1 ) )  such that for any  u  [ 0 , 1 ] r u superscript 0 1 r \\mathbf{u}\\in[0,1]^{r} bold_u  [ 0 , 1 ] start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT  and for any  v  [ 0 , 1 ] r  v superscript 0 1 subscript r  \\mathbf{v}\\in[0,1]^{r_{\\prime}} bold_v  [ 0 , 1 ] start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT"
        ]
    },
    "id_table_37": {
        "caption": "",
        "table": "A11.EGx33",
        "footnotes": [],
        "references": [
            "Here, the first inequality follows from the fact that the support of  ( Hat r + r   ( u , v ) ) u l ( 1 ) , v l ( 2 ) subscript superscript Hat r subscript r  u v subscript u superscript l 1 subscript v superscript l 2 (\\operatorname{Hat}^{r+r_{\\prime}}(\\mathbf{u},\\mathbf{v}))_{\\mathbf{u}_{\\ell^{% (1)}},\\mathbf{v}_{\\ell^{(2)}}} ( roman_Hat start_POSTSUPERSCRIPT italic_r + italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( bold_u , bold_v ) ) start_POSTSUBSCRIPT bold_u start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT , bold_v start_POSTSUBSCRIPT roman_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT end_POSTSUBSCRIPT  is contained in the support of  (  j = 1 r ( 1 / M  | u ( j )  u l ( 1 ) ( j ) | ) +   j = 1 r  ( 1 / M  | v ( j )  v l ( 2 ) ( j ) | ) + ) superscript subscript product j 1 r subscript 1 M superscript u j subscript superscript u j superscript bold-l 1 superscript subscript product j 1 subscript r  subscript 1 M superscript v j subscript superscript v j superscript bold-l 2 \\left(\\prod_{j=1}^{r}(1/M-|u^{(j)}-u^{(j)}_{{\\bm{\\ell}}^{(1)}}|)_{+}\\prod_{j=1% }^{r_{\\prime}}(1/M-|v^{(j)}-v^{(j)}_{{\\bm{\\ell}}^{(2)}}|)_{+}\\right) (  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r end_POSTSUPERSCRIPT ( 1 / italic_M - | italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_u start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT  start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT  end_POSTSUBSCRIPT end_POSTSUPERSCRIPT ( 1 / italic_M - | italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT - italic_v start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT bold_l start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT | ) start_POSTSUBSCRIPT + end_POSTSUBSCRIPT )  (see Lemma  6 ). Because of ( 37 ), the network  Q 2 subscript Q 2 Q_{2} italic_Q start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  has at most"
        ]
    },
    "id_table_38": {
        "caption": "",
        "table": "A11.EGx34",
        "footnotes": [],
        "references": [
            "Because of ( 38 ) and ( 35 ), there exists a network  Q 3 subscript Q 3 Q_{3} italic_Q start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT  in"
        ]
    },
    "id_table_39": {
        "caption": "",
        "table": "A11.EGx35",
        "footnotes": [],
        "references": [
            "With ( 39 ), the number of non-zero parameters of  Q 3 subscript Q 3 Q_{3} italic_Q start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT  is bounded by"
        ]
    },
    "id_table_40": {
        "caption": "",
        "table": "A11.EGx36",
        "footnotes": [],
        "references": []
    },
    "id_table_41": {
        "caption": "",
        "table": "A11.EGx37",
        "footnotes": [],
        "references": []
    }
}