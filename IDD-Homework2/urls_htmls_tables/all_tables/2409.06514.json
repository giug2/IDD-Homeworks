{
    "id_table_1": {
        "caption": "Table 1 :  Mean and standard deviation for the KS test statistic for Algorithm  KNNR  and benchmarks.",
        "table": "S5.F6.7",
        "footnotes": [
            ""
        ],
        "references": [
            "In this paper, we show how  K K K italic_K -nearest neighbor ( K K K italic_K -NN) resampling, an off-policy evaluation method proposed in  [ 18 ] , can be applied to simulate limit order book (LOB) markets and how it can be used to evaluate and calibrate trading strategies. Using historical LOB data, we demonstrate that our simulation method is capable of recreating realistic LOB dynamics and that synthetic trading within the simulation leads to a market impact in line with the corresponding literature. Compared to other statistical LOB simulation methods, our algorithm has theoretical convergence guarantees under general conditions, does not require optimization, is easy to implement and computationally efficient. Furthermore, we show that in a benchmark comparison our method outperforms a deep learning-based algorithm for several key statistics. In the context of a LOB with pro-rata type matching, we demonstrate how our algorithm can calibrate the size of limit orders for a liquidation strategy. Finally, we describe how  K K K italic_K -NN resampling can be modified for choices of higher dimensional state spaces.",
            "Central limit order books (LOBs) are the prevalent organisational mechanism for trading in a wide range of assets, from stocks and bonds to derivatives. A LOB is a centralized registry of traders commitments to buy or sell a certain amount of an asset for a certain price, referred to as limit orders. Other traders may choose to execute a certain amount against those limit orders, by posting market orders. The appeal of LOBs is their ability to efficiently aggregate traders preferences via limit and market orders. Due to their practical importance and the complex interaction patterns present in them, LOBs are a widely researched subject in academia and industry. From a practical perspective, an important question is to understand how well a traders strategy performs within a limit order book and how the market reacts to this traders strategy, noting that the placement of orders can have an adversarial effect (see, e.g.  [ 17 ] ).",
            "Direct testing of trading strategies within an actual market is inherently risky and can lead to sizeable losses or a disorderly market. On the other hand, large amounts of historical data for LOBs are available. In reinforcement learning, the subfield of off-policy evaluation deals with the problem of how to extract information about the performance of a strategy using such observational data. In this context, we proposed  K K K italic_K -nearest neighbor (K-NN) resampling, a method that has theoretical convergence guarantees under general conditions, performs well in experiments in environments with intrinsic noise, is easy to implement and computationally efficient  [ 18 ] . The main idea of K-NN resampling is that similar states in a metric sense lead to similar transitions of the underlying random dynamical system. Given an initial state, the algorithm selects at random a new state from a list of nearest neighbors from the initial state. From this neighboring state, the historical transition from the data is used leading to a subsequent state. Chaining these random matchings together yields an approximate path for the underlying system and repeatedly restarting at the initial states leads to a collection of paths, i.e. a simulation. In this paper, we show how we can apply this idea for the simulation of LOBs and the evaluation of trading strategies within LOBs.",
            "The academic interest in the simulation of LOBs is well documented by the broad and recent literature. A current literature review of this subject matter  [ 30 ]  identifies four major approaches to LOB simulations: Point processes  [ 6 ,  14 ,  4 ,  27 ,  35 ,  36 ,  31 ] , agent based modelling  [ 39 ,  7 ,  5 ,  45 ] , stochastic differential equations models  [ 12 ,  32 ,  28 ,  26 ,  13 ]  and deep/statistical learning  [ 33 ,  44 ,  34 ,  10 ,  11 ,  38 ,  29 ] . We note that the first three approaches usually require explicit modelling choices on either market dynamics or interactions of market participants. While this view allows for the direct choice of relevant market characteristics, it poses the risk of fundamental modelling biases in the market dynamics. For applications in actual markets, these approaches often require the additional non-trivial step of calibration to market data and may require a high level of granularity in the data.",
            "The algorithm we propose can be understood as a statistical learning method to order book simulation. In particular, our algorithm selects transitions between LOB snapshots using a non-parametric approach. This is most similar to the scope and methodology proposed in  [ 11 ] . The authors also sample transitions between LOB snapshots where the sampling distribution is given by a conditional generative adversarial neural network (CGAN). They show that their model is capable of reproducing stylized facts observed in the market and that the impact of trading within their simulator behaves as expected. Since the scope of our paper is partially similar, we reuse some of the stylized facts considered in this paper for testing our models quality. Furthermore, we use the CGAN approach as a benchmark and see that our method outperforms it on key statistics for simulation quality. Beyond the scope of  [ 11 ] , we also consider the evaluation and selection of trading strategies using limit orders.",
            "The other papers using deep learning for LOB simulation often have a slightly different focus. Namely,  [ 33 ,  44 ,  34 ,  10 ,  38 ,  29 ]  considers event-by-event simulation within the LOB rather than the transition between LOB snapshots as in  [ 11 ]  and in this paper. We note that this may depend on the objective of the simulation. Event-by-event simulation are particularly useful for ultra-high frequency traders where a single event may cause the trader to react. Considering transitions between LOB snapshots on the other hand is often sufficient for practical applications in high to medium-high frequency trading. Note that our algorithm could be readily modified for event-by-event simulations  we leave this investigation for future work.",
            "Furthermore, all published statistical learning models that we are aware of use deep learning for generating simulations. In contrast, our method only uses nearest neighbor search. Not relying on deep learning models has several advantages. First, our algorithm does not need any optimization. In contrast, deep learning models require solving a highly non-convex optimization problem where optimization procedures often exhibit instability, as observed in  [ 11 ] . Furthermore, our method can be efficiently implemented using standard machine learning packages and purely relies on historical observations rather then sampling from a black box distribution. Finally, it does not require extensive hyperparameter tuning.",
            "The first  l l l italic_l  entries correspond to the bid levels while the last  l l l italic_l  entries are for the ask values. Figure  1  shows an example for an LOB snapshot.",
            "Limit order books are usually seen as evolving continuously over time, where market orders and limit orders may arrive at any time. The arriving orders are often modelled as random but reactive to the current state of the LO (see e.g.  [ 14 ,  40 ] ). We focus on a discretization that allows us to consider high to medium-high frequency trade decisions. In particular, we assume that the LOB evolves as a discrete random dynamical system transitioning from one LOB state-price pair  ( Z t , p t  ) subscript Z t superscript subscript p t (Z_{t},p_{t}^{*}) ( italic_Z start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT , italic_p start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT )  to the next,  ( Z t +   t , p t +   t  ) subscript Z t  t superscript subscript p t  t (Z_{t+\\Delta t},p_{t+\\Delta t}^{*}) ( italic_Z start_POSTSUBSCRIPT italic_t + roman_ italic_t end_POSTSUBSCRIPT , italic_p start_POSTSUBSCRIPT italic_t + roman_ italic_t end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT ) , where    t  R > 0  t subscript R absent 0 \\Delta t\\in\\mathbb{R}_{>0} roman_ italic_t  blackboard_R start_POSTSUBSCRIPT > 0 end_POSTSUBSCRIPT  is the time increment and  Z t subscript Z t Z_{t} italic_Z start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT  the state representation for the LOB 2 2 2  We note that the state representation can be chosen in many different ways and is not limited to LOB snapshots. We discuss possible choices of the state below. . Using transition functions  f Z subscript f Z f_{Z} italic_f start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT ,  f p subscript f p f_{p} italic_f start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  and a random noise    \\varepsilon italic_ , a single LOB transition is described by",
            "We choose to model the price explicitly in order to facilitate the assignment of empty tick sizes in the LOB snapshots and we assume that the price level does not have an impact on the shape of the subsequent order book. Furthermore, the iid assumption on the system noise implies that the system is Markovian. Random dynamical system formulations for LOBs are common in the literature and can, for example, be found in  [ 14 ,  12 ,  2 ,  26 ] .",
            "In this section, we explain how K-NN resampling can be applied to LOB simulation and trade evaluation, making use of the fact that we can observe the direct impact of a trading agents decision on the LOB. We explain first how K-NN resampling as in  [ 18 ]  can be used for simulating the dynamics of LOBs with or without interaction before extending the algorithm for the evaluation of trading strategies.",
            "Algorithm  KNNR  is a so-called lazy learning algorithm as it does not require any optimization. This is in contrast to generative deep learning models, where training can be unstable. However, the method still provides a large variability in path generation as for any initial state the algorithm is able to build up to  K T n superscript K subscript T n K^{T_{n}} italic_K start_POSTSUPERSCRIPT italic_T start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT end_POSTSUPERSCRIPT  different possible paths which are all equally likely to occur. Furthermore, Algorithm  KNNR  can be parallelized and efficiently implemented with a tree-based nearest neighbor search using standard machine learning libraries. Also it only requires the tuning of one hyper-parameter  the number of nearest neighbors. These considerations make Algorithm  KNNR  easy to implement and to run on any given data set. We refer the reader to  [ 18 ]  for more details on implementation and computational considerations.",
            "This section presents and discusses different outputs from applying Algorithm  KNNR  to real LOB data. In parts, we will use evaluation methods for LOB simulations proposed in  [ 10 ,  11 ,  38 ,  29 ] . First, we will focus on the simulation capability of Algorithm  KNNR  without any interactions by a trading agent. If we compare the simulation results to actual market replays, we consider out-of-sample performance. This means we divide the data set in two parts with a 80%-to-20% split 8 8 8 We split our data set deterministically in accordance to the ordering introduced in Section  4 . This means that testing data stems mostly from a single contract and chronological consistency of the split is kept within each contract, see e.g.  [ 41 ] . . We use the smaller set as ground truth and for initial states in resampling. The larger set is used as data source for the resampled transitions. We use this splitting procedure to ensure that the shown simulation results are not biased from reusing the actual market observations. For investigating market impact, we then consider simulations where a trading agent either places market or limit orders.",
            "First, we consider the real and resampled marginal volume distribution at different order book levels. For this, we will use a slightly different formulation for LOB snapshots introduced in  [ 11 ] , i.e., we will fix the dividing price  p 0  subscript superscript p 0 p^{*}_{0} italic_p start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT  from before transitioning and center the LOB after the transition at that price. We use signed volumes that are negative for bid order volumes and positive for ask order volumes: for a bid price level   p 0    k   superscript subscript p 0 k  \\lfloor p_{0}^{*}\\rfloor-k\\delta  italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  - italic_k italic_  with  k  N > 0 k subscript N absent 0 k\\in\\mathbb{N}_{>0} italic_k  blackboard_N start_POSTSUBSCRIPT > 0 end_POSTSUBSCRIPT  and  t = 1 t 1 t=1 italic_t = 1 , we will consider the volume  V  p 0    k    ( t ) subscript V superscript subscript p 0 k  t V_{\\lfloor p_{0}^{*}\\rfloor-k\\delta}(t) italic_V start_POSTSUBSCRIPT  italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  - italic_k italic_ end_POSTSUBSCRIPT ( italic_t )  with a negative sign if   p 0    k   superscript subscript p 0 k  \\lfloor p_{0}^{*}\\rfloor-k\\delta  italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  - italic_k italic_  is on the bid side at time  t t t italic_t , and with a positive sign else. We denote the signed volume by  V ~  p 0    k    ( t ) subscript ~ V superscript subscript p 0 k  t \\tilde{V}_{\\lfloor p_{0}^{*}\\rfloor-k\\delta}(t) over~ start_ARG italic_V end_ARG start_POSTSUBSCRIPT  italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  - italic_k italic_ end_POSTSUBSCRIPT ( italic_t ) . The definition is analogous for ask prices. This formulation allows us to compare the volume at a given price level and include information on order book movements, i.e., if we consider a bid price   p 0    k   superscript subscript p 0 k  \\lfloor p_{0}^{*}\\rfloor-k\\delta  italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  - italic_k italic_  for positive  V ~  p 0    k    ( t ) subscript ~ V superscript subscript p 0 k  t \\tilde{V}_{\\lfloor p_{0}^{*}\\rfloor-k\\delta}(t) over~ start_ARG italic_V end_ARG start_POSTSUBSCRIPT  italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  - italic_k italic_ end_POSTSUBSCRIPT ( italic_t )  we can infer that the market moved downwards and   p 0    k   superscript subscript p 0 k  \\lfloor p_{0}^{*}\\rfloor-k\\delta  italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT  - italic_k italic_  is an ask price at  t = 1 t 1 t=1 italic_t = 1 . Furthermore, we normalize the volume  V V V italic_V  with the square root transformation  sign  ( V )  | V | / 100 sign V V 100 \\operatorname{sign}(V)\\sqrt{|V|}/100 roman_sign ( italic_V ) square-root start_ARG | italic_V | end_ARG / 100  as in  [ 11 ]  to control the skewness of the volume distribution.",
            "On the right in Figure  6 , we give the average (normalized) volume after a transition for the real and the simulated LOB on different LOB levels. We report bid volumes as being negative signed and ask volumes as positive. The real and simulated average volumes are almost indistinguishable. Very small differences can be observed on the LOB levels furthest away from the spread on both sides where the simulated market has slightly less volume compared to the real market. Comparing this result to a benchmark which unconditionally and uniform randomly selects a transition from the training data (cf. Figure  15 ) reveals that Algorithm  KNNR  is better in fitting the average volumes for the samples from the test data. The discrepancy between the benchmark and the averages from the test data points to a slight distributional shift between the training and test split of the data. This distributional shift seems to be captured by Algorithm  KNNR  and shows that our method goes beyond an unconditional law of large numbers. We further discuss this comparison in Appendix  A .",
            "To enhance the point that Algorithm  KNNR  captures conditionality, we consider an additional experiment where the initial states show strong order book imbalances. These are known to be predictors for price movements, e.g.  [ 8 ] . A large negative value signifies a much lower volume on the bid compared to the ask. Hence, the best bid level is more likely to be depleted, giving a larger probability for downward move in the price. For larger positive values of the order book imbalance the opposite is implied. In Figure  10 , we randomly choose initial states for which the order book imbalance is within the 0-0.05 quantile (left) or the 0.95-1 quantile (right). With these initial states, we compare the real mid-price return time-series with the simulated ones (cf. Figure  8 ). As expected, the distribution of the real returns exhibits the impact of the large scale order book imbalances. For large negative values of the order book imbalance at the initial state the mean and the quantiles shift downward (left) at the beginning of the time horizon and then remain at this new level. For large positive values (right), we see an analogous upward shift. The simulated mid-price returns exhibit for both cases the same behavior where the distributional attributes closely match the real returns. This allows the conclusion that Algorithm  KNNR  is capable of capturing the conditional dependence in the order book transition on the current order book imbalance.",
            "We evaluate the KS statistic for several different features, namely, we consider the marginal distributions for order book sizes for one transition (as in Figure  6 ), the weighted mid-price and the mid-price return distribution (cf. Figure  8 ) and the distribution of order book imbalances (OBI) 9 9 9 For the definition of the order book imbalance, see Section  2 .  at different times  s s s italic_s . To assess the realized values of the test statistic, we compare Algorithm  KNNR  to benchmark models, specifically an out-of-the-box implementation of the LOB generator (CGAN) suggested in  [ 11 ]  and a simple randomized replay of LOB transitions (naive). Implementation details and the corresponding comparison of the benchmarks with the real market can be found in Appendix  A . Similar to  [ 29 ] , for reporting, we calculate the KS statistic for 1000 samples of the simulation and compare them to 1000 samples from the real distribution. We repeat this procedure 10 times and report the mean and the standard deviation for the KS statistic.",
            "Table  1  shows that Algorithm  KNNR  consistently outperforms our benchmarks for most variables. In particular, we highlight that all features related to returns outperform both the CGAN and the naive benchmark. We note that features related to returns are of particular interest as they capture the conditional dynamics of the order book by the evolution of prices in contrast to the volume-based measures. For these volume-based features, an unconditional central limiting behaviour is potentially sufficient as evidenced by the strong performance of the naive benchmark for order book imbalances after multiple transitions. Furthermore, we observe that the CGAN benchmark outperforms the naive benchmark for the majority of features and, in particular, on all return features.",
            "Next, we investigate the impact of market orders by a trading agent on the market simulation. In general, markets are expected to respond to market orders of sufficient size in an adverse way. For example, if a trader places a large sell order, the market price will tend to decrease. The impact of market orders is a widely researched topic, e.g.  [ 48 ] , as it can have a significant negative effect on profits from trading. It is suggested e.g. in  [ 20 ,  17 ,  47 ]  that the market impact is proportional to the square root of the order size  P P P italic_P  divided by the daily trading volume  V     V \\overline{V} over  start_ARG italic_V end_ARG ,",
            "The first plot in Figure  11  shows the evolution of the average mid-price market returns for different parent order sizes over time. The shaded areas reflect the central quartiles (0.25-0.75). One can immediately see the adverse effect of market sell orders on the price as the average return decreases over time up until trading stops, after which the prices seem to remain constant. This corresponds to the simulation results for market orders in  [ 11 ,  10 ] . The average price impacts are ordered by the size of market orders and the return ranges increase for increasing market orders. Especially for very large orders, the average return is at places smaller than the 0.25-quantile, suggesting that outliers impact the mean paths.",
            "We note that regimes with extremely large market orders of the size tested in our experiments are very rare in our data set and, thus, coverage under resampling is not as good as in ordinary market regimes. This leads to poor tail behaviour for the resamped scenarios. Thus, we will focus on the central quartiles of market responses to exclude outliers in the following analysis. To ensure comparability, we do this across all position sizes. A possible alternative could be the implementation of a mixture model that combines our non-parametric approach with a parametric model for regions with insufficient coverage similar to  [ 19 ] .",
            "Next, we investigate the shape of the market impact. For this purpose, we calculate the correlation between the mid-price return at time  t ~ n subscript ~ t n \\widetilde{t}_{n} over~ start_ARG italic_t end_ARG start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  and the power of the weighted parent order size  ( P / V   )  superscript P   V  \\left(P/\\overline{V}\\right)^{\\gamma} ( italic_P / over  start_ARG italic_V end_ARG ) start_POSTSUPERSCRIPT italic_ end_POSTSUPERSCRIPT  for different values of    \\gamma italic_ . As a proxy for the daily volume  V     V \\overline{V} over  start_ARG italic_V end_ARG , we use the volume of the entire order book at the initial starting point. This is necessary since our data set contains trading regimes with varying levels of liquidity due to the seasonality of trading in particular futures contracts. The second graph in Figure  11  plots this correlation against different values of    \\gamma italic_ . The resulting image is roughly parabola-shaped with a minimum value of  0.74 0.74 0.74 0.74  at around   = 0.55  0.55 \\gamma=0.55 italic_ = 0.55 . This suggests that the weighted parent order size has the most explanatory power for the mid-price return if   = 0.55  0.55 \\gamma=0.55 italic_ = 0.55 .The varying thickness of the line represents the 99%-confidence interval for this estimate. Hence, the correlation value at   = 0.55  0.55 \\gamma=0.55 italic_ = 0.55  is significantly smaller than at   = 1  1 \\gamma=1 italic_ = 1 , giving strong evidence for a concave function shape. To show the fit of the classical    \\sqrt{\\cdot} square-root start_ARG  end_ARG -law, we regress  ( P / V   ) 0.5 superscript P   V 0.5 \\left(P/\\overline{V}\\right)^{0.5} ( italic_P / over  start_ARG italic_V end_ARG ) start_POSTSUPERSCRIPT 0.5 end_POSTSUPERSCRIPT  against the mid-price returns and plot the fit in the right-most graph in Figure  11 . The varying thickness of the line indicates the 95%-confidence interval for the estimate. The plot reveals a good fit to a square-root model with nearly optimal explanatory power out of the power-law model class. One should note, however, that the confidence bands reveal a slight heteroscedastic error with increased errors for large values of weighted order volumes.",
            "Similar to market orders, we expect an adversarial effect of large limit orders on the price, i.e.  [ 24 ,  15 ,  42 ] .",
            "We exhibit our results in Figure  12 . The plots show for different order book levels the weighted return paths for different parent order sizes and the shaded areas correspond to the central quartiles (0.25-0.75). For the case where the orders are placed on the best bid and ask level, one can directly see the adverse effect of the limit orders on the weighted return. Namely, for large ask orders, the weighted return decreases while for large bid orders it increases. The average return impacts are ordered by the size of the orders. Once trading stops, the return levels stabilize at the new price level (cf.  [ 11 ] ). For limit orders placed on the second best ask level, the impact is not perfectly ordered by order size any more and is smaller in scale compared to order placement at the best level. This is consistent with the observation that the SOFR futures market only tends to move by single tick increments (cf. Figure  6 ) as the relatively small variability allows traders to reposition themselves once a new price level is reached.",
            "In this section, we show how Algorithm  KNNR  can be used to evaluate and choose trading strategies. A central theme for placing limit orders in markets with a pro-rata type execution mechanism is choosing the right quoting amount. In particular, it is well known that market participants tend to place limit orders with a volume larger than they would like to execute (overquoting), e.g.  [ 16 ,  21 ] . Market participants overquote because it increases their relative volume share on a given order book level and with it the probability of being allocated an incoming market order. The trade-off present with overquoting is the possibility that too many trades are executed against the volume posted by the trader. Balancing this trade-off via the quoting volume is key for execution and market making strategies in markets with narrow spreads and high trading volumes such as the SOFR futures market.",
            "In Figure  13 , we report the results for this experiment. In the left-hand plot, we use box plots to report the distributions of executed volumes normalized by the number of transitions for different order sizes. The whiskers highlight the 0.025 and the 0.975 quantile, the box represent the first and third quartile and the median is given by the line contained in the box 11 11 11 We use this convention for all box plots in this paper. . First, one can see that all reported quantiles, except the 0.025 one, increase for an increasing order size. If the trading agent only places an order with volume 1 each period the executed volume per transition is close to zero. On the other hand, if order sizes are between 50 and 100 contracts, the median executed volume per transition is around one. However, the upper quartile and the 0.975-quantile can be significantly higher. To achieve a time-averaged executed volume per transition of one contract, a trader would need to increase their order size substantially above one, which brings the risk of overshooting the target and having to trade more volume than desired. Note that this behavior is consistent with the empirical findings and the theoretical model described in  [ 16 ]  and that the exact choice of order size would depend on the traders risk profile. The box plot on the left in Figure  13  shows the ratio between filled orders and total posted volume over time (fill ratio). Overall, the fill ratios and their variation tend to decrease for increasing order sizes. This behavior of the market further encourages overquoting as it counteracts the risk of overfilling.",
            "In our second experiment, we demonstrate how Algorithm  KNNR  can be used to calibrate a trading strategy. For this purpose, we consider a trader who seeks to unwind their long position using limit orders over a certain time horizon 12 12 12 Note that the first experiment and  [ 16 ]  differ in context to this second experiment. Instead of focussing on a one shot/per-transition trade target, this experiment takes into account the time dependency of the execution problem limiting its comparability. . We consider a simple execution strategy whereby the trader quotes a multiple of the remaining inventory on the best ask level, i.e. the quoted volume on the best ask will be  k  I s k subscript I s kI_{s} italic_k italic_I start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT , with  I s subscript I s I_{s} italic_I start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT  the inventory after the  s s s italic_s -th transition and  k k k italic_k  is the order multiplier. Should the inventory become negative, meaning the trader has a short position, all remaining volume on the best ask will be cancelled. Instead, the trader will place an order of size  k  | I s | k subscript I s k|I_{s}| italic_k | italic_I start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT |  on the best bid level. All remaining inventory at the last transition will be executed via a market order. To calibrate the trading strategy, we run Algorithm  KNNR  for different values of  k k k italic_k  ranging from  0.5 0.5 0.5 0.5  to  2.5 2.5 2.5 2.5  with the starting inventory  I 0 = 40 subscript I 0 40 I_{0}=40 italic_I start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = 40 .",
            "The results of this experiment are reported in Figure  14 . The left plot shows mean inventory paths (lines) and the 90%-quantile intervals for inventories (shaded areas) for different values of the order multiplier. The mean inventory paths and quantile intervals are decreasing and are ordered by the value of the order multiplier. The lower quantile values decrease especially fast for the medium and larger order multipliers, hinting that a single trade is potentially enough to execute all the inventory. Further note that for values where the order multiplier is larger than one, the trader may overshoot their trading target and may end up with a short position that then needs to be unwinded during the remaining trading period. The upper quantile limit on the other hand remains close to  40 40 40 40  over a longer period of time for all order multipliers. This implies that there is a possibility that no trade is executed against our traders limit orders. The upper quantiles then start decreasing after some time for all  k k k italic_k . For larger  k k k italic_k , this decrease starts earlier, signifying that larger orders are more likely to be (partially) executed in this pro-rata type market.",
            "The middle plot in Figure  14  shows the distribution of inventories at the last time step before the market orders are executed for different order multipliers. For  k = 0.5 k 0.5 k=0.5 italic_k = 0.5 , it is infeasible that the entire inventory is executed via limit orders and the median is relatively large. This means that a large proportion of inventory will be executed via market orders. If the order multiplier is equal to one, the trader cannot overshoot the execution target with limit orders. The median final inventory is close to zero, but, compared to larger  k k k italic_k , the upper quartile is larger, implying a higher reliance on market orders. For  k = 1.25 k 1.25 k=1.25 italic_k = 1.25 , the lower quartile and the median coincide at a zero inventory and the trade target is overshot only in the tails. Furthermore, the upper quartile is lower compared to  k = 1.0 k 1.0 k=1.0 italic_k = 1.0 , implying less reliance on market sell orders. For large values of  k k k italic_k , we observe that the trade target is consistently overshot, which will require market buy orders to unwind short positions. On the other hand, the upper quartile remains almost unchanged compared to  k = 1.25 k 1.25 k=1.25 italic_k = 1.25 . Finally, note that the upper whisker is for all order multipliers equal to the initial inventory. This points to the possibility that no order is filled via limit orders for all multipliers.",
            "Since executing market orders requires paying the spread, we expect that order multipliers requiring large market orders in the final period will exhibit a higher cost of execution. To investigate this hypothesis, we compare the average earnings per asset for different values of the order multiplier. We quantify the earnings by dividing the total earned cash by the initial inventory and then subtracting the initial price. The corresponding plot can be found in Figure  14  on the right. First, note that for all order multipliers the relative average cash earnings are negative, implying a cost of execution on average. The scale of the execution costs varies around half a tick size. Highest earnings (or lowest execution costs) are reached at  k = 1.25 k 1.25 k=1.25 italic_k = 1.25 , while they decrease consistently for smaller and larger values in  k k k italic_k . Considering the box plot on final inventories and its discussion, this observation is consistent with the hypothesis that order multipliers requiring larger market orders will perform worse. In particular, for  k = 1.25 k 1.25 k=1.25 italic_k = 1.25 , market sell orders are less often needed compared to smaller  k k k italic_k  and this benefit seems to outweigh the occasional costs associated to overshooting. On the other hand, for larger  k k k italic_k , the additional costs of overshooting outweigh any potential benefit of additional unit execution. From the view point of strategy calibration, this experiment implies that a risk neutral trader should choose  k = 1.25 k 1.25 k=1.25 italic_k = 1.25  to minimize expected execution costs.",
            "In addition to the current volume levels in the order book, we include features containing information on recent price moves and trading activity in the LOB state. Namely, we add mid-price returns and trade imbalances 13 13 13 The trade imbalance is given as the volume of all buyer-initiated trades divided by the volume of all trades over a given period of time, see e.g.  [ 10 ] .  over different time windows for each sample in the data set. This is done by slightly modifying the data set generation. In addition to the procedure described in Section  4 , we look up for each LOB snapshot the mid-price that was observed a certain number of LOB events before the snapshot was taken. With the previous mid-price and the mid-price of the current snapshot we calculate the mid-price return for each sample. We do this for a differing number of preceding order book events. In this experiment, we choose the number of order book events for mid-price returns by 250, 1250, and 5000 order book events. This gives us 3 additional matching dimensions in the nearest neighbor search. Similarly, we add the trade imbalances where the feature is calculated for the previous 250, 2500, and 12500 order book events for each snapshot. In total, we then have a 16-dimensional state space. For normalization, we take the square root of the order book volumes and then apply a  z z z italic_z -score transformation to all variables. With the normalized features, we calculate the weight vector for a principal component analysis (PCA) and reduce the dimension of the data to the first eight principal components, which explain around 80% of the datas variability.",
            "For comparability, we conduct the same benchmark analysis based on KS statistics as in Section  5.4  and report the results in Table  2 . We highlight the variables that improved in comparison to Table  1 , and we see that Algorithm  KNNR  with an extended state space improves on the majority of tested features. Note that we investigated only one particular combination of features and dimension reduction. Other combinations may be more effective and their choice may depend on the task at hand. We leave the exploration of more principled approaches for LOB representations in the context of order book simulations for future work.",
            "Figure  15  corresponds to Figure  6  in the main part. In Figure  15 , we observe that naive sampling reproduces the marginal volume distributions relatively well although with more discrepancies compared to Algorithm  KNNR  (cf. Table  1 ). The average LOB volumes have a similar shape but are slightly lower compared to the transitions from the test data. The discrepancies reveal a slight distributional shift between the training data that was used for naive sampling and the test data used for the real transitions. The LLN should give the same results if the sampling distributions are the same (up to the sampling error). This sampling error becomes negligible especially for the average LOB shapes with  10 4 superscript 10 4 10^{4} 10 start_POSTSUPERSCRIPT 4 end_POSTSUPERSCRIPT  samples. While naive sampling is not capable to account for this shift, Algorithm  KNNR  with its conditional resampling is able to adapt.",
            "Figure  16  corresponds to Figure  7  in the main part. The first plot shows that the unconditional LLN is relatively efficient in reproducing the static correlation structure between different order book levels. However, the naive method is unable to reproduce the correlation structure of changes in volumes, as can be seen in the second plot of Figure  16 . As the naive sampling approach can be seen as independent of the initial state, a simple calculation on the correlation coefficient reveals that the correlation of the differences simply corresponds to the correlation of the static volumes for the naive sampling method. This reveals an important distinction between naive sampling and Algorithm  KNNR , which is capable of reproducing the correlation structure of changes in volume.",
            "Figure  17  corresponds to Figure  8  in the main part. In Figure  17 , we compare the mid and the weighted mid-return of the naive sampling method with real return series. We observe that for both plots the average returns coincide at zero. Note that all quantiles of the simulated returns expand faster compared to the quantiles of the real return time series. The slower expansion of the real return distribution indicates that a price movement in the same direction is less likely to occur right after another. In contrast to Algorithm  KNNR , the naive sampling method does not capture this conditional price movement behavior.",
            "Figure  18  corresponds to Figure  9  in the main part. The first plot in Figure  18  reveals that there is no correlation of the mid-price return for the naive sampling method. The second plot for weighted mid-price returns shows a small positive correlation that lasts for a short duration. After that, the correlation becomes statistically insignificant. Considering the covariance structure of the returns, this is most likely explained by the correlation of the initial weighted price with the real return time series. We note in particular that the weighted price contains more information on the order book shape compared to the unweighted mid-price. In comparison to Algorithm  KNNR , we observe that the correlation for naive sampling vanishes faster and is smaller in scale. This further points to the fact that Algorithm  KNNR  is capable of extracting the conditional influence of the initial state beyond the information contained in the initial weighted price.",
            "The second benchmark we implement is the generative adversarial neural network for conditional LOB simulation proposed in  [ 11 ] . Wherever possible, we follow the implementation as stated in the original paper and refer to that paper for implementation details. In cases where the original paper does not specify concrete parameter values, we conducted a heuristic hyperparameter search 14 14 14 By hyperparameter search, we choose the noise seed with 10 dimensions and a batch size of 256 samples. . We present the model giving the best performance for the KS test statistics as reported in Table  1 . Furthermore, the results presented below confirm that the CGAN method is applicable to our data set and that the chosen model is a good LOB simulator.",
            "For this method, we only simulate the three highest levels of the LOB instead of the five highest. As the CGAN method encodes price movements within a given window of price levels, the two extra order book levels are needed as a buffer in the generation of the training data set. Furthermore, this implementation is consistent with  [ 11 ]  who also consider the three highest levels of the order book.",
            "Figure  19  corresponds to Figure  6  in the main part. The left-hand plots show that the CGAN method is well capable of reproducing the marginal distributions of volumes for our data set. The right-hand plot demonstrates that also the average order book shape produced by the CGAN method fits the real transitions well. Note that the missing averages for the forth and fifth highest order book level are due to the encoding of price changes as explained above.",
            "Figure  21  corresponds to Figure  8  in the main part. For both the weighted and the unweighted return series the central quantiles of the simulation fit well with the central quantiles of the real returns time series. As in the results for Algorithm  KNNR , the tails of the real returns extend further than the tails of the simulation.",
            "To conclude, we compare some other aspects of the CGAN approach with Algorithm  KNNR . First, we note that training CGAN requires us to solve a complicated optimization problem that is potentially unstable (cf.  [ 11 ] ). In contrast, Algorithm  KNNR  does not require any optimization. Once trained, the parameters of the CGAN encode all learned market dynamics. First, this has the advantage that the system noise can be easily controlled in evaluation, which simplifies counterfactual comparisons. Second, the evaluation complexity of a CGAN data generator is constant in data set size. Computational costs for evaluation phase for algorithm  KNNR  on the other hand grow on average logarithmically in the data set size ( [ 18 ] ). The disadvantage of encoding the market dynamics in a neural network is that the simulator is effectively a black box and unrealistic order book transitions cannot be ruled out. Algorithm  KNNR  is based on a simple rule based assignment and each sampled transition stems from a historical observation. Finally, the CGAN method as presented in  [ 11 ]  did not address evaluating trading strategies with limit orders, which we included in Algorithm  KNNR ."
        ]
    },
    "id_table_2": {
        "caption": "Table 2 :  Mean and standard deviation for the KS test statistic for the extended  KNNR  Algorithm.",
        "table": "S5.T1.59.59",
        "footnotes": [
            ""
        ],
        "references": [
            "The academic interest in the simulation of LOBs is well documented by the broad and recent literature. A current literature review of this subject matter  [ 30 ]  identifies four major approaches to LOB simulations: Point processes  [ 6 ,  14 ,  4 ,  27 ,  35 ,  36 ,  31 ] , agent based modelling  [ 39 ,  7 ,  5 ,  45 ] , stochastic differential equations models  [ 12 ,  32 ,  28 ,  26 ,  13 ]  and deep/statistical learning  [ 33 ,  44 ,  34 ,  10 ,  11 ,  38 ,  29 ] . We note that the first three approaches usually require explicit modelling choices on either market dynamics or interactions of market participants. While this view allows for the direct choice of relevant market characteristics, it poses the risk of fundamental modelling biases in the market dynamics. For applications in actual markets, these approaches often require the additional non-trivial step of calibration to market data and may require a high level of granularity in the data.",
            "The other papers using deep learning for LOB simulation often have a slightly different focus. Namely,  [ 33 ,  44 ,  34 ,  10 ,  38 ,  29 ]  considers event-by-event simulation within the LOB rather than the transition between LOB snapshots as in  [ 11 ]  and in this paper. We note that this may depend on the objective of the simulation. Event-by-event simulation are particularly useful for ultra-high frequency traders where a single event may cause the trader to react. Considering transitions between LOB snapshots on the other hand is often sufficient for practical applications in high to medium-high frequency trading. Note that our algorithm could be readily modified for event-by-event simulations  we leave this investigation for future work.",
            "We organize the paper as follows. Section  2  introduces our notation and assumptions for LOBs. Section  3  describes our algorithm and how it can be used for LOB simulations. Section  4  details the data set that we use to test the resampling algorithm. Section  5  explores the quality of the simulations, with and without trade interventions. In Section  6 , we demonstrate how trading strategies with limit orders can be evaluated and chosen based on our simulation approach. Section  7  considers a higher dimensional state space and usage of dimension reduction for the resampling. Section  8  concludes the paper.",
            "Figure  2  demonstrates for an example LOB snapshot how prices can differ for different price definitions. The dividing price is seen as given (see footnote) while the mid-price and the weighted mid-price depend on the current shape of the order book.",
            "We choose to model the price explicitly in order to facilitate the assignment of empty tick sizes in the LOB snapshots and we assume that the price level does not have an impact on the shape of the subsequent order book. Furthermore, the iid assumption on the system noise implies that the system is Markovian. Random dynamical system formulations for LOBs are common in the literature and can, for example, be found in  [ 14 ,  12 ,  2 ,  26 ] .",
            "In our experiments, we choose the nearest neighbor parameter  K = 20 K 20 K=20 italic_K = 20  heuristically, which is common practice in machine learning, i.e.  [ 23 ] . We note that most theoretical results on the choice of  K K K italic_K  only give growth rates in dependence of the data set size, i.e.  [ 22 ] , rather then prescribing a specific  K K K italic_K  for a fixed data set size. An additional consideration, beyond the classical bias-variance trade-off in nearest neighbor regressions is that the parameter  K K K italic_K  in Algorithm  KNNR  also determines the number of possible paths that can be generated and may significantly impact the computational costs of the algorithm.",
            "We use trading data over a period of two years for 3-month Secured Overnight Financing Rate (SOFR) futures traded at the CME from January 2022 to January 2024 (see first plot in Figure  4 ). SOFR replaced the USD LIBOR as the main overnight interest rate in the US and is based on actual repo transactions on US treasuries  [ 25 ] . The 3-month SOFR futures traded at the CME replaced Eurodollar futures and are a main source for price discovery in short-term interest rates. The contracts are used by traders for hedging short-term interest rates exposures and for yield curve and spread strategies. Furthermore, they are highly liquid with trading of over 5 million contracts each day on average  [ 9 ] . For execution, the futures are centrally cleared using a limit order book where limit orders are executed according to CMEs Allocation algorithm.",
            "This section presents and discusses different outputs from applying Algorithm  KNNR  to real LOB data. In parts, we will use evaluation methods for LOB simulations proposed in  [ 10 ,  11 ,  38 ,  29 ] . First, we will focus on the simulation capability of Algorithm  KNNR  without any interactions by a trading agent. If we compare the simulation results to actual market replays, we consider out-of-sample performance. This means we divide the data set in two parts with a 80%-to-20% split 8 8 8 We split our data set deterministically in accordance to the ordering introduced in Section  4 . This means that testing data stems mostly from a single contract and chronological consistency of the split is kept within each contract, see e.g.  [ 41 ] . . We use the smaller set as ground truth and for initial states in resampling. The larger set is used as data source for the resampled transitions. We use this splitting procedure to ensure that the shown simulation results are not biased from reusing the actual market observations. For investigating market impact, we then consider simulations where a trading agent either places market or limit orders.",
            "The previous analysis of the simulation results for Algorithm  KNNR  focused on a comparison with real markets. To benchmark our method against other LOB simulation techniques, we follow  [ 29 ]  and compute the two-sample Kolmogorov Smirnov (KS) test statistic for the empirical distribution of the simulation with the real empirical distribution for certain features of interest. The two-sample Kolmogorov Smirnov (KS) test statistic is given by",
            "We evaluate the KS statistic for several different features, namely, we consider the marginal distributions for order book sizes for one transition (as in Figure  6 ), the weighted mid-price and the mid-price return distribution (cf. Figure  8 ) and the distribution of order book imbalances (OBI) 9 9 9 For the definition of the order book imbalance, see Section  2 .  at different times  s s s italic_s . To assess the realized values of the test statistic, we compare Algorithm  KNNR  to benchmark models, specifically an out-of-the-box implementation of the LOB generator (CGAN) suggested in  [ 11 ]  and a simple randomized replay of LOB transitions (naive). Implementation details and the corresponding comparison of the benchmarks with the real market can be found in Appendix  A . Similar to  [ 29 ] , for reporting, we calculate the KS statistic for 1000 samples of the simulation and compare them to 1000 samples from the real distribution. We repeat this procedure 10 times and report the mean and the standard deviation for the KS statistic.",
            "Next, we investigate the impact of market orders by a trading agent on the market simulation. In general, markets are expected to respond to market orders of sufficient size in an adverse way. For example, if a trader places a large sell order, the market price will tend to decrease. The impact of market orders is a widely researched topic, e.g.  [ 48 ] , as it can have a significant negative effect on profits from trading. It is suggested e.g. in  [ 20 ,  17 ,  47 ]  that the market impact is proportional to the square root of the order size  P P P italic_P  divided by the daily trading volume  V     V \\overline{V} over  start_ARG italic_V end_ARG ,",
            "Similar to market orders, we expect an adversarial effect of large limit orders on the price, i.e.  [ 24 ,  15 ,  42 ] .",
            "We exhibit our results in Figure  12 . The plots show for different order book levels the weighted return paths for different parent order sizes and the shaded areas correspond to the central quartiles (0.25-0.75). For the case where the orders are placed on the best bid and ask level, one can directly see the adverse effect of the limit orders on the weighted return. Namely, for large ask orders, the weighted return decreases while for large bid orders it increases. The average return impacts are ordered by the size of the orders. Once trading stops, the return levels stabilize at the new price level (cf.  [ 11 ] ). For limit orders placed on the second best ask level, the impact is not perfectly ordered by order size any more and is smaller in scale compared to order placement at the best level. This is consistent with the observation that the SOFR futures market only tends to move by single tick increments (cf. Figure  6 ) as the relatively small variability allows traders to reposition themselves once a new price level is reached.",
            "In this section, we show how Algorithm  KNNR  can be used to evaluate and choose trading strategies. A central theme for placing limit orders in markets with a pro-rata type execution mechanism is choosing the right quoting amount. In particular, it is well known that market participants tend to place limit orders with a volume larger than they would like to execute (overquoting), e.g.  [ 16 ,  21 ] . Market participants overquote because it increases their relative volume share on a given order book level and with it the probability of being allocated an incoming market order. The trade-off present with overquoting is the possibility that too many trades are executed against the volume posted by the trader. Balancing this trade-off via the quoting volume is key for execution and market making strategies in markets with narrow spreads and high trading volumes such as the SOFR futures market.",
            "In this section, we provide a strategy on how to extend Algorithm  KNNR  to a more complex state space. In particular, we expand the state space by multiple features beyond LOB snapshots. Adding these additional features will increase the dimensionality beyond the level usually seen as appropriate for nearest neighbor search due to the curse of dimensionality; see e.g.  [ 22 ] . We show how this issue can be overcome with simple dimension reduction techniques and how this can lead to beneficial results.",
            "For comparability, we conduct the same benchmark analysis based on KS statistics as in Section  5.4  and report the results in Table  2 . We highlight the variables that improved in comparison to Table  1 , and we see that Algorithm  KNNR  with an extended state space improves on the majority of tested features. Note that we investigated only one particular combination of features and dimension reduction. Other combinations may be more effective and their choice may depend on the task at hand. We leave the exploration of more principled approaches for LOB representations in the context of order book simulations for future work.",
            "Figure  20  corresponds to Figure  7  in the main part. In the first plot in Figure  20 , we observe that the CGAN method is effective in capturing the correlation structure for volume levels and only shows minor differences. The second plot in Figure  20  reveals an overall good fit in the correlation of volume changes pointing to the effectiveness in conditional sampling of the CGAN method. For a few volume levels, we see some larger differences in correlations, e.g. ask2-bid2.",
            "Figure  21  corresponds to Figure  8  in the main part. For both the weighted and the unweighted return series the central quantiles of the simulation fit well with the central quantiles of the real returns time series. As in the results for Algorithm  KNNR , the tails of the real returns extend further than the tails of the simulation.",
            "Figure  22  corresponds to Figure  9  in the main part. Figure  22  reveals a correlation between the real and the simulated return time series for both weighted and unweighted mid-price. Surprisingly, the correlation is initially small for a short time and then becomes positive before vanishing again."
        ]
    },
    "id_table_3": {
        "caption": "",
        "table": "S7.T2.28.28",
        "footnotes": [
            "",
            ""
        ],
        "references": [
            "The academic interest in the simulation of LOBs is well documented by the broad and recent literature. A current literature review of this subject matter  [ 30 ]  identifies four major approaches to LOB simulations: Point processes  [ 6 ,  14 ,  4 ,  27 ,  35 ,  36 ,  31 ] , agent based modelling  [ 39 ,  7 ,  5 ,  45 ] , stochastic differential equations models  [ 12 ,  32 ,  28 ,  26 ,  13 ]  and deep/statistical learning  [ 33 ,  44 ,  34 ,  10 ,  11 ,  38 ,  29 ] . We note that the first three approaches usually require explicit modelling choices on either market dynamics or interactions of market participants. While this view allows for the direct choice of relevant market characteristics, it poses the risk of fundamental modelling biases in the market dynamics. For applications in actual markets, these approaches often require the additional non-trivial step of calibration to market data and may require a high level of granularity in the data.",
            "The other papers using deep learning for LOB simulation often have a slightly different focus. Namely,  [ 33 ,  44 ,  34 ,  10 ,  38 ,  29 ]  considers event-by-event simulation within the LOB rather than the transition between LOB snapshots as in  [ 11 ]  and in this paper. We note that this may depend on the objective of the simulation. Event-by-event simulation are particularly useful for ultra-high frequency traders where a single event may cause the trader to react. Considering transitions between LOB snapshots on the other hand is often sufficient for practical applications in high to medium-high frequency trading. Note that our algorithm could be readily modified for event-by-event simulations  we leave this investigation for future work.",
            "We organize the paper as follows. Section  2  introduces our notation and assumptions for LOBs. Section  3  describes our algorithm and how it can be used for LOB simulations. Section  4  details the data set that we use to test the resampling algorithm. Section  5  explores the quality of the simulations, with and without trade interventions. In Section  6 , we demonstrate how trading strategies with limit orders can be evaluated and chosen based on our simulation approach. Section  7  considers a higher dimensional state space and usage of dimension reduction for the resampling. Section  8  concludes the paper.",
            "incorporates bid side limit orders. The extension to the ask side is analogous. The third plot in Figure  3  shows how the volume of a buy limit order and a sell limit order is placed in a centered LOB snapshot. Furthermore, we analogously define the function  g C  ( ( S p t  l  ( t ) , p t  ) , c ) subscript g C subscript superscript S l superscript subscript p t t superscript subscript p t c g_{C}((S^{l}_{p_{t}^{*}}(t),p_{t}^{*}),c) italic_g start_POSTSUBSCRIPT italic_C end_POSTSUBSCRIPT ( ( italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ( italic_t ) , italic_p start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT ) , italic_c )  where instead of adding the cancelled volume is subtracted from the appropriate place in the centered LOB snapshot (see first plot in Figure  3 ).",
            "is used to account for the immediate effect of a buy market order on the LOB state. We visualize the placement of a buy market order in the second plot of Figure  3 . A sell order can be treated analogously. For a market order, we can further directly observe the trade revenue. Using the buy order and the order book from above the traders revenue is",
            "We give a full description of  K K K italic_K -NN resampling for LOB simulation in Algorithm  KNNR . We assume that we have access to a data set containing LOB transitions  D = { ( S p t i  l  ( t i ) , p t i , i  , S p t i +   t , i  l  ( t i +   t ) , p t i +   t , i  ) } i = 1 n D superscript subscript subscript superscript S l superscript subscript p subscript t i subscript t i superscript subscript p subscript t i i subscript superscript S l superscript subscript p subscript t i  t i subscript t i  t superscript subscript p subscript t i  t i i 1 n \\mathcal{D}=\\{(S^{l}_{p_{t_{i}}^{*}}({t_{i}}),p_{t_{i},i}^{*},S^{l}_{p_{t_{i}+% \\Delta t,i}^{*}}({t_{i}+\\Delta t}),p_{t_{i}+\\Delta t,i}^{*})\\}_{i=1}^{n} caligraphic_D = { ( italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ( italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ) , italic_p start_POSTSUBSCRIPT italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT , italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT + roman_ italic_t , italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ( italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT + roman_ italic_t ) , italic_p start_POSTSUBSCRIPT italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT + roman_ italic_t , italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT ) } start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT  and a trading agent with trading strategy  u  ( S p s  l  ( s ) , s ) u subscript superscript S l superscript subscript p s s s u(S^{l}_{p_{s}^{*}}({s}),s) italic_u ( italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ( italic_s ) , italic_s )  which takes an LOB snapshot  S p s  l  ( s ) subscript superscript S l superscript subscript p s s S^{l}_{p_{s}^{*}}({s}) italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ( italic_s )  and a time  s  [ 0 , T ] s 0 T s\\in[0,T] italic_s  [ 0 , italic_T ]  as input. The trading strategy then gives us the cancellations, the market order and the limit orders of the trading agent. We choose uniformly randomly an initial state  ( S p 0 l ^  ( 0 ) , p 0 ^ ) = ( S p t i  l  ( t i ) , p t i , i  ) ^ subscript superscript S l subscript p 0 0 ^ subscript p 0 subscript superscript S l superscript subscript p subscript t i subscript t i superscript subscript p subscript t i i (\\widehat{S^{l}_{p_{0}}}(0),\\widehat{p_{0}})=(S^{l}_{p_{t_{i}}^{*}}({t_{i}}),p% _{t_{i},i}^{*}) ( over^ start_ARG italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_POSTSUBSCRIPT end_ARG ( 0 ) , over^ start_ARG italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_ARG ) = ( italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ( italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ) , italic_p start_POSTSUBSCRIPT italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT ) . We then pass the state information to the trading strategy to get the traders action  ( { c j } j = 1 m , y , { x i } i = 1 n ) = u  ( S p 0 l ^  ( 0 ) , 0 ) superscript subscript subscript c j j 1 m y superscript subscript subscript x i i 1 n u ^ subscript superscript S l subscript p 0 0 0 (\\{c_{j}\\}_{j=1}^{m},y,\\{x_{i}\\}_{i=1}^{n})=u(\\widehat{S^{l}_{p_{0}}}(0),0) ( { italic_c start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT } start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_m end_POSTSUPERSCRIPT , italic_y , { italic_x start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT } start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ) = italic_u ( over^ start_ARG italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_POSTSUBSCRIPT end_ARG ( 0 ) , 0 )  . The traders actions are then incorporated using the functions  g C  (  ) , g M  (  ) subscript g C  subscript g M  g_{C}(\\cdot),g_{M}(\\cdot) italic_g start_POSTSUBSCRIPT italic_C end_POSTSUBSCRIPT (  ) , italic_g start_POSTSUBSCRIPT italic_M end_POSTSUBSCRIPT (  )  and  g L  (  ) subscript g L  g_{L}(\\cdot) italic_g start_POSTSUBSCRIPT italic_L end_POSTSUBSCRIPT (  )  leading to the modified state  S p 0 l ~  ( 0 ) ~ subscript superscript S l subscript p 0 0 \\widetilde{S^{l}_{p_{0}}}(0) over~ start_ARG italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_POSTSUBSCRIPT end_ARG ( 0 )  and price  p 0 ~ ~ subscript p 0 \\widetilde{p_{0}} over~ start_ARG italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_ARG  corresponding to line  7 7 7 7  in Algorithm  KNNR . We visualize an example for the steps of line  7 7 7 7  in Algorithm  KNNR  in Figure  3 . We choose uniformly at random one of the  K K K italic_K  nearest neighbors of  S p 0 l ~  ( 0 ) ~ subscript superscript S l subscript p 0 0 \\widetilde{S^{l}_{p_{0}}}(0) over~ start_ARG italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_POSTSUBSCRIPT end_ARG ( 0 )  and denote it by  S p t j  l    ( t j )   subscript superscript S l superscript subscript p subscript t j subscript t j \\overline{S^{l}_{p_{t_{j}}^{*}}}(t_{j}) over  start_ARG italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT end_POSTSUBSCRIPT end_ARG ( italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) . We then assign  S p 1 l ^  ( 1 ) = S p t j +   t  l    ( t j +   t ) ^ subscript superscript S l subscript p 1 1   subscript superscript S l superscript subscript p subscript t j  t subscript t j  t \\widehat{S^{l}_{p_{1}}}(1)=\\overline{S^{l}_{p_{t_{j}+\\Delta t}^{*}}}(t_{j}+% \\Delta t) over^ start_ARG italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT end_ARG ( 1 ) = over  start_ARG italic_S start_POSTSUPERSCRIPT italic_l end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_p start_POSTSUBSCRIPT italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT + roman_ italic_t end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT end_POSTSUBSCRIPT end_ARG ( italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT + roman_ italic_t )  and calculate the new price  p 1 ^ = p 0 ^ + ( p t j +   t     p t j    ) ^ subscript p 1 ^ subscript p 0   superscript subscript p subscript t j  t   superscript subscript p subscript t j \\widehat{p_{1}}=\\widehat{p_{0}}+(\\overline{p_{t_{j}+\\Delta t}^{*}}-\\overline{p% _{t_{j}}^{*}}) over^ start_ARG italic_p start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG = over^ start_ARG italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_ARG + ( over  start_ARG italic_p start_POSTSUBSCRIPT italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT + roman_ italic_t end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT end_ARG - over  start_ARG italic_p start_POSTSUBSCRIPT italic_t start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT end_ARG ) 6 6 6 Note that this is feasible since we assumed that the price level has no impact on the state transition. . Repeating this procedure  T n subscript T n T_{n} italic_T start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT -times for  T n  N > 0 subscript T n subscript N absent 0 T_{n}\\in\\mathbb{N}_{>0} italic_T start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT  blackboard_N start_POSTSUBSCRIPT > 0 end_POSTSUBSCRIPT  gives us one simulated path. We can repeat the path simulation and use the saved paths for our analysis.",
            "In our experiments, we choose the nearest neighbor parameter  K = 20 K 20 K=20 italic_K = 20  heuristically, which is common practice in machine learning, i.e.  [ 23 ] . We note that most theoretical results on the choice of  K K K italic_K  only give growth rates in dependence of the data set size, i.e.  [ 22 ] , rather then prescribing a specific  K K K italic_K  for a fixed data set size. An additional consideration, beyond the classical bias-variance trade-off in nearest neighbor regressions is that the parameter  K K K italic_K  in Algorithm  KNNR  also determines the number of possible paths that can be generated and may significantly impact the computational costs of the algorithm.",
            "As metric for the nearest neighbor search, we use Euclidean distances to keep the implementation as simple as possible. Other choices could be a weighted Euclidean norm putting more emphasis on order book levels closer to the dividing price or an unbalanced Wasserstein metric (e.g.  [ 43 ] ) emphasising a mass interpretation of the order book. To us, the appropriate notion of a metric in a LOB space is an open research question and is beyond the scope of this current work.",
            "This section presents and discusses different outputs from applying Algorithm  KNNR  to real LOB data. In parts, we will use evaluation methods for LOB simulations proposed in  [ 10 ,  11 ,  38 ,  29 ] . First, we will focus on the simulation capability of Algorithm  KNNR  without any interactions by a trading agent. If we compare the simulation results to actual market replays, we consider out-of-sample performance. This means we divide the data set in two parts with a 80%-to-20% split 8 8 8 We split our data set deterministically in accordance to the ordering introduced in Section  4 . This means that testing data stems mostly from a single contract and chronological consistency of the split is kept within each contract, see e.g.  [ 41 ] . . We use the smaller set as ground truth and for initial states in resampling. The larger set is used as data source for the resampled transitions. We use this splitting procedure to ensure that the shown simulation results are not biased from reusing the actual market observations. For investigating market impact, we then consider simulations where a trading agent either places market or limit orders.",
            "Other empirical findings, e.g.  [ 37 ,  3 ] , similarly suggest that the impact of order size follows a concave power law,",
            "In Figure  13 , we report the results for this experiment. In the left-hand plot, we use box plots to report the distributions of executed volumes normalized by the number of transitions for different order sizes. The whiskers highlight the 0.025 and the 0.975 quantile, the box represent the first and third quartile and the median is given by the line contained in the box 11 11 11 We use this convention for all box plots in this paper. . First, one can see that all reported quantiles, except the 0.025 one, increase for an increasing order size. If the trading agent only places an order with volume 1 each period the executed volume per transition is close to zero. On the other hand, if order sizes are between 50 and 100 contracts, the median executed volume per transition is around one. However, the upper quartile and the 0.975-quantile can be significantly higher. To achieve a time-averaged executed volume per transition of one contract, a trader would need to increase their order size substantially above one, which brings the risk of overshooting the target and having to trade more volume than desired. Note that this behavior is consistent with the empirical findings and the theoretical model described in  [ 16 ]  and that the exact choice of order size would depend on the traders risk profile. The box plot on the left in Figure  13  shows the ratio between filled orders and total posted volume over time (fill ratio). Overall, the fill ratios and their variation tend to decrease for increasing order sizes. This behavior of the market further encourages overquoting as it counteracts the risk of overfilling."
        ]
    },
    "id_table_4": {
        "caption": "",
        "table": "A1.F15.7",
        "footnotes": [],
        "references": [
            "The academic interest in the simulation of LOBs is well documented by the broad and recent literature. A current literature review of this subject matter  [ 30 ]  identifies four major approaches to LOB simulations: Point processes  [ 6 ,  14 ,  4 ,  27 ,  35 ,  36 ,  31 ] , agent based modelling  [ 39 ,  7 ,  5 ,  45 ] , stochastic differential equations models  [ 12 ,  32 ,  28 ,  26 ,  13 ]  and deep/statistical learning  [ 33 ,  44 ,  34 ,  10 ,  11 ,  38 ,  29 ] . We note that the first three approaches usually require explicit modelling choices on either market dynamics or interactions of market participants. While this view allows for the direct choice of relevant market characteristics, it poses the risk of fundamental modelling biases in the market dynamics. For applications in actual markets, these approaches often require the additional non-trivial step of calibration to market data and may require a high level of granularity in the data.",
            "The other papers using deep learning for LOB simulation often have a slightly different focus. Namely,  [ 33 ,  44 ,  34 ,  10 ,  38 ,  29 ]  considers event-by-event simulation within the LOB rather than the transition between LOB snapshots as in  [ 11 ]  and in this paper. We note that this may depend on the objective of the simulation. Event-by-event simulation are particularly useful for ultra-high frequency traders where a single event may cause the trader to react. Considering transitions between LOB snapshots on the other hand is often sufficient for practical applications in high to medium-high frequency trading. Note that our algorithm could be readily modified for event-by-event simulations  we leave this investigation for future work.",
            "We organize the paper as follows. Section  2  introduces our notation and assumptions for LOBs. Section  3  describes our algorithm and how it can be used for LOB simulations. Section  4  details the data set that we use to test the resampling algorithm. Section  5  explores the quality of the simulations, with and without trade interventions. In Section  6 , we demonstrate how trading strategies with limit orders can be evaluated and chosen based on our simulation approach. Section  7  considers a higher dimensional state space and usage of dimension reduction for the resampling. Section  8  concludes the paper.",
            "Limit order books are usually seen as evolving continuously over time, where market orders and limit orders may arrive at any time. The arriving orders are often modelled as random but reactive to the current state of the LO (see e.g.  [ 14 ,  40 ] ). We focus on a discretization that allows us to consider high to medium-high frequency trade decisions. In particular, we assume that the LOB evolves as a discrete random dynamical system transitioning from one LOB state-price pair  ( Z t , p t  ) subscript Z t superscript subscript p t (Z_{t},p_{t}^{*}) ( italic_Z start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT , italic_p start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT )  to the next,  ( Z t +   t , p t +   t  ) subscript Z t  t superscript subscript p t  t (Z_{t+\\Delta t},p_{t+\\Delta t}^{*}) ( italic_Z start_POSTSUBSCRIPT italic_t + roman_ italic_t end_POSTSUBSCRIPT , italic_p start_POSTSUBSCRIPT italic_t + roman_ italic_t end_POSTSUBSCRIPT start_POSTSUPERSCRIPT  end_POSTSUPERSCRIPT ) , where    t  R > 0  t subscript R absent 0 \\Delta t\\in\\mathbb{R}_{>0} roman_ italic_t  blackboard_R start_POSTSUBSCRIPT > 0 end_POSTSUBSCRIPT  is the time increment and  Z t subscript Z t Z_{t} italic_Z start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT  the state representation for the LOB 2 2 2  We note that the state representation can be chosen in many different ways and is not limited to LOB snapshots. We discuss possible choices of the state below. . Using transition functions  f Z subscript f Z f_{Z} italic_f start_POSTSUBSCRIPT italic_Z end_POSTSUBSCRIPT ,  f p subscript f p f_{p} italic_f start_POSTSUBSCRIPT italic_p end_POSTSUBSCRIPT  and a random noise    \\varepsilon italic_ , a single LOB transition is described by",
            "We choose to model the price explicitly in order to facilitate the assignment of empty tick sizes in the LOB snapshots and we assume that the price level does not have an impact on the shape of the subsequent order book. Furthermore, the iid assumption on the system noise implies that the system is Markovian. Random dynamical system formulations for LOBs are common in the literature and can, for example, be found in  [ 14 ,  12 ,  2 ,  26 ] .",
            "for some LOB depth  l l l italic_l . Other potential choices of  Z t subscript Z t Z_{t} italic_Z start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT  can include a statistic on the history of LOB snapshots to account for non-Markovian behavior of order books  [ 46 ]  or information on seasonalities (e.g. distance to fixing times) and other external events impacting the order book (e.g. trades in a derivative order book).",
            "As metric for the nearest neighbor search, we use Euclidean distances to keep the implementation as simple as possible. Other choices could be a weighted Euclidean norm putting more emphasis on order book levels closer to the dividing price or an unbalanced Wasserstein metric (e.g.  [ 43 ] ) emphasising a mass interpretation of the order book. To us, the appropriate notion of a metric in a LOB space is an open research question and is beyond the scope of this current work.",
            "We use trading data over a period of two years for 3-month Secured Overnight Financing Rate (SOFR) futures traded at the CME from January 2022 to January 2024 (see first plot in Figure  4 ). SOFR replaced the USD LIBOR as the main overnight interest rate in the US and is based on actual repo transactions on US treasuries  [ 25 ] . The 3-month SOFR futures traded at the CME replaced Eurodollar futures and are a main source for price discovery in short-term interest rates. The contracts are used by traders for hedging short-term interest rates exposures and for yield curve and spread strategies. Furthermore, they are highly liquid with trading of over 5 million contracts each day on average  [ 9 ] . For execution, the futures are centrally cleared using a limit order book where limit orders are executed according to CMEs Allocation algorithm.",
            "We use daily level 2 LOB data from CME, which contains all order book movements but does not allow us to follow individual orders. For the order book, we are given the first 5 levels with active orders for both bid and ask side with tick size   = 0.005  0.005 \\delta=0.005 italic_ = 0.005 . Additionally, we observe all executed trades from the same source and match this data with the LOB data over the exchange time stamp. We restrict ourselves to the contracts SR4H4, SR4M4, SR4U4 and SR4Z4 (see first plot in Figure  4  for monthly trading activity during data collection) and treat them as a single data set 7 7 7 This is motivated by the fact that all contracts are futures on the same underlying and by the observation in  [ 46 ]  that models trained on LOB data from multiple assets tend to perform better in replicating price dynamics compared single asset models. . Furthermore, we only consider the liquid trading times from 12pm to 8pm New York time. For an exemplary day, the second and third plot in Figure  4  support this choice.",
            "This section presents and discusses different outputs from applying Algorithm  KNNR  to real LOB data. In parts, we will use evaluation methods for LOB simulations proposed in  [ 10 ,  11 ,  38 ,  29 ] . First, we will focus on the simulation capability of Algorithm  KNNR  without any interactions by a trading agent. If we compare the simulation results to actual market replays, we consider out-of-sample performance. This means we divide the data set in two parts with a 80%-to-20% split 8 8 8 We split our data set deterministically in accordance to the ordering introduced in Section  4 . This means that testing data stems mostly from a single contract and chronological consistency of the split is kept within each contract, see e.g.  [ 41 ] . . We use the smaller set as ground truth and for initial states in resampling. The larger set is used as data source for the resampled transitions. We use this splitting procedure to ensure that the shown simulation results are not biased from reusing the actual market observations. For investigating market impact, we then consider simulations where a trading agent either places market or limit orders.",
            "Next, we investigate the impact of market orders by a trading agent on the market simulation. In general, markets are expected to respond to market orders of sufficient size in an adverse way. For example, if a trader places a large sell order, the market price will tend to decrease. The impact of market orders is a widely researched topic, e.g.  [ 48 ] , as it can have a significant negative effect on profits from trading. It is suggested e.g. in  [ 20 ,  17 ,  47 ]  that the market impact is proportional to the square root of the order size  P P P italic_P  divided by the daily trading volume  V     V \\overline{V} over  start_ARG italic_V end_ARG ,",
            "Similar to market orders, we expect an adversarial effect of large limit orders on the price, i.e.  [ 24 ,  15 ,  42 ] .",
            "The results of this experiment are reported in Figure  14 . The left plot shows mean inventory paths (lines) and the 90%-quantile intervals for inventories (shaded areas) for different values of the order multiplier. The mean inventory paths and quantile intervals are decreasing and are ordered by the value of the order multiplier. The lower quantile values decrease especially fast for the medium and larger order multipliers, hinting that a single trade is potentially enough to execute all the inventory. Further note that for values where the order multiplier is larger than one, the trader may overshoot their trading target and may end up with a short position that then needs to be unwinded during the remaining trading period. The upper quantile limit on the other hand remains close to  40 40 40 40  over a longer period of time for all order multipliers. This implies that there is a possibility that no trade is executed against our traders limit orders. The upper quantiles then start decreasing after some time for all  k k k italic_k . For larger  k k k italic_k , this decrease starts earlier, signifying that larger orders are more likely to be (partially) executed in this pro-rata type market.",
            "The middle plot in Figure  14  shows the distribution of inventories at the last time step before the market orders are executed for different order multipliers. For  k = 0.5 k 0.5 k=0.5 italic_k = 0.5 , it is infeasible that the entire inventory is executed via limit orders and the median is relatively large. This means that a large proportion of inventory will be executed via market orders. If the order multiplier is equal to one, the trader cannot overshoot the execution target with limit orders. The median final inventory is close to zero, but, compared to larger  k k k italic_k , the upper quartile is larger, implying a higher reliance on market orders. For  k = 1.25 k 1.25 k=1.25 italic_k = 1.25 , the lower quartile and the median coincide at a zero inventory and the trade target is overshot only in the tails. Furthermore, the upper quartile is lower compared to  k = 1.0 k 1.0 k=1.0 italic_k = 1.0 , implying less reliance on market sell orders. For large values of  k k k italic_k , we observe that the trade target is consistently overshot, which will require market buy orders to unwind short positions. On the other hand, the upper quartile remains almost unchanged compared to  k = 1.25 k 1.25 k=1.25 italic_k = 1.25 . Finally, note that the upper whisker is for all order multipliers equal to the initial inventory. This points to the possibility that no order is filled via limit orders for all multipliers.",
            "Since executing market orders requires paying the spread, we expect that order multipliers requiring large market orders in the final period will exhibit a higher cost of execution. To investigate this hypothesis, we compare the average earnings per asset for different values of the order multiplier. We quantify the earnings by dividing the total earned cash by the initial inventory and then subtracting the initial price. The corresponding plot can be found in Figure  14  on the right. First, note that for all order multipliers the relative average cash earnings are negative, implying a cost of execution on average. The scale of the execution costs varies around half a tick size. Highest earnings (or lowest execution costs) are reached at  k = 1.25 k 1.25 k=1.25 italic_k = 1.25 , while they decrease consistently for smaller and larger values in  k k k italic_k . Considering the box plot on final inventories and its discussion, this observation is consistent with the hypothesis that order multipliers requiring larger market orders will perform worse. In particular, for  k = 1.25 k 1.25 k=1.25 italic_k = 1.25 , market sell orders are less often needed compared to smaller  k k k italic_k  and this benefit seems to outweigh the occasional costs associated to overshooting. On the other hand, for larger  k k k italic_k , the additional costs of overshooting outweigh any potential benefit of additional unit execution. From the view point of strategy calibration, this experiment implies that a risk neutral trader should choose  k = 1.25 k 1.25 k=1.25 italic_k = 1.25  to minimize expected execution costs.",
            "In addition to the current volume levels in the order book, we include features containing information on recent price moves and trading activity in the LOB state. Namely, we add mid-price returns and trade imbalances 13 13 13 The trade imbalance is given as the volume of all buyer-initiated trades divided by the volume of all trades over a given period of time, see e.g.  [ 10 ] .  over different time windows for each sample in the data set. This is done by slightly modifying the data set generation. In addition to the procedure described in Section  4 , we look up for each LOB snapshot the mid-price that was observed a certain number of LOB events before the snapshot was taken. With the previous mid-price and the mid-price of the current snapshot we calculate the mid-price return for each sample. We do this for a differing number of preceding order book events. In this experiment, we choose the number of order book events for mid-price returns by 250, 1250, and 5000 order book events. This gives us 3 additional matching dimensions in the nearest neighbor search. Similarly, we add the trade imbalances where the feature is calculated for the previous 250, 2500, and 12500 order book events for each snapshot. In total, we then have a 16-dimensional state space. For normalization, we take the square root of the order book volumes and then apply a  z z z italic_z -score transformation to all variables. With the normalized features, we calculate the weight vector for a principal component analysis (PCA) and reduce the dimension of the data to the first eight principal components, which explain around 80% of the datas variability.",
            "For comparability, we conduct the same benchmark analysis based on KS statistics as in Section  5.4  and report the results in Table  2 . We highlight the variables that improved in comparison to Table  1 , and we see that Algorithm  KNNR  with an extended state space improves on the majority of tested features. Note that we investigated only one particular combination of features and dimension reduction. Other combinations may be more effective and their choice may depend on the task at hand. We leave the exploration of more principled approaches for LOB representations in the context of order book simulations for future work."
        ]
    },
    "id_table_5": {
        "caption": "",
        "table": "A1.F19.7",
        "footnotes": [],
        "references": [
            "The academic interest in the simulation of LOBs is well documented by the broad and recent literature. A current literature review of this subject matter  [ 30 ]  identifies four major approaches to LOB simulations: Point processes  [ 6 ,  14 ,  4 ,  27 ,  35 ,  36 ,  31 ] , agent based modelling  [ 39 ,  7 ,  5 ,  45 ] , stochastic differential equations models  [ 12 ,  32 ,  28 ,  26 ,  13 ]  and deep/statistical learning  [ 33 ,  44 ,  34 ,  10 ,  11 ,  38 ,  29 ] . We note that the first three approaches usually require explicit modelling choices on either market dynamics or interactions of market participants. While this view allows for the direct choice of relevant market characteristics, it poses the risk of fundamental modelling biases in the market dynamics. For applications in actual markets, these approaches often require the additional non-trivial step of calibration to market data and may require a high level of granularity in the data.",
            "Since we apply our algorithm to a LOB with a pro-rata type matching mechanism, we also highlight  [ 5 ] , which is to our knowledge the only LOB simulator explicitly used for pro-rata markets. In contrast to our paper, the focus of their work is on the explanation of market phenomena by aggregation of agents rather than simulating a specific market or evaluating trading strategies. Furthermore, our method is applicable to different types of execution mechanisms and pro-rata type matching is only exploited for evaluating trading strategies with limit orders (see Section  6 ).",
            "We organize the paper as follows. Section  2  introduces our notation and assumptions for LOBs. Section  3  describes our algorithm and how it can be used for LOB simulations. Section  4  details the data set that we use to test the resampling algorithm. Section  5  explores the quality of the simulations, with and without trade interventions. In Section  6 , we demonstrate how trading strategies with limit orders can be evaluated and chosen based on our simulation approach. Section  7  considers a higher dimensional state space and usage of dimension reduction for the resampling. Section  8  concludes the paper.",
            "We use trading data over a period of two years for 3-month Secured Overnight Financing Rate (SOFR) futures traded at the CME from January 2022 to January 2024 (see first plot in Figure  4 ). SOFR replaced the USD LIBOR as the main overnight interest rate in the US and is based on actual repo transactions on US treasuries  [ 25 ] . The 3-month SOFR futures traded at the CME replaced Eurodollar futures and are a main source for price discovery in short-term interest rates. The contracts are used by traders for hedging short-term interest rates exposures and for yield curve and spread strategies. Furthermore, they are highly liquid with trading of over 5 million contracts each day on average  [ 9 ] . For execution, the futures are centrally cleared using a limit order book where limit orders are executed according to CMEs Allocation algorithm.",
            "We start by reporting several observations on Algorithm  KNNR . The first plot in Figure  5  shows the distribution of distances between matched states at the beginning of the resampling path and at the end, i.e.",
            "where     \\|\\cdot\\|     is the Euclidean norm and  s = 0 s 0 s=0 italic_s = 0  or  s = 59 s 59 s=59 italic_s = 59 . In general, smaller distances in a nearest neighbor matching are associated with a smaller bias in the quantity of interest. We observe that the distributions at both points in time are heavily skewed to the left with outliers to the right. Comparing the distances at the initial and the final matching reveals that the distances at the beginning are larger on average and the right tail is less heavy compared to the last transition. The second plot in Figure  5  confirms this observation. Here, we plot the average distance and its 0.95-quantile against time. We observe that both metrics decrease over time. This can potentially be explained by the uniformly random initialization of the state as edge cases are more likely to occur in a uniform random framework compared to a nearest neighbor choice where centrality is preferred. This effect could be mitigated by a firmer restriction on less liquid market regimes or an adapted initial sampling scheme. On the other hand, the decreasing distance over time also implyies a reduced bias contribution of later transitions.",
            "On the right in Figure  6 , we give the average (normalized) volume after a transition for the real and the simulated LOB on different LOB levels. We report bid volumes as being negative signed and ask volumes as positive. The real and simulated average volumes are almost indistinguishable. Very small differences can be observed on the LOB levels furthest away from the spread on both sides where the simulated market has slightly less volume compared to the real market. Comparing this result to a benchmark which unconditionally and uniform randomly selects a transition from the training data (cf. Figure  15 ) reveals that Algorithm  KNNR  is better in fitting the average volumes for the samples from the test data. The discrepancy between the benchmark and the averages from the test data points to a slight distributional shift between the training and test split of the data. This distributional shift seems to be captured by Algorithm  KNNR  and shows that our method goes beyond an unconditional law of large numbers. We further discuss this comparison in Appendix  A .",
            "Similar to market orders, we expect an adversarial effect of large limit orders on the price, i.e.  [ 24 ,  15 ,  42 ] .",
            "For comparability, we conduct the same benchmark analysis based on KS statistics as in Section  5.4  and report the results in Table  2 . We highlight the variables that improved in comparison to Table  1 , and we see that Algorithm  KNNR  with an extended state space improves on the majority of tested features. Note that we investigated only one particular combination of features and dimension reduction. Other combinations may be more effective and their choice may depend on the task at hand. We leave the exploration of more principled approaches for LOB representations in the context of order book simulations for future work.",
            "Figure  15  corresponds to Figure  6  in the main part. In Figure  15 , we observe that naive sampling reproduces the marginal volume distributions relatively well although with more discrepancies compared to Algorithm  KNNR  (cf. Table  1 ). The average LOB volumes have a similar shape but are slightly lower compared to the transitions from the test data. The discrepancies reveal a slight distributional shift between the training data that was used for naive sampling and the test data used for the real transitions. The LLN should give the same results if the sampling distributions are the same (up to the sampling error). This sampling error becomes negligible especially for the average LOB shapes with  10 4 superscript 10 4 10^{4} 10 start_POSTSUPERSCRIPT 4 end_POSTSUPERSCRIPT  samples. While naive sampling is not capable to account for this shift, Algorithm  KNNR  with its conditional resampling is able to adapt."
        ]
    }
}