{
    "id_table_1": {
        "caption": "Table 1:  Question describing the dynamic model and task for a continuous, stirred-tank reactor.",
        "table": "S3.T7.1.1",
        "footnotes": [],
        "references": [
            "Basic chemical principles and process calculations, including material and energy balances, heat transfer, phase equilibrium, and reaction kinetics, underpins modeling and optimization in the chemical process industries. These principles are crucial for control and optimization. Process dynamics predict plant behavior and stability, while control ensures desired conditions, quality, and safety. Optimization maximizes profitability, productivity, and efficiency within constraints, contributing to operational excellence. Advances in generative AI, particularly general-purpose large language models (LLMs) like OpenAIs GPT-4  [ 5 ]  and Googles Gemini  [ 8 ] , have shown remarkable proficiency in mathematical reasoning and problem-solving skills due to extensive pretraining, revolutionizing various fields. These LLMs can assist engineers in making informed decisions and innovating in the chemical and process industries as decision support tools. Despite these advancements, their ability to solve complex chemical and process calculations remains understudied. Additionally, there is currently no specialized foundational model built for tackling complex chemical and process calculations. There is a need to fine-tune existing pre-trained LLMs on large-scale, domain-specific datasets to develop a new core foundational AI model for solving complex chemical and process calculations. The size and complexity of closed-source LLMs like GPT-4 make it difficult to customize them for specialized tasks and edit knowledge, particularly on consumer hardware with limited computational budgets. In contrast, open small language models (SLMs) like Google Gemma [ 9 ]  and Meta Llama [ 10 ]  offer domain-specific customization and interpretable analysis. However, SLMs may lack relevant domain-specific mathematical reasoning and problem-solving capabilities compared to proprietary LLMs due to limited relevant pre-trained knowledge. Despite these limitations, a customizable SLM fine-tuned on high-quality domain-specific datasets can achieve performance comparable to large-scale models while offering advantages like explainability and cost-effectiveness. Recently, there has been a surge of interest in exploring tool-augmented SLMs powered by external symbolic tools, numerical software tools, and APIs for program-guided solving that generates executable code to tackle complex mathematical problems. To overcome the drawbacks of limited domain-specific knowledge and better incorporate and utilize external knowledge from databases, we introduce Retrieval-Augmented Instruction-Tuning (RAIT). RAIT technique enhances the capabilities of SLMs by combining Retrieval-Augmented Code Generation (RACG) through external tool usage with instruction-tuning techniques. This approach uses both retrieved information and fine-tuned knowledge for generating code to solve chemical and process engineering problems. However, there are currently no publicly available high-quality labeled datasets of chemical and process engineering problems and solutions to customize SLMs through instruction-tuning. To address this gap, we have curated custom datasets from various scholarly sources suitable for the instruction-tuning of SLMs. The instruction-tuned SLMs utilize both internal parametric pre-trained knowledge and relevant external knowledge from tool invocation (e.g., numerical libraries and code documentation, Stack Overflow, Wolfram Alpha API) with chain-of-thought (CoT) [ wei2022chain ]  reasoning to assist in code generation and debugging. In this work, we introduce an autonomous agent framework that can independently write, debug, and optimize code for solving complex process calculations fundamental to chemical process design, analysis, and optimization. Figure  1  depicts the framework.",
            "In this work, we introduce an autonomous agent framework designed to write, debug, and optimize code for systematically solving complex chemical and process calculations, fundamental to the design, analysis, and optimization of the chemical process industry (CPI). The agent performs Retrieval-Augmented Code Generation (RACG), utilizing advanced code-specific small language models (SLMs) such as Google CodeGemma [ 1 ]  or Meta CodeLlama [ 4 ]  with the ReAct (Reason + Act) prompting [ 12 ]  technique to understand and generate code from natural language specifications. Code SLMs lack pre-trained knowledge to generate code for solving chemical and process calculations. Conversely, fine-tuning [ 14 ]  by incorporating relevant domain-specific knowledge offers task-specific customization of code SLMs to generate code for solving process calculations. While RACG techniques [ 3 ]  allow code SLMs to access external tools [ 7 ]  for code generation, they are often not pre-trained to seamlessly incorporate retrieved information from invoking external tools, leading to less grounded and reliable answers. To address these issues, we utilize the RAIT approach to optimally adapt code SLMs through a fine-tuning technique for domain-specific RACG with tool usage, thus overcoming the limitations of both approaches: limited pre-trained knowledge and the inability to effectively leverage external tools. This leads to improved code generation. The ReAct (Reason + Act) technique enhances the capabilities of code SLMs by prompting them to generate verbal reasoning traces and task-specific actions, helping the code SLM plan and update actions while enabling tool usage to retrieve relevant information. Such tools include APIs like Stack Overflow and Wolfram Alpha, as well as scholarly sources such as code documentation. ReAct employs few-shot learning with examples of task-solving trajectories that include reasoning-action-observation steps, making the agent effective in knowledge-intensive tasks like code generation. This approach allows the agent to reason over external knowledge retrieved from tool usage, extending its capabilities beyond its pre-trained knowledge. We also utilize iterative code generation and refinement through a verify-then-correct approach, involving verification with external critiques to generate feedback and subsequent correction, ensuring the accuracy of the generated code. The autonomous agents operate with a five-stage workflow: task planning, tool selection, parameter extraction from user queries, tool invocation, and result integration. This structured approach maximizes the agents utility and effectively addresses a wide range of end-user queries through the strategic use of external tools. Task planning involves analyzing the user query to understand the high-level goal and then decomposing it into smaller, manageable sub-tasks. These sub-tasks are organized into a task dependency graph to ensure proper execution order. During tool selection, the most suitable tool is chosen to solve each sub-task from the external tool set. In the parameter extraction stage, the required parameters are extracted from the user query, and in the tool invocation stage, the tool is invoked with these parameters to obtain results. In response generation, the objective is to integrate multiple tool outputs with the code SLMs internal knowledge to generate a comprehensive response. This involves the code language model synthesizing information from the tools and combining it with its fine-tuned knowledge to provide a detailed and accurate response, which may include summarizing the tool outputs. If the initial response is incomplete or requires refinement, an iterative feedback loop [ 2 ]  adjusts the task planning process, ensuring continuous improvement of the agents performance. For code LMs, tools include external resources such as APIs, software libraries, debugging tools, and knowledge bases like scholarly sources. Leveraging these tools enhances the code generation capabilities of autonomous agents, enabling them to execute, evaluate, and optimize code to meet specific requirements. Additionally, these tools help identify and resolve errors, facilitating better understanding, generation, and manipulation of code for solving complex chemical and process calculations. In summary, the proposed autonomous agent enables code SLMs to act as multi-tool users by generating programs that utilize a chain of tools, aiding in planning and executing complex tasks for solving practical chemical and process calculations. It addresses the limitations of existing ad hoc methods, where tool interaction workflows are manually designed and struggle to generalize to different scenarios. We implement program caching, storing generated programs that successfully complete tasks. This caching allows code SLMs to refer to these programs in future tasks, enabling efficient reuse of previously correct code. This memory of correct code helps reduce redundancy and enhances the efficiency of generating new programs for similar tasks. We illustrate the proposed frameworks operation in Tables  1 - 6  by solving a dynamic modeling problem for a continuous stirred-tank reactor (CSTR) using numerical methods. The task begins with formulating a differential equation for the concentration of a reactant over time. Next, we select the appropriate toolsSciPy for solving differential equations, NumPy for numerical operations, and Matplotlib for plotting results. Parameters are extracted from the user query, and the tools are invoked using a Reason + Act + Observe technique. This approach allows the autonomous agent to effectively integrate the outputs from multiple tools, culminating in a plot of the concentration profile over time. This example shows how the agent generates an accurate response by combining tool outputs with its internal knowledge.",
            "The table  9  compares algorithms in tool calling by Consistency with Stipulations (Cons), Correctness of Parameter Extraction (PE), and Error Handling (EH), all in %. Cons ranges from 0% (none meet requirements) to 100% (all meet requirements). PE ranges from 0% (none correct) to 100% (all correct). EH ranges from 0% (ineffective) to 100% (effective). The table  10  compares algorithms in response generation by BLEU, ROUGE-L, and Exact Match (EM). BLEU ranges from 0 (worst) to 1 (perfect). ROUGE-L ranges from 0 (no common subsequence) to 1 (perfect common subsequence). EM ranges from 0% (none match) to 100% (all match). The experimental results indicate that the proposed framework is effective; however, it lags slightly behind the proprietary models. We conducted several ablation studies to thoroughly evaluate our framework, which leverages the RAIT technique to enhance code SLMs for solving complex chemical and process engineering calculations. The ablation studies aim to isolate and quantify the contributions of key components: the ReAct (Reason + Act) prompting technique (without ReAct), integration of external knowledge (without Ext. Know), fine-tuning of code SLMs (without SLM Tuning), iterative code refinement (without Iter Refine) process with the attributable reflection mechanism, and program caching (without Caching). By systematically removing or disabling each component and observing the resulting performance changes, we measure their impact on key metrics. The baseline is the complete RAIT framework with all components enabled. These ablation studies ensure a thorough understanding of the frameworks strengths, demonstrating how each component contributes to the overall performance in solving specialized engineering problems. The ablation studies presented in Tables  11 ,  12 ,  13 , and  14  provide a comprehensive evaluation of the proposed RAIT framework for enhancing code SLMs in solving complex chemical and process engineering calculations.",
            "The ablation study experimental results clearly demonstrate that the complete RAIT framework (baseline) outperforms the ablated variants across various metrics. This highlights the synergistic effect of the frameworks components and underscores the importance of incorporating all aspects for optimal performance in specialized engineering tasks.  A comprehensive human evaluation [ 11 ]  approach is developed to evaluate the proposed RAIT framework. This framework is designed to augment code SLMs capabilities in solving complex chemical and process engineering calculations. The evaluation involves criteria including accuracy, relevance, coherence, comprehensiveness, and usability, assessed by both domain experts and general technical evaluators. Accuracy measures the correctness of the solutions, relevance assesses the appropriateness of the responses and selected tools, coherence evaluates the logical flow and readability, comprehensiveness checks the coverage and detail level, and usability determines the practicality and ease of integration of the generated code into workflows. Detailed guidelines ensure consistent scoring across these criteria, using a 1 (Poor) to 5 (Excellent) scale for each criterion. Both quantitative scores and qualitative feedback provide in-depth insights into the frameworks performance. The process involves expert evaluators analyzing results to identify strengths and weaknesses based on benchmark datasets. The table  15  presents the overall performance metrics for the RAIT framework, showing the mean scores across five evaluation criteria: accuracy, relevance, coherence, comprehensiveness, and usability. The scores range from 4.00 to 4.22 on a scale of 1 (Poor) to 5 (Excellent).",
            "We demonstrate the practical application and effectiveness of the RAIT framework in solving a variety of chemical engineering calculations. Table  16  uses the ideal gas law to calculate  CO 2 subscript CO 2 \\text{CO}_{2} CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  volume. Table  17  demonstrates modeling biosynthesis:  CO 2 subscript CO 2 \\text{CO}_{2} CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  utilization and product formation. Table  18  presents the solution for psychrometric calculations in industrial dehumidification. Table  19  analyzes a single-effect evaporator, calculating heat load and steam economy."
        ]
    },
    "id_table_2": {
        "caption": "Table 2:  Task planning steps to solve the dynamic model for a stirred-tank reactor.",
        "table": "S3.T8.1.1",
        "footnotes": [],
        "references": [
            "The table  9  compares algorithms in tool calling by Consistency with Stipulations (Cons), Correctness of Parameter Extraction (PE), and Error Handling (EH), all in %. Cons ranges from 0% (none meet requirements) to 100% (all meet requirements). PE ranges from 0% (none correct) to 100% (all correct). EH ranges from 0% (ineffective) to 100% (effective). The table  10  compares algorithms in response generation by BLEU, ROUGE-L, and Exact Match (EM). BLEU ranges from 0 (worst) to 1 (perfect). ROUGE-L ranges from 0 (no common subsequence) to 1 (perfect common subsequence). EM ranges from 0% (none match) to 100% (all match). The experimental results indicate that the proposed framework is effective; however, it lags slightly behind the proprietary models. We conducted several ablation studies to thoroughly evaluate our framework, which leverages the RAIT technique to enhance code SLMs for solving complex chemical and process engineering calculations. The ablation studies aim to isolate and quantify the contributions of key components: the ReAct (Reason + Act) prompting technique (without ReAct), integration of external knowledge (without Ext. Know), fine-tuning of code SLMs (without SLM Tuning), iterative code refinement (without Iter Refine) process with the attributable reflection mechanism, and program caching (without Caching). By systematically removing or disabling each component and observing the resulting performance changes, we measure their impact on key metrics. The baseline is the complete RAIT framework with all components enabled. These ablation studies ensure a thorough understanding of the frameworks strengths, demonstrating how each component contributes to the overall performance in solving specialized engineering problems. The ablation studies presented in Tables  11 ,  12 ,  13 , and  14  provide a comprehensive evaluation of the proposed RAIT framework for enhancing code SLMs in solving complex chemical and process engineering calculations.",
            "We introduce Needle in a Haystack experiments to evaluate the RAIT framework using 100 Q&A pairs from benchmark test sets. These experiments assess the frameworks ability to extract specific, relevant information from large knowledge bases to solve engineering problems. Key performance metrics include precision (the fraction of retrieved documents that are relevant to the query), emphasizing minimization of false positives, and recall (the fraction of all relevant documents that were successfully retrieved), emphasizing minimization of false negatives. Additional metrics are the F1 score (harmonic mean of precision and recall), accuracy of generated answers, relevance of retrieved documents, and coherence of responses. Results in Table  20  show that the RAIT framework achieves performance comparable to larger models in specialized tasks, demonstrating its effectiveness in complex information retrieval and problem-solving scenarios."
        ]
    },
    "id_table_3": {
        "caption": "Table 3:  Tool selection for solving the initial value problem for the differential equation of the continuous stirred-tank reactor.",
        "table": "S3.T9.1.1",
        "footnotes": [],
        "references": [
            "The table  9  compares algorithms in tool calling by Consistency with Stipulations (Cons), Correctness of Parameter Extraction (PE), and Error Handling (EH), all in %. Cons ranges from 0% (none meet requirements) to 100% (all meet requirements). PE ranges from 0% (none correct) to 100% (all correct). EH ranges from 0% (ineffective) to 100% (effective). The table  10  compares algorithms in response generation by BLEU, ROUGE-L, and Exact Match (EM). BLEU ranges from 0 (worst) to 1 (perfect). ROUGE-L ranges from 0 (no common subsequence) to 1 (perfect common subsequence). EM ranges from 0% (none match) to 100% (all match). The experimental results indicate that the proposed framework is effective; however, it lags slightly behind the proprietary models. We conducted several ablation studies to thoroughly evaluate our framework, which leverages the RAIT technique to enhance code SLMs for solving complex chemical and process engineering calculations. The ablation studies aim to isolate and quantify the contributions of key components: the ReAct (Reason + Act) prompting technique (without ReAct), integration of external knowledge (without Ext. Know), fine-tuning of code SLMs (without SLM Tuning), iterative code refinement (without Iter Refine) process with the attributable reflection mechanism, and program caching (without Caching). By systematically removing or disabling each component and observing the resulting performance changes, we measure their impact on key metrics. The baseline is the complete RAIT framework with all components enabled. These ablation studies ensure a thorough understanding of the frameworks strengths, demonstrating how each component contributes to the overall performance in solving specialized engineering problems. The ablation studies presented in Tables  11 ,  12 ,  13 , and  14  provide a comprehensive evaluation of the proposed RAIT framework for enhancing code SLMs in solving complex chemical and process engineering calculations."
        ]
    },
    "id_table_4": {
        "caption": "Table 4:  Parameter extraction for solving the differential equation of the continuous stirred-tank reactor.",
        "table": "S3.T10.1.1",
        "footnotes": [],
        "references": [
            "The table  9  compares algorithms in tool calling by Consistency with Stipulations (Cons), Correctness of Parameter Extraction (PE), and Error Handling (EH), all in %. Cons ranges from 0% (none meet requirements) to 100% (all meet requirements). PE ranges from 0% (none correct) to 100% (all correct). EH ranges from 0% (ineffective) to 100% (effective). The table  10  compares algorithms in response generation by BLEU, ROUGE-L, and Exact Match (EM). BLEU ranges from 0 (worst) to 1 (perfect). ROUGE-L ranges from 0 (no common subsequence) to 1 (perfect common subsequence). EM ranges from 0% (none match) to 100% (all match). The experimental results indicate that the proposed framework is effective; however, it lags slightly behind the proprietary models. We conducted several ablation studies to thoroughly evaluate our framework, which leverages the RAIT technique to enhance code SLMs for solving complex chemical and process engineering calculations. The ablation studies aim to isolate and quantify the contributions of key components: the ReAct (Reason + Act) prompting technique (without ReAct), integration of external knowledge (without Ext. Know), fine-tuning of code SLMs (without SLM Tuning), iterative code refinement (without Iter Refine) process with the attributable reflection mechanism, and program caching (without Caching). By systematically removing or disabling each component and observing the resulting performance changes, we measure their impact on key metrics. The baseline is the complete RAIT framework with all components enabled. These ablation studies ensure a thorough understanding of the frameworks strengths, demonstrating how each component contributes to the overall performance in solving specialized engineering problems. The ablation studies presented in Tables  11 ,  12 ,  13 , and  14  provide a comprehensive evaluation of the proposed RAIT framework for enhancing code SLMs in solving complex chemical and process engineering calculations."
        ]
    },
    "id_table_5": {
        "caption": "Table 5:  Tool invocation using the ReAct (Reason + Act) technique to solve and visualize the differential equation for the continuous stirred-tank reactor.",
        "table": "S3.T11.1.1",
        "footnotes": [],
        "references": [
            "The ablation study experimental results clearly demonstrate that the complete RAIT framework (baseline) outperforms the ablated variants across various metrics. This highlights the synergistic effect of the frameworks components and underscores the importance of incorporating all aspects for optimal performance in specialized engineering tasks.  A comprehensive human evaluation [ 11 ]  approach is developed to evaluate the proposed RAIT framework. This framework is designed to augment code SLMs capabilities in solving complex chemical and process engineering calculations. The evaluation involves criteria including accuracy, relevance, coherence, comprehensiveness, and usability, assessed by both domain experts and general technical evaluators. Accuracy measures the correctness of the solutions, relevance assesses the appropriateness of the responses and selected tools, coherence evaluates the logical flow and readability, comprehensiveness checks the coverage and detail level, and usability determines the practicality and ease of integration of the generated code into workflows. Detailed guidelines ensure consistent scoring across these criteria, using a 1 (Poor) to 5 (Excellent) scale for each criterion. Both quantitative scores and qualitative feedback provide in-depth insights into the frameworks performance. The process involves expert evaluators analyzing results to identify strengths and weaknesses based on benchmark datasets. The table  15  presents the overall performance metrics for the RAIT framework, showing the mean scores across five evaluation criteria: accuracy, relevance, coherence, comprehensiveness, and usability. The scores range from 4.00 to 4.22 on a scale of 1 (Poor) to 5 (Excellent)."
        ]
    },
    "id_table_6": {
        "caption": "Table 6:  Result integration code to solve and visualize the differential equation for the continuous stirred-tank reactor using Python.",
        "table": "S3.T12.1.1",
        "footnotes": [],
        "references": [
            "In this work, we introduce an autonomous agent framework designed to write, debug, and optimize code for systematically solving complex chemical and process calculations, fundamental to the design, analysis, and optimization of the chemical process industry (CPI). The agent performs Retrieval-Augmented Code Generation (RACG), utilizing advanced code-specific small language models (SLMs) such as Google CodeGemma [ 1 ]  or Meta CodeLlama [ 4 ]  with the ReAct (Reason + Act) prompting [ 12 ]  technique to understand and generate code from natural language specifications. Code SLMs lack pre-trained knowledge to generate code for solving chemical and process calculations. Conversely, fine-tuning [ 14 ]  by incorporating relevant domain-specific knowledge offers task-specific customization of code SLMs to generate code for solving process calculations. While RACG techniques [ 3 ]  allow code SLMs to access external tools [ 7 ]  for code generation, they are often not pre-trained to seamlessly incorporate retrieved information from invoking external tools, leading to less grounded and reliable answers. To address these issues, we utilize the RAIT approach to optimally adapt code SLMs through a fine-tuning technique for domain-specific RACG with tool usage, thus overcoming the limitations of both approaches: limited pre-trained knowledge and the inability to effectively leverage external tools. This leads to improved code generation. The ReAct (Reason + Act) technique enhances the capabilities of code SLMs by prompting them to generate verbal reasoning traces and task-specific actions, helping the code SLM plan and update actions while enabling tool usage to retrieve relevant information. Such tools include APIs like Stack Overflow and Wolfram Alpha, as well as scholarly sources such as code documentation. ReAct employs few-shot learning with examples of task-solving trajectories that include reasoning-action-observation steps, making the agent effective in knowledge-intensive tasks like code generation. This approach allows the agent to reason over external knowledge retrieved from tool usage, extending its capabilities beyond its pre-trained knowledge. We also utilize iterative code generation and refinement through a verify-then-correct approach, involving verification with external critiques to generate feedback and subsequent correction, ensuring the accuracy of the generated code. The autonomous agents operate with a five-stage workflow: task planning, tool selection, parameter extraction from user queries, tool invocation, and result integration. This structured approach maximizes the agents utility and effectively addresses a wide range of end-user queries through the strategic use of external tools. Task planning involves analyzing the user query to understand the high-level goal and then decomposing it into smaller, manageable sub-tasks. These sub-tasks are organized into a task dependency graph to ensure proper execution order. During tool selection, the most suitable tool is chosen to solve each sub-task from the external tool set. In the parameter extraction stage, the required parameters are extracted from the user query, and in the tool invocation stage, the tool is invoked with these parameters to obtain results. In response generation, the objective is to integrate multiple tool outputs with the code SLMs internal knowledge to generate a comprehensive response. This involves the code language model synthesizing information from the tools and combining it with its fine-tuned knowledge to provide a detailed and accurate response, which may include summarizing the tool outputs. If the initial response is incomplete or requires refinement, an iterative feedback loop [ 2 ]  adjusts the task planning process, ensuring continuous improvement of the agents performance. For code LMs, tools include external resources such as APIs, software libraries, debugging tools, and knowledge bases like scholarly sources. Leveraging these tools enhances the code generation capabilities of autonomous agents, enabling them to execute, evaluate, and optimize code to meet specific requirements. Additionally, these tools help identify and resolve errors, facilitating better understanding, generation, and manipulation of code for solving complex chemical and process calculations. In summary, the proposed autonomous agent enables code SLMs to act as multi-tool users by generating programs that utilize a chain of tools, aiding in planning and executing complex tasks for solving practical chemical and process calculations. It addresses the limitations of existing ad hoc methods, where tool interaction workflows are manually designed and struggle to generalize to different scenarios. We implement program caching, storing generated programs that successfully complete tasks. This caching allows code SLMs to refer to these programs in future tasks, enabling efficient reuse of previously correct code. This memory of correct code helps reduce redundancy and enhances the efficiency of generating new programs for similar tasks. We illustrate the proposed frameworks operation in Tables  1 - 6  by solving a dynamic modeling problem for a continuous stirred-tank reactor (CSTR) using numerical methods. The task begins with formulating a differential equation for the concentration of a reactant over time. Next, we select the appropriate toolsSciPy for solving differential equations, NumPy for numerical operations, and Matplotlib for plotting results. Parameters are extracted from the user query, and the tools are invoked using a Reason + Act + Observe technique. This approach allows the autonomous agent to effectively integrate the outputs from multiple tools, culminating in a plot of the concentration profile over time. This example shows how the agent generates an accurate response by combining tool outputs with its internal knowledge.",
            "We demonstrate the practical application and effectiveness of the RAIT framework in solving a variety of chemical engineering calculations. Table  16  uses the ideal gas law to calculate  CO 2 subscript CO 2 \\text{CO}_{2} CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  volume. Table  17  demonstrates modeling biosynthesis:  CO 2 subscript CO 2 \\text{CO}_{2} CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  utilization and product formation. Table  18  presents the solution for psychrometric calculations in industrial dehumidification. Table  19  analyzes a single-effect evaporator, calculating heat load and steam economy."
        ]
    },
    "id_table_7": {
        "caption": "Table 7:  The table provides a comprehensive overview of performance evaluation metrics and their corresponding results for LLMs in the context of task planning.",
        "table": "S3.T13.1.1",
        "footnotes": [],
        "references": [
            "The table  7  compares algorithms in task planning by Tool Usage Awareness (TUA), Pass Rate (PR), and Accuracy (Acc), all in %. TUA ranges from 0% (failure) to 100% (perfect identification). PR ranges from 0% (none correct) to 100% (all correct). Acc ranges from 0% (none identified correctly) to 100% (all identified correctly). The table  8  compares algorithms in tool selection by Recall, NDCG, and COMP metrics. Recall ranges from 0 (none relevant) to 100 (all relevant). NDCG ranges from 0 (worst) to 1 (ideal). COMP ranges from 0 (none selected) to 100 (all selected).",
            "We demonstrate the practical application and effectiveness of the RAIT framework in solving a variety of chemical engineering calculations. Table  16  uses the ideal gas law to calculate  CO 2 subscript CO 2 \\text{CO}_{2} CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  volume. Table  17  demonstrates modeling biosynthesis:  CO 2 subscript CO 2 \\text{CO}_{2} CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  utilization and product formation. Table  18  presents the solution for psychrometric calculations in industrial dehumidification. Table  19  analyzes a single-effect evaporator, calculating heat load and steam economy."
        ]
    },
    "id_table_8": {
        "caption": "Table 8:  The table offers a summary of key performance evaluation metrics and corresponding results for LLMs performance in tool selection",
        "table": "S3.T14.1.1",
        "footnotes": [],
        "references": [
            "The table  7  compares algorithms in task planning by Tool Usage Awareness (TUA), Pass Rate (PR), and Accuracy (Acc), all in %. TUA ranges from 0% (failure) to 100% (perfect identification). PR ranges from 0% (none correct) to 100% (all correct). Acc ranges from 0% (none identified correctly) to 100% (all identified correctly). The table  8  compares algorithms in tool selection by Recall, NDCG, and COMP metrics. Recall ranges from 0 (none relevant) to 100 (all relevant). NDCG ranges from 0 (worst) to 1 (ideal). COMP ranges from 0 (none selected) to 100 (all selected).",
            "We demonstrate the practical application and effectiveness of the RAIT framework in solving a variety of chemical engineering calculations. Table  16  uses the ideal gas law to calculate  CO 2 subscript CO 2 \\text{CO}_{2} CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  volume. Table  17  demonstrates modeling biosynthesis:  CO 2 subscript CO 2 \\text{CO}_{2} CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  utilization and product formation. Table  18  presents the solution for psychrometric calculations in industrial dehumidification. Table  19  analyzes a single-effect evaporator, calculating heat load and steam economy."
        ]
    },
    "id_table_9": {
        "caption": "Table 9:  The table presents LLM performance in tool calling, evaluated using key metrics.",
        "table": "S3.T15.1",
        "footnotes": [],
        "references": [
            "The table  9  compares algorithms in tool calling by Consistency with Stipulations (Cons), Correctness of Parameter Extraction (PE), and Error Handling (EH), all in %. Cons ranges from 0% (none meet requirements) to 100% (all meet requirements). PE ranges from 0% (none correct) to 100% (all correct). EH ranges from 0% (ineffective) to 100% (effective). The table  10  compares algorithms in response generation by BLEU, ROUGE-L, and Exact Match (EM). BLEU ranges from 0 (worst) to 1 (perfect). ROUGE-L ranges from 0 (no common subsequence) to 1 (perfect common subsequence). EM ranges from 0% (none match) to 100% (all match). The experimental results indicate that the proposed framework is effective; however, it lags slightly behind the proprietary models. We conducted several ablation studies to thoroughly evaluate our framework, which leverages the RAIT technique to enhance code SLMs for solving complex chemical and process engineering calculations. The ablation studies aim to isolate and quantify the contributions of key components: the ReAct (Reason + Act) prompting technique (without ReAct), integration of external knowledge (without Ext. Know), fine-tuning of code SLMs (without SLM Tuning), iterative code refinement (without Iter Refine) process with the attributable reflection mechanism, and program caching (without Caching). By systematically removing or disabling each component and observing the resulting performance changes, we measure their impact on key metrics. The baseline is the complete RAIT framework with all components enabled. These ablation studies ensure a thorough understanding of the frameworks strengths, demonstrating how each component contributes to the overall performance in solving specialized engineering problems. The ablation studies presented in Tables  11 ,  12 ,  13 , and  14  provide a comprehensive evaluation of the proposed RAIT framework for enhancing code SLMs in solving complex chemical and process engineering calculations.",
            "We demonstrate the practical application and effectiveness of the RAIT framework in solving a variety of chemical engineering calculations. Table  16  uses the ideal gas law to calculate  CO 2 subscript CO 2 \\text{CO}_{2} CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  volume. Table  17  demonstrates modeling biosynthesis:  CO 2 subscript CO 2 \\text{CO}_{2} CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT  utilization and product formation. Table  18  presents the solution for psychrometric calculations in industrial dehumidification. Table  19  analyzes a single-effect evaporator, calculating heat load and steam economy."
        ]
    },
    "id_table_10": {
        "caption": "Table 10:  The table summarizes performance metrics for LLMs in response generation.",
        "table": "S3.T20.1.1",
        "footnotes": [],
        "references": [
            "The table  9  compares algorithms in tool calling by Consistency with Stipulations (Cons), Correctness of Parameter Extraction (PE), and Error Handling (EH), all in %. Cons ranges from 0% (none meet requirements) to 100% (all meet requirements). PE ranges from 0% (none correct) to 100% (all correct). EH ranges from 0% (ineffective) to 100% (effective). The table  10  compares algorithms in response generation by BLEU, ROUGE-L, and Exact Match (EM). BLEU ranges from 0 (worst) to 1 (perfect). ROUGE-L ranges from 0 (no common subsequence) to 1 (perfect common subsequence). EM ranges from 0% (none match) to 100% (all match). The experimental results indicate that the proposed framework is effective; however, it lags slightly behind the proprietary models. We conducted several ablation studies to thoroughly evaluate our framework, which leverages the RAIT technique to enhance code SLMs for solving complex chemical and process engineering calculations. The ablation studies aim to isolate and quantify the contributions of key components: the ReAct (Reason + Act) prompting technique (without ReAct), integration of external knowledge (without Ext. Know), fine-tuning of code SLMs (without SLM Tuning), iterative code refinement (without Iter Refine) process with the attributable reflection mechanism, and program caching (without Caching). By systematically removing or disabling each component and observing the resulting performance changes, we measure their impact on key metrics. The baseline is the complete RAIT framework with all components enabled. These ablation studies ensure a thorough understanding of the frameworks strengths, demonstrating how each component contributes to the overall performance in solving specialized engineering problems. The ablation studies presented in Tables  11 ,  12 ,  13 , and  14  provide a comprehensive evaluation of the proposed RAIT framework for enhancing code SLMs in solving complex chemical and process engineering calculations."
        ]
    },
    "global_footnotes": []
}